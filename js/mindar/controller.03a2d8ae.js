import { c as Rr, g as x2, O as w2 } from "./ui.4498bf0c.js";
function I2(n, t) {
  for (var e = 0; e < t.length; e++) {
    const s = t[e];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const r in s)
        if (r !== "default" && !(r in n)) {
          const o = Object.getOwnPropertyDescriptor(s, r);
          o && Object.defineProperty(n, r, o.get ? o : {
            enumerable: !0,
            get: () => s[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S2 = 1e-7, v2 = 1e-4;
class rm {
  constructor(t, e) {
    this.backend = t, this.dataMover = e, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(t) {
    return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);
  }
  set(t, e) {
    this.dataIdsCount++, this.data.set(t, e);
  }
  has(t) {
    return this.data.has(t);
  }
  delete(t) {
    return this.dataIdsCount--, this.data.delete(t);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class Qu {
  refCount(t) {
    return zn("refCount");
  }
  incRef(t) {
    return zn("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(t) {
    return zn("time");
  }
  read(t) {
    return zn("read");
  }
  readSync(t) {
    return zn("readSync");
  }
  readToGPU(t, e) {
    return zn("readToGPU");
  }
  numDataIds() {
    return zn("numDataIds");
  }
  disposeData(t, e) {
    return zn("disposeData");
  }
  write(t, e, s) {
    return zn("write");
  }
  move(t, e, s, r, o) {
    return zn("move");
  }
  memory() {
    return zn("memory");
  }
  floatPrecision() {
    return zn("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? S2 : v2;
  }
  dispose() {
    return zn("dispose");
  }
}
function zn(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function om(n) {
  let t = n.length, e = 0;
  for (; t > 0; )
    e = Math.random() * t | 0, t--, kn(n, t, e);
}
function C2(n, t) {
  if (n.length !== t.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);
  let e = n.length, s = 0;
  for (; e > 0; )
    s = Math.random() * e | 0, e--, kn(n, e, s), kn(t, e, s);
}
function wr(n, t, e) {
  return Math.max(n, Math.min(t, e));
}
function qu(n) {
  return n % 2 === 0 ? n : n + 1;
}
function kn(n, t, e) {
  const s = n[t];
  n[t] = n[e], n[e] = s;
}
function n1(n) {
  let t = 0;
  for (let e = 0; e < n.length; e++)
    t += n[e];
  return t;
}
function k2(n, t) {
  const e = Math.random();
  return t * e + (1 - e) * n;
}
function N2(n, t) {
  let e = 0;
  for (let s = 0; s < n.length; s++) {
    const r = Number(n[s]) - Number(t[s]);
    e += r * r;
  }
  return e;
}
function k(n, t) {
  if (!n)
    throw new Error(typeof t == "string" ? t : t());
}
function Ye(n, t, e = "") {
  k(Vt(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function fo(n) {
  k(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function Hs(n, t = [], e = !1) {
  if (t == null && (t = []), Array.isArray(n) || Be(n) && !e)
    for (let s = 0; s < n.length; ++s)
      Hs(n[s], t, e);
  else
    t.push(n);
  return t;
}
function H(n) {
  if (n.length === 0)
    return 1;
  let t = n[0];
  for (let e = 1; e < n.length; e++)
    t *= n[e];
  return t;
}
function T2(n) {
  return n.length === 0;
}
function Vt(n, t) {
  if (n === t)
    return !0;
  if (n == null || t == null || n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function to(n) {
  return n % 1 === 0;
}
function $2(n) {
  if (Math.tanh != null)
    return Math.tanh(n);
  if (n === 1 / 0)
    return 1;
  if (n === -1 / 0)
    return -1;
  {
    const t = Math.exp(2 * n);
    return (t - 1) / (t + 1);
  }
}
function yu(n) {
  const t = Math.ceil(Math.sqrt(n));
  return [t, Math.ceil(n / t)];
}
function R2(n) {
  const t = new Uint32Array(n);
  for (let e = 0; e < n; ++e)
    t[e] = e;
  return om(t), t;
}
function Yr(n, t) {
  return t <= n.length ? n : n + " ".repeat(t - n.length);
}
function lf(n, t = (r) => 0, e, s = setTimeout) {
  return new Promise((r, o) => {
    let i = 0;
    const a = () => {
      if (n()) {
        r();
        return;
      }
      i++;
      const l = t(i);
      if (e != null && i >= e) {
        o();
        return;
      }
      s(a, l);
    };
    a();
  });
}
function im(n, t) {
  let e = 1, s = -1;
  for (let o = 0; o < n.length; ++o)
    if (n[o] >= 0)
      e *= n[o];
    else if (n[o] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);
      s = o;
    } else if (n[o] < 0)
      throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);
  if (s === -1) {
    if (t > 0 && t !== e)
      throw Error(`Size(${t}) must match the product of shape ${n}`);
    return n;
  }
  if (e === 0)
    throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (t % e !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);
  const r = n.slice();
  return r[s] = t / e, r;
}
function At(n, t) {
  const e = t.length;
  return n = n == null ? t.map((s, r) => r) : [].concat(n), k(n.every((s) => s >= -e && s < e), () => `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`), k(n.every((s) => to(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? e + s : s);
}
function nr(n, t) {
  const e = [], s = [], r = t != null && Array.isArray(t) && t.length === 0, o = t == null || r ? null : At(t, n).sort();
  let i = 0;
  for (let a = 0; a < n.length; ++a) {
    if (o != null) {
      if (o[i] === a && n[a] !== 1)
        throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);
      (o[i] == null || o[i] > a) && n[a] === 1 && (e.push(n[a]), s.push(a)), o[i] <= a && i++;
    }
    n[a] !== 1 && (e.push(n[a]), s.push(a));
  }
  return { newShape: e, keptDims: s };
}
function ue(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function Bt(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else if (n === "string")
    e = new Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function s1(n, t) {
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
  }
}
function r1(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function am(n, t) {
  return !(t === "complex64" || t === "float32" && n !== "complex64" || t === "int32" && n !== "float32" && n !== "complex64" || t === "bool" && n === "bool");
}
function Be(n) {
  return n instanceof Float32Array || n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray;
}
function bu(n) {
  if (n === "float32" || n === "int32")
    return 4;
  if (n === "complex64")
    return 8;
  if (n === "bool")
    return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function o1(n) {
  if (n == null)
    return 0;
  let t = 0;
  return n.forEach((e) => t += e.length), t;
}
function Ls(n) {
  return typeof n == "string" || n instanceof String;
}
function i1(n) {
  return typeof n == "boolean";
}
function xu(n) {
  return typeof n == "number";
}
function ei(n) {
  return Array.isArray(n) ? ei(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : xu(n) ? "float32" : Ls(n) ? "string" : i1(n) ? "bool" : "float32";
}
function Ir(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function wu(n, t) {
  for (let e = t; e < n; ++e)
    if (n % e === 0)
      return e;
  return n;
}
function xt(n) {
  const t = n.length;
  if (t < 2)
    return [];
  const e = new Array(t - 1);
  e[t - 2] = n[t - 1];
  for (let s = t - 3; s >= 0; --s)
    e[s] = e[s + 1] * n[s + 1];
  return e;
}
function a1(n, t, e, s = !1) {
  const r = new Array();
  if (t.length === 1) {
    const o = t[0] * (s ? 2 : 1);
    for (let i = 0; i < o; i++)
      r[i] = e[n + i];
  } else {
    const o = t[0], i = t.slice(1), a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
    for (let l = 0; l < o; l++)
      r[l] = a1(n + l * a, i, e, s);
  }
  return r;
}
function _n(n, t, e = !1) {
  if (n.length === 0)
    return t[0];
  const s = n.reduce((r, o) => r * o) * (e ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== t.length)
    throw new Error(`[${n}] does not match the input size ${t.length}${e ? " for a complex tensor" : ""}.`);
  return a1(0, n, t, e);
}
function th(n, t) {
  const e = Ie(n, t);
  for (let s = 0; s < e.length; s++)
    e[s] = 1;
  return e;
}
function Ie(n, t) {
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool")
    return new Uint8Array(n);
  throw new Error(`Unknown data type ${t}`);
}
function lm(n, t) {
  const e = n.reduce((s, r) => s * r, 1);
  if (t == null || t === "float32")
    return _n(n, new Float32Array(e));
  if (t === "int32")
    return _n(n, new Int32Array(e));
  if (t === "bool")
    return _n(n, new Uint8Array(e));
  throw new Error(`Unknown data type ${t}`);
}
function cm(n) {
  n.forEach((t) => {
    k(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function Rn(n, t, e) {
  if (t === 0)
    return 0;
  if (t === 1)
    return n[0];
  let s = n[n.length - 1];
  for (let r = 0; r < n.length - 1; ++r)
    s += e[r] * n[r];
  return s;
}
function Ws(n, t, e) {
  if (t === 0)
    return [];
  if (t === 1)
    return [n];
  const s = new Array(t);
  for (let r = 0; r < s.length - 1; ++r)
    s[r] = Math.floor(n / e[r]), n -= s[r] * e[r];
  return s[s.length - 1] = n, s;
}
function Sr(n) {
  return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u0 = "tfjsflags";
class l1 {
  constructor(t) {
    this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = E2, this.populateURLFlags();
  }
  setPlatform(t, e) {
    this.platform != null && (K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)), this.platformName = t, this.platform = e;
  }
  registerFlag(t, e, s) {
    if (this.flagRegistry[t] = { evaluationFn: e, setHook: s }, this.urlFlags[t] != null) {
      const r = this.urlFlags[t];
      K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(`Setting feature override from URL ${t}: ${r}.`), this.set(t, r);
    }
  }
  async getAsync(t) {
    return t in this.flags ? this.flags[t] : (this.flags[t] = await this.evaluateFlag(t), this.flags[t]);
  }
  get(t) {
    if (t in this.flags)
      return this.flags[t];
    const e = this.evaluateFlag(t);
    if (Sr(e))
      throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[t] = e, this.flags[t];
  }
  getNumber(t) {
    return this.get(t);
  }
  getBool(t) {
    return this.get(t);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(t, e) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot set flag ${t} as it has not been registered.`);
    this.flags[t] = e, this.flagRegistry[t].setHook != null && this.flagRegistry[t].setHook(e);
  }
  evaluateFlag(t) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);
    return this.flagRegistry[t].evaluationFn();
  }
  setFlags(t) {
    this.flags = Object.assign({}, t);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const t = this.getQueryParams(this.global.location.search);
    u0 in t && t[u0].split(",").forEach((s) => {
      const [r, o] = s.split(":");
      this.urlFlags[r] = D2(r, o);
    });
  }
}
function E2(n) {
  const t = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (e, ...s) => (L2(t, s[0], s[1]), s.join("="))), t;
}
function L2(n, t, e) {
  n[decodeURIComponent(t)] = decodeURIComponent(e || "");
}
function D2(n, t) {
  if (t = t.toLowerCase(), t === "true" || t === "false")
    return t === "true";
  if (`${+t}` === t)
    return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${n}.`);
}
function K() {
  return um;
}
let um = null;
function G2(n) {
  um = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let $p;
function c1() {
  if ($p == null) {
    let n;
    if (typeof window < "u")
      n = window;
    else if (typeof global < "u")
      n = global;
    else if (typeof process < "u")
      n = process;
    else if (typeof self < "u")
      n = self;
    else
      throw new Error("Could not find a global object");
    $p = n;
  }
  return $p;
}
function F2() {
  const n = c1();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function hm(n, t) {
  const e = F2();
  if (e.has(n))
    return e.get(n);
  {
    const s = t();
    return e.set(n, s), e.get(n);
  }
}
const sl = "Abs", ni = "Acos", si = "Acosh", mo = "Add", rl = "AddN", eh = "All", nh = "Any", ol = "ArgMax", il = "ArgMin", ri = "Asin", oi = "Asinh", ii = "Atan", ai = "Atanh", li = "Atan2", al = "AvgPool", sh = "AvgPoolGrad", ll = "AvgPool3D", rh = "AvgPool3DGrad", cl = "BatchMatMul", ul = "BatchToSpaceND", oh = "Bincount", u1 = "BroadcastTo", ih = "BroadcastArgs", ci = "Cast", ui = "Ceil", hi = "ClipByValue", ah = "Complex", hl = "ComplexAbs", dl = "Concat", pl = "Conv2D", lh = "Conv2DBackpropFilter", fl = "Conv2DBackpropInput", ml = "Conv3D", ch = "Conv3DBackpropFilterV2", uh = "Conv3DBackpropInputV2", di = "Cos", pi = "Cosh", hh = "Cumprod", gl = "Cumsum", dh = "CropAndResize", ph = "DenseBincount", fh = "DepthToSpace", yl = "DepthwiseConv2dNative", mh = "DepthwiseConv2dNativeBackpropFilter", gh = "DepthwiseConv2dNativeBackpropInput", yh = "Diag", bl = "Dilation2D", Iu = "Dilation2DBackpropInput", Su = "Dilation2DBackpropFilter", fi = "RealDiv", bh = "Einsum", mi = "Elu", xh = "EluGrad", gi = "Erf", xl = "Equal", yi = "Exp", wl = "ExpandDims", bi = "Expm1", wh = "FFT", Ih = "Fill", Sh = "FlipLeftRight", xi = "Floor", wi = "FloorDiv", Il = "FusedBatchNorm", Sl = "GatherV2", vh = "GatherNd", vl = "Greater", Ii = "GreaterEqual", Si = "Identity", Ch = "IFFT", kh = "Imag", vi = "IsFinite", Ci = "IsInf", ki = "IsNan", Cl = "LeakyRelu", kl = "Less", Nl = "LessEqual", Nh = "LinSpace", Ni = "Log", Ti = "Log1p", Tl = "LogicalAnd", $l = "LogicalNot", Rl = "LogicalOr", O2 = "LogicalXor", h1 = "LogSoftmax", A2 = "LowerBound", El = "LRN", Th = "LRNGrad", Ll = "Max", $i = "Maximum", Dl = "MaxPool", $h = "MaxPoolGrad", Gl = "MaxPool3D", Rh = "MaxPool3DGrad", Eh = "MaxPoolWithArgmax", Fl = "Mean", Ol = "Min", Ri = "Minimum", Al = "MirrorPad", Ei = "Mod", Lh = "Multinomial", Li = "Multiply", zl = "Neg", Wl = "NotEqual", Dh = "NonMaxSuppressionV3", Gh = "NonMaxSuppressionV4", Fh = "NonMaxSuppressionV5", Vl = "OnesLike", Pl = "OneHot", Ml = "Pack", Xl = "PadV2", z2 = "Pool", Di = "Pow", _l = "Prelu", Kl = "Prod", Oh = "RaggedGather", Ah = "RaggedTensorToTensor", zh = "Range", Wh = "Real", Gi = "Reciprocal", Fi = "Relu", Zl = "Reshape", Bl = "ResizeNearestNeighbor", Vh = "ResizeNearestNeighborGrad", Hl = "ResizeBilinear", Ph = "ResizeBilinearGrad", Oi = "Relu6", Ul = "Reverse", Ai = "Round", zi = "Rsqrt", Mh = "ScatterNd", Xh = "SearchSorted", Yl = "Select", Wi = "Selu", jl = "Slice", Vi = "Sin", Pi = "Sinh", Mi = "Sign", Xi = "Sigmoid", _i = "Softplus", Ki = "Sqrt", Jl = "Sum", Ql = "SpaceToBatchND", ql = "SplitV", tc = "Softmax", _h = "SparseFillEmptyRows", Kh = "SparseReshape", Zh = "SparseSegmentMean", Bh = "SparseSegmentSum", Hh = "SparseToDense", Zi = "SquaredDifference", Uh = "Square", Yh = "StridedSlice", jh = "StringNGrams", Jh = "StringSplit", Qh = "StringToHashBucketFast", Bi = "Sub", Hi = "Tan", Ui = "Tanh", Yi = "Tile", qh = "TopK", td = "Transform", jr = "Transpose", ed = "Unique", ec = "Unpack", nc = "UnsortedSegmentSum", W2 = "UpperBound", sc = "ZerosLike", ji = "Step", vu = "FromPixels", nd = "RotateWithOffset", Va = "_FusedMatMul", Pa = "FusedConv2D", Ma = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vn(...n) {
  K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(...n);
}
function V2(...n) {
  K().getBool("IS_TEST") || K().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wo = hm("kernelRegistry", () => /* @__PURE__ */ new Map()), Xa = hm("gradRegistry", () => /* @__PURE__ */ new Map());
function Cu(n, t) {
  const e = dm(n, t);
  return Wo.get(e);
}
function cf(n) {
  return Xa.get(n);
}
function ku(n) {
  const t = Wo.entries(), e = [];
  for (; ; ) {
    const { done: s, value: r } = t.next();
    if (s)
      break;
    const [o, i] = r, [a] = o.split("_");
    a === n && e.push(i);
  }
  return e;
}
function wn(n) {
  const { kernelName: t, backendName: e } = n, s = dm(t, e);
  Wo.has(s) && Vn(`The kernel '${t}' for backend '${e}' is already registered`), Wo.set(s, n);
}
function d1(n) {
  const { kernelName: t } = n;
  Xa.has(t) && K().getBool("DEBUG") && Vn(`Overriding the gradient for '${t}'`), Xa.set(t, n);
}
function P2(n, t) {
  const e = dm(n, t);
  if (!Wo.has(e))
    throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);
  Wo.delete(e);
}
function M2(n) {
  if (!Xa.has(n))
    throw new Error(`The gradient '${n}' for backend is not registered`);
  Xa.delete(n);
}
function X2(n, t) {
  ku(n).forEach((s) => {
    const r = Object.assign({}, s, { backendName: t });
    wn(r);
  });
}
function dm(n, t) {
  return `${t}_${n}`;
}
var uf = ae, ts = null;
try {
  ts = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch {
}
function ae(n, t, e) {
  this.low = n | 0, this.high = t | 0, this.unsigned = !!e;
}
ae.prototype.__isLong__;
Object.defineProperty(ae.prototype, "__isLong__", { value: !0 });
function An(n) {
  return (n && n.__isLong__) === !0;
}
ae.isLong = An;
var h0 = {}, d0 = {};
function go(n, t) {
  var e, s, r;
  return t ? (n >>>= 0, (r = 0 <= n && n < 256) && (s = d0[n], s) ? s : (e = le(n, (n | 0) < 0 ? -1 : 0, !0), r && (d0[n] = e), e)) : (n |= 0, (r = -128 <= n && n < 128) && (s = h0[n], s) ? s : (e = le(n, n < 0 ? -1 : 0, !1), r && (h0[n] = e), e));
}
ae.fromInt = go;
function es(n, t) {
  if (isNaN(n))
    return t ? Zr : ns;
  if (t) {
    if (n < 0)
      return Zr;
    if (n >= p1)
      return g1;
  } else {
    if (n <= -f0)
      return Tn;
    if (n + 1 >= f0)
      return m1;
  }
  return n < 0 ? es(-n, t).neg() : le(n % Vo | 0, n / Vo | 0, t);
}
ae.fromNumber = es;
function le(n, t, e) {
  return new ae(n, t, e);
}
ae.fromBits = le;
var Nu = Math.pow;
function pm(n, t, e) {
  if (n.length === 0)
    throw Error("empty string");
  if (n === "NaN" || n === "Infinity" || n === "+Infinity" || n === "-Infinity")
    return ns;
  if (typeof t == "number" ? (e = t, t = !1) : t = !!t, e = e || 10, e < 2 || 36 < e)
    throw RangeError("radix");
  var s;
  if ((s = n.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (s === 0)
    return pm(n.substring(1), t, e).neg();
  for (var r = es(Nu(e, 8)), o = ns, i = 0; i < n.length; i += 8) {
    var a = Math.min(8, n.length - i), l = parseInt(n.substring(i, i + a), e);
    if (a < 8) {
      var c = es(Nu(e, a));
      o = o.mul(c).add(es(l));
    } else
      o = o.mul(r), o = o.add(es(l));
  }
  return o.unsigned = t, o;
}
ae.fromString = pm;
function Ss(n, t) {
  return typeof n == "number" ? es(n, t) : typeof n == "string" ? pm(n, t) : le(n.low, n.high, typeof t == "boolean" ? t : n.unsigned);
}
ae.fromValue = Ss;
var p0 = 1 << 16, _2 = 1 << 24, Vo = p0 * p0, p1 = Vo * Vo, f0 = p1 / 2, m0 = go(_2), ns = go(0);
ae.ZERO = ns;
var Zr = go(0, !0);
ae.UZERO = Zr;
var Fo = go(1);
ae.ONE = Fo;
var f1 = go(1, !0);
ae.UONE = f1;
var hf = go(-1);
ae.NEG_ONE = hf;
var m1 = le(-1, 2147483647, !1);
ae.MAX_VALUE = m1;
var g1 = le(-1, -1, !0);
ae.MAX_UNSIGNED_VALUE = g1;
var Tn = le(0, -2147483648, !1);
ae.MIN_VALUE = Tn;
var dt = ae.prototype;
dt.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
dt.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * Vo + (this.low >>> 0) : this.high * Vo + (this.low >>> 0);
};
dt.toString = function(t) {
  if (t = t || 10, t < 2 || 36 < t)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative())
    if (this.eq(Tn)) {
      var e = es(t), s = this.div(e), r = s.mul(e).sub(this);
      return s.toString(t) + r.toInt().toString(t);
    } else
      return "-" + this.neg().toString(t);
  for (var o = es(Nu(t, 6), this.unsigned), i = this, a = ""; ; ) {
    var l = i.div(o), c = i.sub(l.mul(o)).toInt() >>> 0, u = c.toString(t);
    if (i = l, i.isZero())
      return u + a;
    for (; u.length < 6; )
      u = "0" + u;
    a = "" + u + a;
  }
};
dt.getHighBits = function() {
  return this.high;
};
dt.getHighBitsUnsigned = function() {
  return this.high >>> 0;
};
dt.getLowBits = function() {
  return this.low;
};
dt.getLowBitsUnsigned = function() {
  return this.low >>> 0;
};
dt.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(Tn) ? 64 : this.neg().getNumBitsAbs();
  for (var t = this.high != 0 ? this.high : this.low, e = 31; e > 0 && (t & 1 << e) == 0; e--)
    ;
  return this.high != 0 ? e + 33 : e + 1;
};
dt.isZero = function() {
  return this.high === 0 && this.low === 0;
};
dt.eqz = dt.isZero;
dt.isNegative = function() {
  return !this.unsigned && this.high < 0;
};
dt.isPositive = function() {
  return this.unsigned || this.high >= 0;
};
dt.isOdd = function() {
  return (this.low & 1) === 1;
};
dt.isEven = function() {
  return (this.low & 1) === 0;
};
dt.equals = function(t) {
  return An(t) || (t = Ss(t)), this.unsigned !== t.unsigned && this.high >>> 31 === 1 && t.high >>> 31 === 1 ? !1 : this.high === t.high && this.low === t.low;
};
dt.eq = dt.equals;
dt.notEquals = function(t) {
  return !this.eq(t);
};
dt.neq = dt.notEquals;
dt.ne = dt.notEquals;
dt.lessThan = function(t) {
  return this.comp(t) < 0;
};
dt.lt = dt.lessThan;
dt.lessThanOrEqual = function(t) {
  return this.comp(t) <= 0;
};
dt.lte = dt.lessThanOrEqual;
dt.le = dt.lessThanOrEqual;
dt.greaterThan = function(t) {
  return this.comp(t) > 0;
};
dt.gt = dt.greaterThan;
dt.greaterThanOrEqual = function(t) {
  return this.comp(t) >= 0;
};
dt.gte = dt.greaterThanOrEqual;
dt.ge = dt.greaterThanOrEqual;
dt.compare = function(t) {
  if (An(t) || (t = Ss(t)), this.eq(t))
    return 0;
  var e = this.isNegative(), s = t.isNegative();
  return e && !s ? -1 : !e && s ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
};
dt.comp = dt.compare;
dt.negate = function() {
  return !this.unsigned && this.eq(Tn) ? Tn : this.not().add(Fo);
};
dt.neg = dt.negate;
dt.add = function(t) {
  An(t) || (t = Ss(t));
  var e = this.high >>> 16, s = this.high & 65535, r = this.low >>> 16, o = this.low & 65535, i = t.high >>> 16, a = t.high & 65535, l = t.low >>> 16, c = t.low & 65535, u = 0, h = 0, d = 0, p = 0;
  return p += o + c, d += p >>> 16, p &= 65535, d += r + l, h += d >>> 16, d &= 65535, h += s + a, u += h >>> 16, h &= 65535, u += e + i, u &= 65535, le(d << 16 | p, u << 16 | h, this.unsigned);
};
dt.subtract = function(t) {
  return An(t) || (t = Ss(t)), this.add(t.neg());
};
dt.sub = dt.subtract;
dt.multiply = function(t) {
  if (this.isZero())
    return ns;
  if (An(t) || (t = Ss(t)), ts) {
    var e = ts.mul(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return le(e, ts.get_high(), this.unsigned);
  }
  if (t.isZero())
    return ns;
  if (this.eq(Tn))
    return t.isOdd() ? Tn : ns;
  if (t.eq(Tn))
    return this.isOdd() ? Tn : ns;
  if (this.isNegative())
    return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
  if (t.isNegative())
    return this.mul(t.neg()).neg();
  if (this.lt(m0) && t.lt(m0))
    return es(this.toNumber() * t.toNumber(), this.unsigned);
  var s = this.high >>> 16, r = this.high & 65535, o = this.low >>> 16, i = this.low & 65535, a = t.high >>> 16, l = t.high & 65535, c = t.low >>> 16, u = t.low & 65535, h = 0, d = 0, p = 0, f = 0;
  return f += i * u, p += f >>> 16, f &= 65535, p += o * u, d += p >>> 16, p &= 65535, p += i * c, d += p >>> 16, p &= 65535, d += r * u, h += d >>> 16, d &= 65535, d += o * c, h += d >>> 16, d &= 65535, d += i * l, h += d >>> 16, d &= 65535, h += s * u + r * c + o * l + i * a, h &= 65535, le(p << 16 | f, h << 16 | d, this.unsigned);
};
dt.mul = dt.multiply;
dt.divide = function(t) {
  if (An(t) || (t = Ss(t)), t.isZero())
    throw Error("division by zero");
  if (ts) {
    if (!this.unsigned && this.high === -2147483648 && t.low === -1 && t.high === -1)
      return this;
    var e = (this.unsigned ? ts.div_u : ts.div_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return le(e, ts.get_high(), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? Zr : ns;
  var s, r, o;
  if (this.unsigned) {
    if (t.unsigned || (t = t.toUnsigned()), t.gt(this))
      return Zr;
    if (t.gt(this.shru(1)))
      return f1;
    o = Zr;
  } else {
    if (this.eq(Tn)) {
      if (t.eq(Fo) || t.eq(hf))
        return Tn;
      if (t.eq(Tn))
        return Fo;
      var i = this.shr(1);
      return s = i.div(t).shl(1), s.eq(ns) ? t.isNegative() ? Fo : hf : (r = this.sub(t.mul(s)), o = s.add(r.div(t)), o);
    } else if (t.eq(Tn))
      return this.unsigned ? Zr : ns;
    if (this.isNegative())
      return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
    if (t.isNegative())
      return this.div(t.neg()).neg();
    o = ns;
  }
  for (r = this; r.gte(t); ) {
    s = Math.max(1, Math.floor(r.toNumber() / t.toNumber()));
    for (var a = Math.ceil(Math.log(s) / Math.LN2), l = a <= 48 ? 1 : Nu(2, a - 48), c = es(s), u = c.mul(t); u.isNegative() || u.gt(r); )
      s -= l, c = es(s, this.unsigned), u = c.mul(t);
    c.isZero() && (c = Fo), o = o.add(c), r = r.sub(u);
  }
  return o;
};
dt.div = dt.divide;
dt.modulo = function(t) {
  if (An(t) || (t = Ss(t)), ts) {
    var e = (this.unsigned ? ts.rem_u : ts.rem_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return le(e, ts.get_high(), this.unsigned);
  }
  return this.sub(this.div(t).mul(t));
};
dt.mod = dt.modulo;
dt.rem = dt.modulo;
dt.not = function() {
  return le(~this.low, ~this.high, this.unsigned);
};
dt.and = function(t) {
  return An(t) || (t = Ss(t)), le(this.low & t.low, this.high & t.high, this.unsigned);
};
dt.or = function(t) {
  return An(t) || (t = Ss(t)), le(this.low | t.low, this.high | t.high, this.unsigned);
};
dt.xor = function(t) {
  return An(t) || (t = Ss(t)), le(this.low ^ t.low, this.high ^ t.high, this.unsigned);
};
dt.shiftLeft = function(t) {
  return An(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? le(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : le(0, this.low << t - 32, this.unsigned);
};
dt.shl = dt.shiftLeft;
dt.shiftRight = function(t) {
  return An(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? le(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : le(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
dt.shr = dt.shiftRight;
dt.shiftRightUnsigned = function(t) {
  if (An(t) && (t = t.toInt()), t &= 63, t === 0)
    return this;
  var e = this.high;
  if (t < 32) {
    var s = this.low;
    return le(s >>> t | e << 32 - t, e >>> t, this.unsigned);
  } else
    return t === 32 ? le(e, 0, this.unsigned) : le(e >>> t - 32, 0, this.unsigned);
};
dt.shru = dt.shiftRightUnsigned;
dt.shr_u = dt.shiftRightUnsigned;
dt.toSigned = function() {
  return this.unsigned ? le(this.low, this.high, !1) : this;
};
dt.toUnsigned = function() {
  return this.unsigned ? this : le(this.low, this.high, !0);
};
dt.toBytes = function(t) {
  return t ? this.toBytesLE() : this.toBytesBE();
};
dt.toBytesLE = function() {
  var t = this.high, e = this.low;
  return [
    e & 255,
    e >>> 8 & 255,
    e >>> 16 & 255,
    e >>> 24,
    t & 255,
    t >>> 8 & 255,
    t >>> 16 & 255,
    t >>> 24
  ];
};
dt.toBytesBE = function() {
  var t = this.high, e = this.low;
  return [
    t >>> 24,
    t >>> 16 & 255,
    t >>> 8 & 255,
    t & 255,
    e >>> 24,
    e >>> 16 & 255,
    e >>> 8 & 255,
    e & 255
  ];
};
ae.fromBytes = function(t, e, s) {
  return s ? ae.fromBytesLE(t, e) : ae.fromBytesBE(t, e);
};
ae.fromBytesLE = function(t, e) {
  return new ae(
    t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24,
    t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24,
    e
  );
};
ae.fromBytesBE = function(t, e) {
  return new ae(
    t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7],
    t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3],
    e
  );
};
const K2 = /* @__PURE__ */ I2({
  __proto__: null,
  default: uf
}, [uf]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xr = uf || K2;
function rc(n) {
  return Xr.fromString(n, !0, 16);
}
const y1 = rc("c3a5c85c97cb3127"), Pr = rc("b492b66fbe98f273"), sn = rc("9ae16a3b2f90404f");
function df(n) {
  return n.xor(n.shru(47));
}
function b1(n, t, e) {
  const s = n.slice(t, t + e);
  return Xr.fromBytes(Array.from(s), !0, !0);
}
function ne(n, t) {
  return b1(n, t, 8);
}
function g0(n, t) {
  return b1(n, t, 4);
}
function Pe(n, t) {
  return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function mr(n, t, e = rc("9ddfea08eb382d69")) {
  let s = n.xor(t).mul(e);
  s = s.xor(s.shru(47));
  let r = t.xor(s).mul(e);
  return r = r.xor(r.shru(47)), r = r.mul(e), r;
}
function Z2(n, t, e, s, r, o) {
  r = r.add(n), o = Pe(o.add(r).add(s), 21);
  const i = r;
  return r = r.add(t), r = r.add(e), o = o.add(Pe(r, 44)), [r.add(s), o.add(i)];
}
function Hc(n, t, e, s) {
  return Z2(ne(n, t), ne(n, t + 8), ne(n, t + 16), ne(n, t + 24), e, s);
}
function B2(n, t = n.length) {
  if (t >= 8) {
    const e = sn.add(t * 2), s = ne(n, 0).add(sn), r = ne(n, t - 8), o = Pe(r, 37).mul(e).add(s), i = Pe(s, 25).add(r).mul(e);
    return mr(o, i, e);
  }
  if (t >= 4) {
    const e = sn.add(t * 2), s = g0(n, 0);
    return mr(s.shl(3).add(t), g0(n, t - 4), e);
  }
  if (t > 0) {
    const e = n[0], s = n[t >> 1], r = n[t - 1], o = e + (s << 8), i = t + (r << 2);
    return df(sn.mul(o).xor(y1.mul(i))).mul(sn);
  }
  return sn;
}
function H2(n, t = n.length) {
  const e = sn.add(t * 2), s = ne(n, 0).mul(Pr), r = ne(n, 8), o = ne(n, t - 8).mul(e), i = ne(n, t - 16).mul(sn);
  return mr(Pe(s.add(r), 43).add(Pe(o, 30)).add(i), s.add(Pe(r.add(sn), 18)).add(o), e);
}
function U2(n, t = n.length) {
  const e = sn.add(t * 2), s = ne(n, 0).mul(sn), r = ne(n, 8), o = ne(n, t - 8).mul(e), i = ne(n, t - 16).mul(sn), a = Pe(s.add(r), 43).add(Pe(o, 30)).add(i), l = mr(a, s.add(Pe(r.add(sn), 18)).add(o), e), c = ne(n, 16).mul(e), u = ne(n, 24), h = a.add(ne(n, t - 32)).mul(e), d = l.add(ne(n, t - 24)).mul(e);
  return mr(Pe(c.add(u), 43).add(Pe(h, 30)).add(d), c.add(Pe(u.add(s), 18)).add(h), e);
}
function fm(n, t = n.length) {
  const e = Xr.fromNumber(81, !0);
  if (t <= 32)
    return t <= 16 ? B2(n, t) : H2(n, t);
  if (t <= 64)
    return U2(n, t);
  let s = e, r = e.mul(Pr).add(113), o = df(r.mul(sn).add(113)).mul(sn), i = [Xr.UZERO, Xr.UZERO], a = [Xr.UZERO, Xr.UZERO];
  s = s.mul(sn).add(ne(n, 0));
  let l = 0;
  const c = (t - 1 >> 6) * 64, u = c + (t - 1 & 63) - 63;
  do
    s = Pe(s.add(r).add(i[0]).add(ne(n, l + 8)), 37).mul(Pr), r = Pe(r.add(i[1]).add(ne(n, l + 48)), 42).mul(Pr), s = s.xor(a[1]), r = r.add(i[0]).add(ne(n, l + 40)), o = Pe(o.add(a[0]), 33).mul(Pr), i = Hc(n, l, i[1].mul(Pr), s.add(a[0])), a = Hc(n, l + 32, o.add(a[1]), r.add(ne(n, l + 16))), [o, s] = [s, o], l += 64;
  while (l !== c);
  const h = Pr.add(o.and(255).shl(1));
  return l = u, a[0] = a[0].add(t - 1 & 63), i[0] = i[0].add(a[0]), a[0] = a[0].add(i[0]), s = Pe(s.add(r).add(i[0]).add(ne(n, l + 8)), 37).mul(h), r = Pe(r.add(i[1]).add(ne(n, l + 48)), 42).mul(h), s = s.xor(a[1].mul(9)), r = r.add(i[0].mul(9).add(ne(n, l + 40))), o = Pe(o.add(a[0]), 33).mul(h), i = Hc(n, l, i[1].mul(h), s.add(a[0])), a = Hc(n, l + 32, o.add(a[1]), r.add(ne(n, l + 16))), [o, s] = [s, o], mr(mr(i[0], a[0], h).add(df(r).mul(y1)).add(o), mr(i[1], a[1], h).add(s), h);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vs(n, t) {
  return t === "string" ? Kn(n) : sr([n], t);
}
function Y2(n, t) {
  return n instanceof Float32Array && t === "float32" || n instanceof Int32Array && t === "int32" || n instanceof Uint8Array && t === "bool";
}
function sr(n, t) {
  if (t === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = Hs(n)), K().getBool("DEBUG") && s1(n, t), Y2(n, t))
    return n;
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool") {
    const e = new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      Math.round(n[s]) !== 0 && (e[s] = 1);
    return e;
  } else
    throw new Error(`Unknown data type ${t}`);
}
function Ze() {
  return K().platform.now();
}
function x1(n, t) {
  return K().platform.fetch(n, t);
}
function Kn(n, t = "utf-8") {
  return t = t || "utf-8", K().platform.encode(n, t);
}
function Us(n, t = "utf-8") {
  return t = t || "utf-8", K().platform.decode(n, t);
}
const j2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createScalarValue: Vs,
  toTypedArray: sr,
  now: Ze,
  fetch: x1,
  encodeString: Kn,
  decodeString: Us,
  shuffle: om,
  shuffleCombo: C2,
  clamp: wr,
  nearestLargerEven: qu,
  swap: kn,
  sum: n1,
  randUniform: k2,
  distSquared: N2,
  assert: k,
  assertShapesMatch: Ye,
  assertNonNull: fo,
  flatten: Hs,
  sizeFromShape: H,
  isScalarShape: T2,
  arraysEqual: Vt,
  isInt: to,
  tanh: $2,
  sizeToSquarishShape: yu,
  createShuffledIndices: R2,
  rightPad: Yr,
  repeatedTry: lf,
  inferFromImplicitShape: im,
  parseAxisParam: At,
  squeezeShape: nr,
  getTypedArrayFromDType: ue,
  getArrayFromDType: Bt,
  checkConversionForErrors: s1,
  isValidDtype: r1,
  hasEncodingLoss: am,
  isTypedArray: Be,
  bytesPerElement: bu,
  bytesFromStringArray: o1,
  isString: Ls,
  isBoolean: i1,
  isNumber: xu,
  inferDtype: ei,
  isFunction: Ir,
  nearestDivisor: wu,
  computeStrides: xt,
  toNestedArray: _n,
  makeOnesTypedArray: th,
  makeZerosTypedArray: Ie,
  makeZerosNestedTypedArray: lm,
  assertNonNegativeIntegerDimensions: cm,
  locToIndex: Rn,
  indexToLoc: Ws,
  isPromise: Sr,
  hexToLong: rc,
  fingerPrint64: fm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J2 {
  constructor(t, e) {
    this.backendTimer = t, this.logger = e, e == null && (this.logger = new q2());
  }
  profileKernel(t, e, s) {
    let r;
    const o = () => {
      r = s();
    };
    let i;
    const a = Ze();
    if (this.backendTimer.timerAvailable())
      i = this.backendTimer.time(o);
    else {
      o();
      for (const c of r)
        c.dataSync();
      i = Promise.resolve({ kernelMs: Ze() - a });
    }
    if (K().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let c = 0; c < r.length; c++) {
        const u = r[c];
        u.data().then((h) => {
          Q2(h, u.dtype, t);
        });
      }
    return {
      kernelName: t,
      outputs: r,
      inputs: e,
      timeMs: i.then((c) => c.kernelMs),
      extraInfo: i.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(t) {
    const { kernelName: e, outputs: s, timeMs: r, inputs: o, extraInfo: i } = t;
    s.forEach((a) => {
      Promise.all([a.data(), r, i]).then((l) => {
        this.logger.logKernelProfile(e, a, l[0], l[1], o, l[2]);
      });
    });
  }
}
function Q2(n, t, e) {
  if (t !== "float32")
    return !1;
  for (let s = 0; s < n.length; s++) {
    const r = n[s];
    if (isNaN(r) || !isFinite(r))
      return console.warn(`Found ${r} in the result of '${e}'`), !0;
  }
  return !1;
}
class q2 {
  logKernelProfile(t, e, s, r, o, i) {
    const a = typeof r == "number" ? Yr(`${r}ms`, 9) : r.error, l = Yr(t, 25), c = e.rank, u = e.size, h = Yr(e.shape.toString(), 14);
    let d = "";
    for (const p in o) {
      const f = o[p];
      if (f != null) {
        const m = f.shape || e.shape, g = m.length;
        d += `${p}: ${g}D ${g > 0 ? m : ""} `;
      }
    }
    console.log(`%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${i}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tC(n, t, e) {
  const s = {}, r = {};
  for (let l = 0; l < t.length; l++)
    s[t[l].id] = !0;
  for (let l = 0; l < n.length; l++) {
    const c = n[l], u = c.inputs;
    for (const h in u) {
      const d = u[h];
      let p = !1;
      for (let f = 0; f < t.length; f++)
        if (s[d.id]) {
          c.outputs.forEach((m) => s[m.id] = !0), p = !0, r[c.id] = !0;
          break;
        }
      if (p)
        break;
    }
  }
  const o = {};
  o[e.id] = !0;
  const i = {};
  for (let l = n.length - 1; l >= 0; l--) {
    const c = n[l], u = c.inputs;
    for (let h = 0; h < c.outputs.length; h++)
      if (o[c.outputs[h].id]) {
        for (const d in u)
          o[u[d].id] = !0, i[c.id] = !0;
        break;
      }
  }
  const a = [];
  for (let l = 0; l < n.length; l++) {
    const c = n[l];
    if (r[c.id] && i[c.id]) {
      const u = {};
      for (const d in c.inputs) {
        const p = c.inputs[d];
        s[p.id] && (u[d] = p);
      }
      const h = Object.assign({}, c);
      h.inputs = u, h.outputs = c.outputs, a.push(h);
    }
  }
  return a;
}
function eC(n, t, e, s) {
  for (let r = t.length - 1; r >= 0; r--) {
    const o = t[r], i = [];
    if (o.outputs.forEach((l) => {
      const c = n[l.id];
      c != null ? i.push(c) : i.push(null);
    }), o.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);
    const a = o.gradient(i);
    for (const l in o.inputs) {
      if (!(l in a))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);
      const c = e(() => a[l]());
      if (c.dtype !== "float32")
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
      const u = o.inputs[l];
      if (!Vt(c.shape, u.shape))
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
      if (n[u.id] == null)
        n[u.id] = c;
      else {
        const h = n[u.id];
        n[u.id] = s(h, c), h.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y0 = 20, va = 3, Rp = 7;
function nC(n, t, e, s) {
  const r = xt(t), o = sC(n, t, e, r), i = t.length, a = pu(n, t, e, r, o), l = ["Tensor"];
  return s && (l.push(`  dtype: ${e}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(a.map((c) => "    " + c).join(`
`)), l.join(`
`);
}
function sC(n, t, e, s) {
  const r = H(t), o = s[s.length - 1], i = new Array(o).fill(0), a = t.length, l = e === "complex64" ? Ea(n) : n;
  if (a > 1)
    for (let c = 0; c < r / o; c++) {
      const u = c * o;
      for (let h = 0; h < o; h++)
        i[h] = Math.max(i[h], Ra(l[u + h], 0, e).length);
    }
  return i;
}
function Ra(n, t, e) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Rp))} + ${parseFloat(n[1].toFixed(Rp))}j` : Ls(n) ? s = `'${n}'` : e === "bool" ? s = w1(n) : s = parseFloat(n.toFixed(Rp)).toString(), Yr(s, t);
}
function w1(n) {
  return n === 0 ? "false" : "true";
}
function pu(n, t, e, s, r, o = !0) {
  const i = e === "complex64" ? 2 : 1, a = t[0], l = t.length;
  if (l === 0) {
    if (e === "complex64") {
      const m = Ea(n);
      return [Ra(m[0], 0, e)];
    }
    return e === "bool" ? [w1(n[0])] : [n[0].toString()];
  }
  if (l === 1) {
    if (a > y0) {
      const g = va * i;
      let y = Array.from(n.slice(0, g)), b = Array.from(n.slice((a - va) * i, a * i));
      return e === "complex64" && (y = Ea(y), b = Ea(b)), [
        "[" + y.map((w, x) => Ra(w, r[x], e)).join(", ") + ", ..., " + b.map((w, x) => Ra(w, r[a - va + x], e)).join(", ") + "]"
      ];
    }
    return [
      "[" + (e === "complex64" ? Ea(n) : Array.from(n)).map((g, y) => Ra(g, r[y], e)).join(", ") + "]"
    ];
  }
  const c = t.slice(1), u = s.slice(1), h = s[0] * i, d = [];
  if (a > y0) {
    for (let m = 0; m < va; m++) {
      const g = m * h, y = g + h;
      d.push(...pu(n.slice(g, y), c, e, u, r, !1));
    }
    d.push("...");
    for (let m = a - va; m < a; m++) {
      const g = m * h, y = g + h;
      d.push(...pu(n.slice(g, y), c, e, u, r, m === a - 1));
    }
  } else
    for (let m = 0; m < a; m++) {
      const g = m * h, y = g + h;
      d.push(...pu(n.slice(g, y), c, e, u, r, m === a - 1));
    }
  const p = l === 2 ? "," : "";
  d[0] = "[" + d[0] + p;
  for (let m = 1; m < d.length - 1; m++)
    d[m] = " " + d[m] + p;
  let f = `,
`;
  for (let m = 2; m < l; m++)
    f += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (o ? "" : f), d;
}
function Ea(n) {
  const t = [];
  for (let e = 0; e < n.length; e += 2)
    t.push([n[e], n[e + 1]]);
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ve {
  constructor(t, e, s) {
    if (this.dtype = e, this.shape = t.slice(), this.size = H(t), s != null) {
      const r = s.length;
      k(r === this.size, () => `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (e === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || Bt(e, this.size), this.strides = xt(t);
  }
  set(t, ...e) {
    e.length === 0 && (e = [0]), k(e.length === this.rank, () => `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(e);
    this.values[s] = t;
  }
  get(...t) {
    t.length === 0 && (t = [0]);
    let e = 0;
    for (const r of t) {
      if (r < 0 || r >= this.shape[e]) {
        const o = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
        throw new Error(o);
      }
      e++;
    }
    let s = t[t.length - 1];
    for (let r = 0; r < t.length - 1; ++r)
      s += this.strides[r] * t[r];
    return this.values[s];
  }
  locToIndex(t) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return t[0];
    let e = t[t.length - 1];
    for (let s = 0; s < t.length - 1; ++s)
      e += this.strides[s] * t[s];
    return e;
  }
  indexToLoc(t) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [t];
    const e = new Array(this.shape.length);
    for (let s = 0; s < e.length - 1; ++s)
      e[s] = Math.floor(t / this.strides[s]), t -= e[s] * this.strides[s];
    return e[e.length - 1] = t, e;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return ps().makeTensor(this.values, this.shape, this.dtype);
  }
}
let ps = null, Do = null;
function rC(n) {
  ps = n;
}
function oC(n) {
  Do = n;
}
class Kt {
  constructor(t, e, s, r) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || "float32", this.size = H(t), this.strides = xt(t), this.dataId = s, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    const t = await this.data();
    return Do.buffer(this.shape, this.dtype, t);
  }
  bufferSync() {
    return Do.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    const t = await this.data();
    return _n(this.shape, t, this.dtype === "complex64");
  }
  arraySync() {
    return _n(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    const t = ps().read(this.dataId);
    if (this.dtype === "string") {
      const e = await t;
      try {
        return e.map((s) => Us(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return t;
  }
  dataToGPU(t) {
    return this.throwIfDisposed(), ps().readToGPU(this.dataId, t);
  }
  dataSync() {
    this.throwIfDisposed();
    const t = ps().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return t.map((e) => Us(e));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return t;
  }
  async bytes() {
    this.throwIfDisposed();
    const t = await ps().read(this.dataId);
    return this.dtype === "string" ? t : new Uint8Array(t.buffer);
  }
  dispose() {
    this.isDisposed || (ps().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(t = !1) {
    return Do.print(this, t);
  }
  clone() {
    return this.throwIfDisposed(), Do.clone(this);
  }
  toString(t = !1) {
    const e = this.dataSync();
    return nC(e, this.shape, this.dtype, t);
  }
  cast(t) {
    return this.throwIfDisposed(), Do.cast(this, t);
  }
  variable(t = !0, e, s) {
    return this.throwIfDisposed(), ps().makeVariable(this, t, e, s);
  }
}
Object.defineProperty(Kt, Symbol.hasInstance, {
  value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null
});
function q() {
  return hm("Tensor", () => Kt);
}
q();
class _a extends Kt {
  constructor(t, e, s, r) {
    super(t.shape, t.dtype, t.dataId, r), this.trainable = e, this.name = s;
  }
  assign(t) {
    if (t.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);
    if (!Vt(t.shape, this.shape))
      throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);
    ps().disposeTensor(this), this.dataId = t.dataId, ps().incRef(this, null);
  }
  dispose() {
    ps().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(_a, Symbol.hasInstance, {
  value: (n) => n instanceof Kt && n.assign != null && n.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var pf;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(pf || (pf = {}));
var ff;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(ff || (ff = {}));
var mf;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(mf || (mf = {}));
var gf;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(gf || (gf = {}));
var yf;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})(yf || (yf = {}));
const iC = {
  float32: gf,
  int32: ff,
  bool: mf,
  complex64: yf
};
function ln(n, t) {
  if (n === "string" || t === "string") {
    if (n === "string" && t === "string")
      return "string";
    throw new Error(`Can not upcast ${n} with ${t}`);
  }
  return iC[n][t];
}
function sd(n) {
  return ln(n, "int32");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xe(n, t) {
  if (n.dtype === t.dtype)
    return [n, t];
  const e = ln(n.dtype, t.dtype);
  return [n.cast(e), t.cast(e)];
}
function I1(n, t) {
  k(n.dtype === t.dtype, () => `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`);
}
function rd(n, t) {
  return t.some((e) => e.id === n.id);
}
function Ys(n) {
  const t = [];
  return S1(n, t, /* @__PURE__ */ new Set()), t;
}
function S1(n, t, e) {
  if (n == null)
    return;
  if (n instanceof Kt) {
    t.push(n);
    return;
  }
  if (!aC(n))
    return;
  const s = n;
  for (const r in s) {
    const o = s[r];
    e.has(o) || (e.add(o), S1(o, t, e));
  }
}
function aC(n) {
  return Array.isArray(n) || typeof n == "object";
}
const lC = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  makeTypesMatch: xe,
  assertTypesMatch: I1,
  isTensorInList: rd,
  getTensorsInContainer: Ys
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ep(n) {
  return n.kernelName != null;
}
class b0 {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((t) => t.name)));
      }
    };
  }
  dispose() {
    for (const t in this.registeredVariables)
      this.registeredVariables[t].dispose();
  }
}
class Po {
  constructor(t) {
    this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new b0();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: t, asyncInit: e } = this.initializeBackendsAndReturnBest();
      if (e)
        throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t) {
    if (!(t in this.registry))
      if (t in this.registryFactory) {
        const { asyncInit: e } = this.initializeBackend(t);
        if (e)
          return null;
      } else
        return null;
    return this.registry[t];
  }
  findBackendFactory(t) {
    return t in this.registryFactory ? this.registryFactory[t].factory : null;
  }
  registerBackend(t, e, s = 1) {
    return t in this.registryFactory ? (Vn(`${t} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[t] = { factory: e, priority: s }, !0);
  }
  async setBackend(t) {
    if (this.registryFactory[t] == null)
      throw new Error(`Backend name '${t}' not found in registry`);
    if (this.backendName = t, this.registry[t] == null) {
      this.backendInstance = null;
      const { success: e, asyncInit: s } = this.initializeBackend(t);
      if (!(s ? await e : e))
        return !1;
    }
    return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new J2(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    ku(this.backendName).forEach((e) => {
      e.setupFunc != null && e.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t) {
    ku(t).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[t]);
    });
  }
  initializeBackend(t) {
    const e = this.registryFactory[t];
    if (e == null)
      throw new Error(`Cannot initialize backend ${t}, no registration found.`);
    try {
      const s = e.factory();
      if (s && !(s instanceof Qu) && typeof s.then == "function") {
        const r = ++this.pendingBackendInitId, o = s.then((i) => r < this.pendingBackendInitId ? !1 : (this.registry[t] = i, this.pendingBackendInit = null, !0)).catch((i) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, Vn(`Initialization of backend ${t} failed`), Vn(i.stack || i.message)), !1));
        return this.pendingBackendInit = o, { success: o, asyncInit: !0 };
      } else
        return this.registry[t] = s, { success: !0, asyncInit: !1 };
    } catch (s) {
      return Vn(`Initialization of backend ${t} failed`), Vn(s.stack || s.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(t) {
    if (!(t in this.registryFactory))
      throw new Error(`${t} backend not found in registry`);
    this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t, e) => this.registryFactory[e].priority - this.registryFactory[t].priority);
  }
  initializeBackendsAndReturnBest() {
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e], { success: r, asyncInit: o } = this.initializeBackend(s);
      if (o || r)
        return { name: s, asyncInit: o };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t, e) {
    const s = this.state.tensorInfo.get(e), r = s.backend, o = this.readSync(e), i = r.refCount(e);
    r.disposeData(e, !0), s.backend = t, t.move(e, o, s.shape, s.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t, e) {
    let s = null;
    if (e == null) {
      if (typeof t != "function")
        throw new Error("Please provide a function to tidy()");
      e = t;
    } else {
      if (typeof t != "string" && !(t instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof e != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = t;
    }
    let r;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(r), () => (r = e(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
  }
  scopedRun(t, e, s) {
    t();
    try {
      const r = s();
      return e(), r;
    } catch (r) {
      throw e(), r;
    }
  }
  nextTensorId() {
    return Po.nextTensorId++;
  }
  nextVariableId() {
    return Po.nextVariableId++;
  }
  clone(t) {
    const e = D.runKernel(Si, { x: t }), s = { x: t }, r = (i) => ({
      x: () => {
        const a = "float32", l = { x: i }, c = { dtype: a };
        return D.runKernel(
          ci,
          l,
          c
        );
      }
    }), o = [];
    return this.addTapeNode(this.state.activeScope.name, s, [e], r, o, {}), e;
  }
  runKernel(t, e, s) {
    if (this.backendName == null && this.backend, !(Cu(t, this.backendName) != null))
      throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t, e, s) {
    const r = this.backend.numDataIds();
    let o = 0;
    s.forEach((l) => {
      o += l.dtype === "complex64" ? 3 : 1;
    });
    const i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], a = r - e - o - i;
    if (a > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`);
  }
  runKernelFunc(t) {
    let e, s = [];
    const r = this.isTapeOn(), o = this.state.numBytes, i = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let a;
    this.backendName == null && this.backend;
    let l;
    const c = Ep(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Ep(t)) {
      const { kernelName: f, inputs: m, attrs: g } = t;
      this.backendName == null && this.backend;
      const y = Cu(f, this.backendName);
      k(y != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), a = () => {
        const b = this.backend.numDataIds();
        l = y.kernelFunc({ inputs: m, attrs: g, backend: this.backend });
        const w = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, w);
        const x = w.map((S) => S.rank != null ? S : this.makeTensorFromTensorInfo(S));
        if (r) {
          const S = this.getTensorsForGradient(f, m, x);
          s = this.saveTensorsForBackwardMode(S);
        }
        return x;
      };
    } else {
      const { forwardFunc: f } = t, m = (g) => {
        !r || (s = g.map((y) => this.keep(this.clone(y))));
      };
      a = () => {
        const g = this.backend.numDataIds();
        l = this.tidy(() => f(this.backend, m));
        const y = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, y), y;
      };
    }
    const { inputs: u, attrs: h } = t, d = Ep(t) ? null : t.backwardsFunc;
    let p;
    return this.scopedRun(
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? e = a() : (p = this.profiler.profileKernel(c, u, () => a()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), e = p.outputs);
      }
    ), r && this.addTapeNode(c, u, e, d, s, h), this.state.profiling && this.state.activeProfile.kernels.push({
      name: c,
      bytesAdded: this.state.numBytes - o,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - i,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
      outputShapes: e.map((f) => f.shape),
      kernelTimeMs: p.timeMs,
      extraInfo: p.extraInfo
    }), Array.isArray(l) ? e : e[0];
  }
  saveTensorsForBackwardMode(t) {
    return t.map((s) => this.keep(this.clone(s)));
  }
  getTensorsForGradient(t, e, s) {
    const r = cf(t);
    if (r != null) {
      const o = r.inputsToSave || [], i = r.outputsToSave || [];
      let a;
      r.saveAllInputs ? (k(Array.isArray(e), () => "saveAllInputs is true, expected inputs to be an array."), a = Object.keys(e).map((c) => e[c])) : a = o.map((c) => e[c]);
      const l = s.filter((c, u) => i[u]);
      return a.concat(l);
    }
    return [];
  }
  makeTensor(t, e, s, r) {
    if (t == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", r = r || this.backend;
    let o = t;
    s === "string" && Ls(t[0]) && (o = t.map((l) => Kn(l)));
    const i = r.write(o, e, s), a = new Kt(e, s, i, this.nextTensorId());
    if (this.trackTensor(a, r), s === "string") {
      const l = this.state.tensorInfo.get(i), c = o1(o);
      this.state.numBytes += c - l.bytes, l.bytes = c;
    }
    return a;
  }
  makeTensorFromDataId(t, e, s, r) {
    s = s || "float32";
    const o = { dataId: t, shape: e, dtype: s };
    return this.makeTensorFromTensorInfo(o, r);
  }
  makeTensorFromTensorInfo(t, e) {
    const { dataId: s, shape: r, dtype: o } = t, i = new Kt(r, o, s, this.nextTensorId());
    return this.trackTensor(i, e), i;
  }
  makeVariable(t, e = !0, s, r) {
    s = s || this.nextVariableId().toString(), r != null && r !== t.dtype && (t = t.cast(r));
    const o = new _a(t, e, s, this.nextTensorId());
    if (this.state.registeredVariables[o.name] != null)
      throw new Error(`Variable with name ${o.name} was already registered`);
    return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;
  }
  trackTensor(t, e) {
    this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    t.dtype !== "complex64" && t.dtype !== "string" && (s = t.size * bu(t.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, {
      backend: e || this.backend,
      dtype: t.dtype,
      shape: t.shape,
      bytes: s
    })), t instanceof _a || this.track(t);
  }
  incRef(t, e) {
    this.trackTensor(t, e), this.backend.incRef(t.dataId);
  }
  removeDataId(t, e) {
    this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === e && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
  }
  disposeTensor(t) {
    if (!this.state.tensorInfo.has(t.dataId))
      return;
    const e = this.state.tensorInfo.get(t.dataId);
    if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= e.bytes), t.dtype !== "complex64" && t.dtype !== "string") {
      const s = t.size * bu(t.dtype);
      this.state.numBytes -= s;
    }
    e.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, e.backend);
  }
  disposeVariables() {
    for (const t in this.state.registeredVariables) {
      const e = this.state.registeredVariables[t];
      this.disposeVariable(e);
    }
  }
  disposeVariable(t) {
    this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name];
  }
  memory() {
    const t = this.backend.memory();
    return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t;
  }
  async profile(t) {
    this.state.profiling = !0;
    const e = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const r of this.state.activeProfile.kernels)
      r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t, e, s, r, o, i) {
    const a = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: e, outputs: s, saved: o }, l = cf(t);
    l != null && (r = l.gradFunc), r != null && (a.gradient = (c) => (c = c.map((u, h) => {
      if (u == null) {
        const d = s[h], p = Ie(d.size, d.dtype);
        return this.makeTensor(p, d.shape, d.dtype);
      }
      return u;
    }), r(c.length > 1 ? c : c[0], o, i))), this.state.activeTape.push(a);
  }
  keep(t) {
    return t.kept = !0, t;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(t) {
    const e = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;
  }
  endScope(t) {
    const e = Ys(t), s = new Set(e.map((o) => o.id));
    for (let o = 0; o < this.state.activeScope.track.length; o++) {
      const i = this.state.activeScope.track[o];
      !i.kept && !s.has(i.id) && i.dispose();
    }
    const r = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], e.forEach((o) => {
      !o.kept && o.scopeId === r.id && this.track(o);
    });
  }
  gradients(t, e, s, r = !1) {
    if (k(e.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const o = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t));
    k(o instanceof Kt, () => "The result y returned by f() must be a tensor.");
    const i = tC(this.state.activeTape, e, o);
    if (!r && i.length === 0 && e.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const a = {};
      a[o.id] = s == null ? cC(o.shape) : s, eC(
        a,
        i,
        (c) => this.tidy(c),
        uC
      );
      const l = e.map((c) => a[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const u of c.saved)
          u.dispose();
      }), this.state.activeTape = null), { value: o, grads: l };
    });
  }
  customGrad(t) {
    return k(Ir(t), () => "The f passed in customGrad(f) must be a function."), (...e) => {
      k(e.every((a) => a instanceof Kt), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const r = {};
      e.forEach((a, l) => {
        r[l] = a;
      });
      const o = (a, l) => (s = t(...e, l), k(s.value instanceof Kt, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), k(Ir(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), i = (a, l) => {
        const c = s.gradFunc(a, l), u = Array.isArray(c) ? c : [c];
        k(u.length === e.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), k(u.every((d) => d instanceof Kt), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const h = {};
        return u.forEach((d, p) => {
          h[p] = () => d;
        }), h;
      };
      return this.runKernelFunc({
        forwardFunc: o,
        backwardsFunc: i,
        inputs: r
      });
    };
  }
  readSync(t) {
    return this.state.tensorInfo.get(t).backend.readSync(t);
  }
  read(t) {
    return this.state.tensorInfo.get(t).backend.read(t);
  }
  readToGPU(t, e) {
    return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
  }
  async time(t) {
    const e = Ze(), s = await this.backend.time(t);
    return s.wallMs = Ze() - e, s;
  }
  track(t) {
    return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new b0();
    for (const t in this.registry)
      this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
Po.nextTensorId = 0;
Po.nextVariableId = 0;
function cC(n) {
  const t = th(H(n), "float32");
  return D.makeTensor(t, n, "float32");
}
function v1() {
  const n = c1();
  if (n._tfengine == null) {
    const t = new l1(n);
    n._tfengine = new Po(t);
  }
  return G2(n._tfengine.ENV), rC(() => n._tfengine), n._tfengine;
}
const D = v1();
function uC(n, t) {
  const e = { a: n, b: t };
  return D.runKernel(mo, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hC() {
  return typeof navigator < "u" && navigator != null;
}
let bf;
function dC(n) {
  bf = n;
}
function mm(n) {
  if (bf !== void 0)
    return bf;
  if (n || hC()) {
    if (n || (n = navigator), n.product === "ReactNative")
      return !0;
    const t = n.userAgent || n.vendor || (typeof window < "u" ? window.opera : "");
    if (!t) {
      const e = n;
      return e.userAgentData && e.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return !1;
}
function gm() {
  return typeof window < "u" && window.document != null || typeof WorkerGlobalScope < "u";
}
const pC = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  mockIsMobile: dC,
  isMobile: mm,
  isBrowser: gm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const En = K();
En.registerFlag("DEBUG", () => !1, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
En.registerFlag("IS_BROWSER", () => gm());
En.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
En.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
En.registerFlag("PROD", () => !1);
En.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => En.getBool("DEBUG"));
En.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
En.registerFlag("IS_TEST", () => !1);
En.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => !0);
En.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
En.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
En.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
En.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Os(n, t) {
  let e = n;
  if (Be(n))
    return t === "string" ? [] : [n.length];
  if (!Array.isArray(n))
    return [];
  const s = [];
  for (; Array.isArray(e) || Be(e) && t !== "string"; )
    s.push(e.length), e = e[0];
  return Array.isArray(n) && K().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && C1(n, s, []), s;
}
function C1(n, t, e) {
  if (e = e || [], !Array.isArray(n) && !Be(n)) {
    k(t.length === 0, () => `Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  k(t.length > 0, () => `Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`), k(n.length === t[0], () => `Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);
  const s = t.slice(1);
  for (let r = 0; r < n.length; ++r)
    C1(n[r], s, e.concat(r));
}
function x0(n, t, e, s) {
  if (n !== "string_or_numeric") {
    if (n == null)
      throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== t || n === "numeric" && t === "string")
      throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`);
  }
}
function N(n, t, e, s = "numeric") {
  if (n instanceof Kt)
    return x0(s, n.dtype, t, e), n;
  let r = ei(n);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (r = s), x0(s, r, t, e), n == null || !Be(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const l = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const o = Os(n, r);
  !Be(n) && !Array.isArray(n) && (n = [n]);
  const a = r !== "string" ? sr(n, r) : Hs(n, [], !0);
  return D.makeTensor(a, o, r);
}
function Ka(n, t, e, s = "numeric") {
  if (!Array.isArray(n))
    throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((o, i) => N(o, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ym = "__op";
function G(n) {
  const t = Object.keys(n);
  if (t.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let e = t[0];
  const s = n[e];
  e.endsWith("_") && (e = e.substring(0, e.length - 1)), e = e + ym;
  const r = (...o) => {
    D.startScope(e);
    try {
      const i = s(...o);
      return Sr(i) && console.error("Cannot return a Promise inside of tidy."), D.endScope(i), i;
    } catch (i) {
      throw D.endScope(null), i;
    }
  };
  return Object.defineProperty(r, "name", { value: e, configurable: !0 }), r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fC(n, t) {
  const e = N(n, "real", "complex"), s = N(t, "imag", "complex");
  Ye(e.shape, s.shape, `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`);
  const r = { real: e, imag: s };
  return D.runKernel(ah, r);
}
const js = G({ complex_: fC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Er(n, t, e, s) {
  if (s == null && (s = ei(n)), s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!Be(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    cm(t);
    const r = H(t), o = H(e);
    k(r === o, () => `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);
    for (let i = 0; i < e.length; ++i) {
      const a = e[i], l = i === e.length - 1 ? a !== H(t.slice(i)) : !0;
      k(e[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `);
    }
  }
  return !Be(n) && !Array.isArray(n) && (n = [n]), t = t || e, n = s !== "string" ? sr(n, s) : Hs(n, [], !0), D.makeTensor(n, t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ge(n, t, e) {
  const s = Os(n, e);
  return Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xf = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tu = 4;
async function wf(n, t) {
  const e = [], s = [], r = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
  for (let i = 0; i < r.length; ++i) {
    const a = r[i], l = Array.isArray(n) ? n[i].tensor : n[a];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
    const c = { name: a, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const u = new Promise(async (h) => {
        const d = await l.bytes(), p = d.reduce((g, y) => g + y.length, 0) + Tu * d.length, f = new Uint8Array(p);
        let m = 0;
        for (let g = 0; g < d.length; g++) {
          const y = d[g], b = new Uint8Array(new Uint32Array([y.length]).buffer);
          f.set(b, m), m += Tu, f.set(y, m), m += y.length;
        }
        h(f);
      });
      s.push(u);
    } else
      s.push(l.data());
    t != null && (c.group = t), e.push(c);
  }
  const o = await Promise.all(s);
  return { data: mC(o), specs: e };
}
function bm(n, t) {
  const e = {};
  let s, r = 0;
  for (const o of t) {
    const i = o.name, a = o.dtype, l = o.shape, c = H(l);
    let u;
    if ("quantization" in o) {
      const h = o.quantization;
      if (h.dtype === "uint8" || h.dtype === "uint16") {
        if (!("min" in h && "scale" in h))
          throw new Error(`Weight ${o.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (h.dtype === "float16") {
        if (a !== "float32")
          throw new Error(`Weight ${o.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${a}.`);
      } else
        throw new Error(`Weight ${o.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const d = xf[h.dtype], p = n.slice(r, r + c * d), f = h.dtype === "uint8" ? new Uint8Array(p) : new Uint16Array(p);
      if (a === "float32")
        if (h.dtype === "uint8" || h.dtype === "uint16") {
          u = new Float32Array(f.length);
          for (let m = 0; m < f.length; m++) {
            const g = f[m];
            u[m] = g * h.scale + h.min;
          }
        } else if (h.dtype === "float16")
          s === void 0 && (s = IC()), u = s(f);
        else
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);
      else if (a === "int32") {
        if (h.dtype !== "uint8" && h.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);
        u = new Int32Array(f.length);
        for (let m = 0; m < f.length; m++) {
          const g = f[m];
          u[m] = Math.round(g * h.scale + h.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      r += c * d;
    } else if (a === "string") {
      const h = H(o.shape);
      u = [];
      for (let d = 0; d < h; d++) {
        const p = new Uint32Array(n.slice(r, r + Tu))[0];
        r += Tu;
        const f = new Uint8Array(n.slice(r, r + p));
        u.push(f), r += p;
      }
    } else {
      const h = xf[a], d = n.slice(r, r + c * h);
      if (a === "float32")
        u = new Float32Array(d);
      else if (a === "int32")
        u = new Int32Array(d);
      else if (a === "bool")
        u = new Uint8Array(d);
      else if (a === "complex64") {
        u = new Float32Array(d);
        const p = new Float32Array(u.length / 2), f = new Float32Array(u.length / 2);
        for (let y = 0; y < p.length; y++)
          p[y] = u[y * 2], f[y] = u[y * 2 + 1];
        const m = ge(p, l, "float32"), g = ge(f, l, "float32");
        e[i] = js(m, g), m.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      r += c * h;
    }
    a !== "complex64" && (e[i] = ge(u, l, a));
  }
  return e;
}
function mC(n) {
  if (n === null)
    throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let t = 0;
  const e = [];
  n.forEach((o) => {
    if (t += o.byteLength, e.push(o.byteLength === o.buffer.byteLength ? o : new o.constructor(o)), !(o instanceof Float32Array || o instanceof Int32Array || o instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`);
  });
  const s = new Uint8Array(t);
  let r = 0;
  return e.forEach((o) => {
    s.set(new Uint8Array(o.buffer), r), r += o.byteLength;
  }), s.buffer;
}
const xm = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function w0(n) {
  return xm ? Buffer.byteLength(n) : new Blob([n]).size;
}
function gC(n) {
  if (xm)
    return Buffer.from(n).toString("base64");
  const t = new Uint8Array(n);
  let e = "";
  for (let s = 0, r = t.length; s < r; s++)
    e += String.fromCharCode(t[s]);
  return btoa(e);
}
function yC(n) {
  if (xm) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const t = atob(n), e = new Uint8Array(t.length);
  for (let s = 0; s < t.length; ++s)
    e.set([t.charCodeAt(s)], s);
  return e.buffer;
}
function od(n) {
  if (n.length === 1)
    return n[0];
  let t = 0;
  n.forEach((r) => {
    t += r.byteLength;
  });
  const e = new Uint8Array(t);
  let s = 0;
  return n.forEach((r) => {
    e.set(new Uint8Array(r), s), s += r.byteLength;
  }), e.buffer;
}
function I0(n) {
  const t = "/";
  for (n = n.trim(); n.endsWith(t); )
    n = n.slice(0, n.length - 1);
  const e = n.split(t);
  return e[e.length - 1];
}
function k1(n, t) {
  const e = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy,
    weightsManifest: t
  };
  return n.signature != null && (e.signature = n.signature), n.userDefinedMetadata != null && (e.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (e.modelInitializer = n.modelInitializer), n.trainingConfig != null && (e.trainingConfig = n.trainingConfig), e;
}
function wm(n, t, e) {
  const s = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy
  };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = t, s.weightData = e;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), s;
}
async function Im(n, t) {
  let e, s;
  return n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)), wm(n, e, s);
}
function oc(n) {
  if (n.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: n.modelTopology == null ? 0 : w0(JSON.stringify(n.modelTopology)),
    weightSpecsBytes: n.weightSpecs == null ? 0 : w0(JSON.stringify(n.weightSpecs)),
    weightDataBytes: n.weightData == null ? 0 : n.weightData.byteLength
  };
}
function Sm(n) {
  const t = [];
  for (const e of n)
    t.push(...e.weights);
  return t;
}
function bC() {
  const n = (e) => {
    let s = e << 13, r = 0;
    for (; (s & 8388608) === 0; )
      r -= 8388608, s <<= 1;
    return s &= -8388609, r += 947912704, s | r;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let e = 1; e < 1024; e++)
    t[e] = n(e);
  for (let e = 1024; e < 2048; e++)
    t[e] = 939524096 + (e - 1024 << 13);
  return t;
}
function xC() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let t = 1; t < 31; t++)
    n[t] = t << 23;
  for (let t = 33; t < 63; t++)
    n[t] = 2147483648 + (t - 32 << 23);
  return n;
}
function wC() {
  const n = new Uint32Array(64);
  for (let t = 0; t < 64; t++)
    n[t] = 1024;
  return n[0] = n[32] = 0, n;
}
function IC() {
  const n = bC(), t = xC(), e = wC();
  return (s) => {
    const r = new ArrayBuffer(4 * s.length), o = new Uint32Array(r);
    for (let i = 0; i < s.length; i++) {
      const a = s[i], l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
      o[i] = l;
    }
    return new Float32Array(r);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class me {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return me.instance == null && (me.instance = new me()), me.instance;
  }
  static registerSaveRouter(t) {
    me.getInstance().saveRouters.push(t);
  }
  static registerLoadRouter(t) {
    me.getInstance().loadRouters.push(t);
  }
  static getSaveHandlers(t) {
    return me.getHandlers(t, "save");
  }
  static getLoadHandlers(t, e) {
    return me.getHandlers(t, "load", e);
  }
  static getHandlers(t, e, s) {
    const r = [];
    return (e === "load" ? me.getInstance().loadRouters : me.getInstance().saveRouters).forEach((i) => {
      const a = i(t, s);
      a !== null && r.push(a);
    }), r;
  }
}
const SC = (n) => me.registerSaveRouter(n), vC = (n) => me.registerLoadRouter(n), N1 = (n) => me.getSaveHandlers(n), T1 = (n, t) => me.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const If = "tensorflowjs", Sf = 1, Br = "models_store", dr = "model_info_store";
function $1() {
  if (!K().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, t = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (t == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function vf(n) {
  const t = n.result;
  t.createObjectStore(Br, { keyPath: "modelPath" }), t.createObjectStore(dr, { keyPath: "modelPath" });
}
class eo {
  constructor(t) {
    if (this.indexedDB = $1(), t == null || !t)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t;
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, t);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(t, e) {
    return new Promise((s, r) => {
      const o = this.indexedDB.open(If, Sf);
      o.onupgradeneeded = () => vf(o), o.onsuccess = () => {
        const i = o.result;
        if (e == null) {
          const a = i.transaction(Br, "readonly"), c = a.objectStore(Br).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null)
              return i.close(), r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (u) => (i.close(), r(c.error)), a.oncomplete = () => i.close();
        } else {
          const a = oc(e), l = i.transaction(dr, "readwrite");
          let c = l.objectStore(dr);
          const u = c.put({ modelPath: this.modelPath, modelArtifactsInfo: a });
          let h;
          u.onsuccess = () => {
            h = i.transaction(Br, "readwrite");
            const p = h.objectStore(Br).put({
              modelPath: this.modelPath,
              modelArtifacts: e,
              modelArtifactsInfo: a
            });
            p.onsuccess = () => s({ modelArtifactsInfo: a }), p.onerror = (f) => {
              c = l.objectStore(dr);
              const m = c.delete(this.modelPath);
              m.onsuccess = () => (i.close(), r(p.error)), m.onerror = (g) => (i.close(), r(p.error));
            };
          }, u.onerror = (d) => (i.close(), r(u.error)), l.oncomplete = () => {
            h == null ? i.close() : h.oncomplete = () => i.close();
          };
        }
      }, o.onerror = (i) => r(o.error);
    });
  }
}
eo.URL_SCHEME = "indexeddb://";
const R1 = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(eo.URL_SCHEME) ? CC(n.slice(eo.URL_SCHEME.length)) : null;
me.registerSaveRouter(R1);
me.registerLoadRouter(R1);
function CC(n) {
  return new eo(n);
}
function kC(n) {
  return n.startsWith(eo.URL_SCHEME) ? n.slice(eo.URL_SCHEME.length) : n;
}
class NC {
  constructor() {
    this.indexedDB = $1();
  }
  async listModels() {
    return new Promise((t, e) => {
      const s = this.indexedDB.open(If, Sf);
      s.onupgradeneeded = () => vf(s), s.onsuccess = () => {
        const r = s.result, o = r.transaction(dr, "readonly"), a = o.objectStore(dr).getAll();
        a.onsuccess = () => {
          const l = {};
          for (const c of a.result)
            l[c.modelPath] = c.modelArtifactsInfo;
          t(l);
        }, a.onerror = (l) => (r.close(), e(a.error)), o.oncomplete = () => r.close();
      }, s.onerror = (r) => e(s.error);
    });
  }
  async removeModel(t) {
    return t = kC(t), new Promise((e, s) => {
      const r = this.indexedDB.open(If, Sf);
      r.onupgradeneeded = () => vf(r), r.onsuccess = () => {
        const o = r.result, i = o.transaction(dr, "readwrite"), a = i.objectStore(dr), l = a.get(t);
        let c;
        l.onsuccess = () => {
          if (l.result == null)
            return o.close(), s(new Error(`Cannot find model with path '${t}' in IndexedDB.`));
          {
            const u = a.delete(t), h = () => {
              c = o.transaction(Br, "readwrite");
              const p = c.objectStore(Br).delete(t);
              p.onsuccess = () => e(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
            };
            u.onsuccess = h, u.onerror = (d) => (h(), o.close(), s(l.error));
          }
        }, l.onerror = (u) => (o.close(), s(l.error)), i.oncomplete = () => {
          c == null ? o.close() : c.oncomplete = () => o.close();
        };
      }, r.onerror = (o) => s(r.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _s = "/", Go = "tensorflowjs_models", E1 = "info", TC = "model_topology", $C = "weight_specs", RC = "weight_data", EC = "model_metadata";
function L1(n) {
  return {
    info: [Go, n, E1].join(_s),
    topology: [Go, n, TC].join(_s),
    weightSpecs: [Go, n, $C].join(_s),
    weightData: [Go, n, RC].join(_s),
    modelMetadata: [Go, n, EC].join(_s)
  };
}
function D1(n) {
  for (const t of Object.values(n))
    window.localStorage.removeItem(t);
}
function LC(n) {
  const t = n.split(_s);
  if (t.length < 3)
    throw new Error(`Invalid key format: ${n}`);
  return t.slice(1, t.length - 1).join(_s);
}
function DC(n) {
  return n.startsWith(no.URL_SCHEME) ? n.slice(no.URL_SCHEME.length) : n;
}
class no {
  constructor(t) {
    if (!K().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, t == null || !t)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t, this.keys = L1(this.modelPath);
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const e = JSON.stringify(t.modelTopology), s = JSON.stringify(t.weightSpecs), r = oc(t);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, gC(t.weightData));
        const o = {
          format: t.format,
          generatedBy: t.generatedBy,
          convertedBy: t.convertedBy,
          signature: t.signature != null ? t.signature : void 0,
          userDefinedMetadata: t.userDefinedMetadata != null ? t.userDefinedMetadata : void 0,
          modelInitializer: t.modelInitializer != null ? t.modelInitializer : void 0,
          trainingConfig: t.trainingConfig != null ? t.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(o)), { modelArtifactsInfo: r };
      } catch {
        throw D1(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`);
      }
    }
  }
  async load() {
    const t = JSON.parse(this.LS.getItem(this.keys.info));
    if (t == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (t.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const e = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    e.modelTopology = s;
    const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (r == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    e.weightSpecs = r;
    const o = this.LS.getItem(this.keys.modelMetadata);
    if (o != null) {
      const a = JSON.parse(o);
      e.format = a.format, e.generatedBy = a.generatedBy, e.convertedBy = a.convertedBy, a.signature != null && (e.signature = a.signature), a.userDefinedMetadata != null && (e.userDefinedMetadata = a.userDefinedMetadata), a.modelInitializer != null && (e.modelInitializer = a.modelInitializer), a.trainingConfig != null && (e.trainingConfig = a.trainingConfig);
    }
    const i = this.LS.getItem(this.keys.weightData);
    if (i == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return e.weightData = yC(i), e;
  }
}
no.URL_SCHEME = "localstorage://";
const G1 = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(no.URL_SCHEME) ? GC(n.slice(no.URL_SCHEME.length)) : null;
me.registerSaveRouter(G1);
me.registerLoadRouter(G1);
function GC(n) {
  return new no(n);
}
class FC {
  constructor() {
    k(K().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), k(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const t = {}, e = Go + _s, s = _s + E1;
    for (let r = 0; r < this.LS.length; ++r) {
      const o = this.LS.key(r);
      if (o.startsWith(e) && o.endsWith(s)) {
        const i = LC(o);
        t[i] = JSON.parse(this.LS.getItem(o));
      }
    }
    return t;
  }
  async removeModel(t) {
    t = DC(t);
    const e = L1(t);
    if (this.LS.getItem(e.info) == null)
      throw new Error(`Cannot find model at path '${t}'`);
    const s = JSON.parse(this.LS.getItem(e.info));
    return D1(e), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Oo = "://";
class nn {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return nn.instance == null && (nn.instance = new nn()), nn.instance;
  }
  static registerManager(t, e) {
    k(t != null, () => "scheme must not be undefined or null."), t.endsWith(Oo) && (t = t.slice(0, t.indexOf(Oo))), k(t.length > 0, () => "scheme must not be an empty string.");
    const s = nn.getInstance();
    k(s.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), s.managers[t] = e;
  }
  static getManager(t) {
    const e = nn.getInstance().managers[t];
    if (e == null)
      throw new Error(`Cannot find model manager for scheme '${t}'`);
    return e;
  }
  static getSchemes() {
    return Object.keys(nn.getInstance().managers);
  }
}
function fu(n) {
  if (n.indexOf(Oo) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${nn.getSchemes().join(",")}`);
  return {
    scheme: n.split(Oo)[0],
    path: n.split(Oo)[1]
  };
}
async function F1(n, t, e = !1) {
  k(n !== t, () => `Old path and new path are the same: '${n}'`);
  const s = me.getLoadHandlers(n);
  k(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), k(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const r = s[0], o = me.getSaveHandlers(t);
  k(o.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), k(o.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);
  const i = o[0], a = fu(n).scheme, l = fu(n).path, c = a === fu(n).scheme, u = await r.load();
  e && c && await nn.getManager(a).removeModel(l);
  const h = await i.save(u);
  return e && !c && await nn.getManager(a).removeModel(l), h.modelArtifactsInfo;
}
async function OC() {
  const n = nn.getSchemes(), t = {};
  for (const e of n) {
    const s = await nn.getManager(e).listModels();
    for (const r in s) {
      const o = e + Oo + r;
      t[o] = s[r];
    }
  }
  return t;
}
async function AC(n) {
  const t = fu(n);
  return nn.getManager(t.scheme).removeModel(t.path);
}
async function zC(n, t) {
  return F1(n, t, !1);
}
async function WC(n, t) {
  return F1(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class VC {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(t, e) {
    return fetch(t, e);
  }
  now() {
    return performance.now();
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t);
  }
  decode(t, e) {
    return new TextDecoder(e).decode(t);
  }
  setTimeoutCustom(t, e) {
    if (!window || !K().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(t, e);
      return;
    }
    this.functionRefs.push(t), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, e), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const r = this.functionRefs[s.data.index];
        r(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
}
if (K().get("IS_BROWSER")) {
  K().setPlatform("browser", new VC());
  try {
    nn.registerManager(no.URL_SCHEME, new FC());
  } catch {
  }
  try {
    nn.registerManager(eo.URL_SCHEME, new NC());
  } catch {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PC = {
  importFetch: () => require("node-fetch")
};
let Lp;
class MC {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(t, e) {
    return K().global.fetch != null ? K().global.fetch(t, e) : (Lp == null && (Lp = PC.importFetch()), Lp(t, e));
  }
  now() {
    const t = process.hrtime();
    return t[0] * 1e3 + t[1] / 1e6;
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);
    return this.textEncoder.encode(t);
  }
  decode(t, e) {
    return t.length === 0 ? "" : new this.util.TextDecoder(e).decode(t);
  }
}
K().get("IS_NODE") && !K().get("IS_BROWSER") && K().setPlatform("node", new MC());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $t(n, t = "float32", e) {
  return t = t || "float32", cm(n), new ve(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XC(n, t) {
  const e = N(n, "x", "cast");
  if (!r1(t))
    throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && e.dtype !== "string" || t !== "string" && e.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const s = { x: e }, r = { dtype: t };
  return D.runKernel(ci, s, r);
}
const ut = G({ cast_: XC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _C(n) {
  const e = { x: N(n, "x", "clone", "string_or_numeric") };
  return D.runKernel(Si, e);
}
const Ds = G({ clone_: _C });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vm(n, t = !1) {
  console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
v1();
const KC = {
  buffer: $t,
  cast: ut,
  clone: Ds,
  print: vm
};
oC(KC);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZC = "model", BC = ".json", HC = ".weights.bin";
function S0(n) {
  return new Promise((t) => setTimeout(t)).then(n);
}
class so {
  constructor(t) {
    if (!K().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    t.startsWith(so.URL_SCHEME) && (t = t.slice(so.URL_SCHEME.length)), (t == null || t.length === 0) && (t = ZC), this.modelJsonFileName = t + BC, this.weightDataFileName = t + HC;
  }
  async save(t) {
    if (typeof document > "u")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    const e = window.URL.createObjectURL(new Blob([t.weightData], { type: "application/octet-stream" }));
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      const s = [{
        paths: ["./" + this.weightDataFileName],
        weights: t.weightSpecs
      }], r = k1(t, s), o = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: "application/json" })), i = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (i.download = this.modelJsonFileName, i.href = o, await S0(() => i.dispatchEvent(new MouseEvent("click"))), t.weightData != null) {
        const a = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        a.download = this.weightDataFileName, a.href = e, await S0(() => a.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: oc(t) };
    }
  }
}
so.URL_SCHEME = "downloads://";
class UC {
  constructor(t) {
    if (t == null || t.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);
    this.jsonFile = t[0], this.weightsFiles = t.slice(1);
  }
  async load() {
    return new Promise((t, e) => {
      const s = new FileReader();
      s.onload = (r) => {
        const o = JSON.parse(r.target.result), i = o.modelTopology;
        if (i == null) {
          e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (o.weightsManifest == null) {
          e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          t({ modelTopology: i });
          return;
        }
        const l = Im(o, (c) => this.loadWeights(c));
        t(l);
      }, s.onerror = (r) => e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), s.readAsText(this.jsonFile);
    });
  }
  loadWeights(t) {
    const e = [], s = [];
    for (const i of t)
      e.push(...i.weights), s.push(...i.paths);
    const r = this.checkManifestAndWeightFiles(t), o = s.map((i) => this.loadWeightsFile(i, r[i]));
    return Promise.all(o).then((i) => [e, od(i)]);
  }
  loadWeightsFile(t, e) {
    return new Promise((s, r) => {
      const o = new FileReader();
      o.onload = (i) => {
        const a = i.target.result;
        s(a);
      }, o.onerror = (i) => r(`Failed to weights data from file of path '${t}'.`), o.readAsArrayBuffer(e);
    });
  }
  checkManifestAndWeightFiles(t) {
    const e = [], s = this.weightsFiles.map((o) => I0(o.name)), r = {};
    for (const o of t)
      o.paths.forEach((i) => {
        const a = I0(i);
        if (e.indexOf(a) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);
        if (e.push(a), s.indexOf(a) === -1)
          throw new Error(`Weight file with basename '${a}' is not provided.`);
        r[i] = this.weightsFiles[s.indexOf(a)];
      });
    if (e.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return r;
  }
}
const YC = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(so.URL_SCHEME) ? jC(n.slice(so.URL_SCHEME.length)) : null;
me.registerSaveRouter(YC);
function jC(n = "model") {
  return new so(n);
}
function JC(n) {
  return new UC(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v0(n, t, e, s) {
  i(n), e = e == null ? 0 : e, s = s == null ? 1 : s, a(e, s);
  let r = 0;
  const o = (l) => (l.then((c) => {
    const u = e + ++r / n.length * (s - e);
    return t(u), c;
  }), l);
  function i(l) {
    k(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function a(l, c) {
    k(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), k(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), k(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
  }
  return Promise.all(n.map(o));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function O1(n, t) {
  t == null && (t = {});
  const e = t.fetchFunc == null ? K().platform.fetch : t.fetchFunc, s = n.map((h) => e(h, t.requestInit, { isBinary: !0 })), r = 0, o = 0.5, a = (t.onProgress == null ? await Promise.all(s) : await v0(s, t.onProgress, r, o)).map((h) => h.arrayBuffer()), l = 0.5, c = 1;
  return t.onProgress == null ? await Promise.all(a) : await v0(a, t.onProgress, l, c);
}
async function A1(n, t = "", e, s) {
  return z1((i) => O1(i, { requestInit: s }))(n, t, e);
}
function z1(n) {
  return async (t, e = "", s) => {
    const r = t.map(() => !1), o = {}, i = s != null ? s.map(() => !1) : [], a = [];
    if (t.forEach((p, f) => {
      let m = 0;
      p.weights.forEach((g) => {
        const y = "quantization" in g ? g.quantization.dtype : g.dtype, b = xf[y] * H(g.shape), w = () => {
          r[f] = !0, o[f] == null && (o[f] = []), o[f].push({
            manifestEntry: g,
            groupOffset: m,
            sizeBytes: b
          });
        };
        s != null ? s.forEach((x, S) => {
          x === g.name && (w(), i[S] = !0);
        }) : w(), a.push(g.name), m += b;
      });
    }), !i.every((p) => p)) {
      const p = s.filter((f, m) => !i[m]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
    }
    const l = r.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
    l.forEach((p) => {
      t[p].paths.forEach((f) => {
        const m = e + (e.endsWith("/") ? "" : "/") + f;
        c.push(m);
      });
    });
    const u = await n(c), h = {};
    let d = 0;
    return l.forEach((p) => {
      const f = t[p].paths.length;
      let m = 0;
      for (let x = 0; x < f; x++)
        m += u[d + x].byteLength;
      const g = new ArrayBuffer(m), y = new Uint8Array(g);
      let b = 0;
      for (let x = 0; x < f; x++) {
        const S = new Uint8Array(u[d + x]);
        y.set(S, b), b += S.byteLength;
      }
      o[p].forEach((x) => {
        const S = g.slice(x.groupOffset, x.groupOffset + x.sizeBytes), v = bm(S, [x.manifestEntry]);
        for (const T in v)
          h[T] = v[T];
      }), d += f;
    }), h;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QC = "application/octet-stream", qC = "application/json";
class Cm {
  constructor(t, e) {
    if (this.DEFAULT_METHOD = "POST", e == null && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, this.weightUrlConverter = e.weightUrlConverter, e.fetchFunc != null ? (k(typeof e.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = e.fetchFunc) : this.fetch = K().platform.fetch, k(t != null && t.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(t) && k(t.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${t.length}).`), this.path = t, e.requestInit != null && e.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e.requestInit || {};
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    e.body = new FormData();
    const s = [{
      paths: ["./model.weights.bin"],
      weights: t.weightSpecs
    }], r = k1(t, s);
    e.body.append("model.json", new Blob([JSON.stringify(r)], { type: qC }), "model.json"), t.weightData != null && e.body.append("model.weights.bin", new Blob([t.weightData], { type: QC }), "model.weights.bin");
    const o = await this.fetch(this.path, e);
    if (o.ok)
      return {
        modelArtifactsInfo: oc(t),
        responses: [o]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`);
  }
  async load() {
    const t = await this.fetch(this.path, this.requestInit);
    if (!t.ok)
      throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);
    let e;
    try {
      e = await t.json();
    } catch {
      let i = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? i += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : i += " Please make sure the server is serving valid JSON for this request.", new Error(i);
    }
    const s = e.modelTopology, r = e.weightsManifest;
    if (s == null && r == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return Im(e, (o) => this.loadWeights(o));
  }
  async loadWeights(t) {
    const e = Array.isArray(this.path) ? this.path[1] : this.path, [s, r] = tk(e), o = this.weightPathPrefix || s, i = Sm(t), a = [], l = [];
    for (const u of t)
      for (const h of u.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(h)) : a.push(o + h + r);
    this.weightUrlConverter && a.push(...await Promise.all(l));
    const c = await O1(a, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [i, od(c)];
  }
}
Cm.URL_SCHEME_REGEX = /^https?:\/\//;
function tk(n) {
  const t = n.lastIndexOf("/"), e = n.lastIndexOf("?"), s = n.substring(0, t), r = e > t ? n.substring(e) : "";
  return [s + "/", r];
}
function Cf(n) {
  return n.match(Cm.URL_SCHEME_REGEX) != null;
}
const W1 = (n, t) => {
  if (typeof fetch > "u" && (t == null || t.fetchFunc == null))
    return null;
  {
    let e = !0;
    if (Array.isArray(n) ? e = n.every((s) => Cf(s)) : e = Cf(n), e)
      return km(n, t);
  }
  return null;
};
me.registerSaveRouter(W1);
me.registerLoadRouter(W1);
function km(n, t) {
  return new Cm(n, t);
}
function V1(n, t) {
  return km(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dp {
  constructor(t) {
    this.modelArtifacts = t;
  }
  load() {
    return this.modelArtifacts;
  }
}
class P1 {
  constructor(t) {
    this.saveHandler = t;
  }
  save(t) {
    return this.saveHandler(t);
  }
}
class ek {
  constructor(t) {
    t.load && (this.load = () => Promise.resolve(t.load())), t.save && (this.save = (e) => Promise.resolve(t.save(e)));
  }
}
function nk(n, t, e, s) {
  const r = arguments;
  return new ek($u(...r));
}
function $u(n, t, e, s) {
  return arguments.length === 1 ? n.modelTopology != null || n.weightSpecs != null ? new Dp(n) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Dp({ modelTopology: n })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Dp({
    modelTopology: n,
    weightSpecs: t,
    weightData: e,
    trainingConfig: s
  }));
}
function sk(n) {
  return new P1(n);
}
function rk(n) {
  return new P1(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  browserFiles: JC,
  browserHTTPRequest: V1,
  concatenateArrayBuffers: od,
  decodeWeights: bm,
  encodeWeights: wf,
  fromMemory: nk,
  fromMemorySync: $u,
  getLoadHandlers: T1,
  getModelArtifactsForJSON: Im,
  getModelArtifactsForJSONSync: wm,
  getModelArtifactsInfoForJSON: oc,
  getSaveHandlers: N1,
  getWeightSpecs: Sm,
  http: km,
  isHTTPScheme: Cf,
  loadWeights: A1,
  registerLoadRouter: vC,
  registerSaveRouter: SC,
  weightsLoaderFactory: z1,
  withSaveHandler: sk,
  withSaveHandlerSync: rk,
  copyModel: zC,
  listModels: OC,
  moveModel: WC,
  removeModel: AC
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ok(n, t, e = !1, s = !1) {
  let r = N(n, "a", "matMul"), o = N(t, "b", "matMul");
  [r, o] = xe(r, o);
  const i = { a: r, b: o }, a = { transposeA: e, transposeB: s };
  return D.runKernel(cl, i, a);
}
const zt = G({ matMul_: ok });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ik(n, t, e = 1, s = 0, r = "int32") {
  if (t < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  const i = { indices: N(n, "indices", "oneHot", "int32") }, a = { dtype: r, depth: t, onValue: e, offValue: s };
  return D.runKernel(Pl, i, a);
}
const Mo = G({ oneHot_: ik });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ak() {
  K().set("PROD", !0);
}
function lk() {
  K().set("DEBUG", !0);
}
function ck() {
  K().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function uk(n) {
  K().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(n + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function hk() {
  D.disposeVariables();
}
function oe() {
  return D;
}
function Za() {
  return D.memory();
}
function dk(n) {
  return D.profile(n);
}
function M(n, t) {
  return D.tidy(n, t);
}
function Dt(n) {
  Ys(n).forEach((e) => e.dispose());
}
function Se(n) {
  return D.keep(n);
}
function pk(n) {
  return D.time(n);
}
function fk(n) {
  return D.setBackend(n);
}
function mk() {
  return D.ready();
}
function gk() {
  return D.backendName;
}
function yk(n) {
  D.removeBackend(n);
}
function bk(n) {
  return D.findBackend(n);
}
function xk(n) {
  return D.findBackendFactory(n);
}
function Tm(n, t, e = 1) {
  return D.registerBackend(n, t, e);
}
function Ks() {
  return D.backend;
}
function wk(n, t) {
  K().setPlatform(n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ik(n) {
  const e = { input: N(n, "input", "imag") };
  return D.runKernel(kh, e);
}
const ic = G({ imag_: Ik });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sk(n) {
  const e = { x: N(n, "x", "neg") };
  return D.runKernel(zl, e);
}
const ce = G({ neg_: Sk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vk(n) {
  const e = { input: N(n, "input", "real") };
  return D.runKernel(Wh, e);
}
const Xo = G({ real_: vk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ck(n, t, e) {
  const s = N(n, "x", "transpose");
  if (t == null && (t = s.shape.map((i, a) => a).reverse()), k(s.rank === t.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`), t.forEach((i) => {
    k(i >= 0 && i < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${t}`);
  }), s.rank <= 1)
    return s.clone();
  const r = { x: s }, o = { perm: t };
  return s.dtype === "complex64" ? M(() => {
    let i = Xo(s), a = ic(s);
    return i = D.runKernel(jr, { x: i }, o), a = D.runKernel(jr, { x: a }, o), e && (a = ce(a)), js(i, a);
  }) : D.runKernel(jr, r, o);
}
const Wt = G({ transpose_: Ck });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kk(n, t, e) {
  const s = N(n, "labels", "confusionMatrix"), r = N(t, "predictions", "confusionMatrix");
  k(e == null || e > 0 && Number.isInteger(e), () => `If provided, numClasses must be a positive integer, but got ${e}`), k(s.rank === 1, () => `Expected the rank of labels to be 1, but got ${s.rank}`), k(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), k(s.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), k(e > 0 && Number.isInteger(e), () => `numClasses is required to be a positive integer, but got ${e}`);
  const o = Mo(ut(s, "int32"), e), i = Mo(ut(r, "int32"), e), a = Wt(o), l = zt(a, i);
  return ut(l, "int32");
}
const Nk = G({ confusionMatrix_: kk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  confusionMatrix: Nk
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Js(n, t) {
  const e = n.length, s = [];
  for (let r = 0; r < e; r++) {
    const o = e - 1 - r, i = n[o] || 1;
    (t[t.length - 1 - r] || 1) > 1 && i === 1 && s.unshift(o);
  }
  return s;
}
function Le(n, t) {
  const e = [];
  for (let s = 0; s < t.length; s++) {
    const r = n[n.length - s - 1], o = t.length - s - 1, i = t[o];
    (r == null || r === 1 && i > 1) && e.unshift(o);
  }
  return e;
}
function Et(n, t) {
  const e = [], s = Math.max(n.length, t.length);
  for (let r = 0; r < s; r++) {
    let o = n[n.length - r - 1];
    o == null && (o = 1);
    let i = t[t.length - r - 1];
    if (i == null && (i = 1), o === 1)
      e.unshift(i);
    else if (i === 1)
      e.unshift(o);
    else if (o !== i) {
      const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
      throw Error(a);
    } else
      e.unshift(o);
  }
  return e;
}
const $k = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getBroadcastDims: Js,
  getReductionAxes: Le,
  assertAndGetBroadcastShape: Et
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $m(n, t, e) {
  if (fo(n), t != null && t.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const s = Os(n, e);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Wr;
function M1(n, t = 3) {
  if (t > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let e = !1, s = !1, r = !1, o = !1, i = !1, a = !1;
  if (n.data instanceof Uint8Array)
    e = !0;
  else if (typeof ImageData < "u" && n instanceof ImageData)
    s = !0;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
    r = !0;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
    o = !0;
  else if (n.getContext != null)
    i = !0;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap)
    a = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (Cu(vu, D.backendName) != null) {
    const f = { pixels: n }, m = { numChannels: t };
    return D.runKernel(vu, f, m);
  }
  const [c, u] = r ? [
    n.videoWidth,
    n.videoHeight
  ] : [n.width, n.height];
  let h;
  if (i)
    h = n.getContext("2d").getImageData(0, 0, c, u).data;
  else if (s || e)
    h = n.data;
  else if (o || r || a) {
    if (Wr == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          Wr = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        Wr = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    Wr.canvas.width = c, Wr.canvas.height = u, Wr.drawImage(n, 0, 0, c, u), h = Wr.getImageData(0, 0, c, u).data;
  }
  let d;
  if (t === 4)
    d = new Int32Array(h);
  else {
    const f = c * u;
    d = new Int32Array(f * t);
    for (let m = 0; m < f; m++)
      for (let g = 0; g < t; ++g)
        d[m * t + g] = h[m * 4 + g];
  }
  return $m(d, [u, c, t], "int32");
}
function Rk(n) {
  return n != null && n.data instanceof Uint8Array;
}
function Ek() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function Lk(n) {
  return n != null && n.width !== 0 && n.height !== 0;
}
function Dk(n) {
  return Ek() && !(n instanceof ImageBitmap) && Lk(n) && !Rk(n);
}
async function Gk(n, t = 3) {
  let e = null;
  if (K().getBool("WRAP_TO_IMAGEBITMAP") && Dk(n)) {
    let s;
    try {
      s = await createImageBitmap(n, { premultiplyAlpha: "none" });
    } catch {
      s = null;
    }
    s != null && s.width === n.width && s.height === n.height ? e = s : e = n;
  } else
    e = n;
  return M1(e, t);
}
async function Fk(n, t) {
  let e = N(n, "img", "toPixels");
  if (!(n instanceof Kt)) {
    const c = e;
    e = ut(c, "int32"), c.dispose();
  }
  if (e.rank !== 2 && e.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);
  const [s, r] = e.shape.slice(0, 2), o = e.rank === 2 ? 1 : e.shape[2];
  if (o > 4 || o === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${o}`);
  if (e.dtype !== "float32" && e.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);
  const i = await e.data(), a = e.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(r * s * 4);
  for (let c = 0; c < s * r; ++c) {
    const u = [0, 0, 0, 255];
    for (let d = 0; d < o; d++) {
      const p = i[c * o + d];
      if (e.dtype === "float32") {
        if (p < 0 || p > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
      } else if (e.dtype === "int32" && (p < 0 || p > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
      o === 1 ? (u[0] = p * a, u[1] = p * a, u[2] = p * a) : u[d] = p * a;
    }
    const h = c * 4;
    l[h + 0] = Math.round(u[0]), l[h + 1] = Math.round(u[1]), l[h + 2] = Math.round(u[2]), l[h + 3] = Math.round(u[3]);
  }
  if (t != null) {
    t.width = r, t.height = s;
    const c = t.getContext("2d"), u = new ImageData(l, r, s);
    c.putImageData(u, 0, 0);
  }
  return e !== n && e.dispose(), l;
}
const Rm = G({ fromPixels_: M1 }), Ok = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  fromPixelsAsync: Gk,
  toPixels: Fk,
  fromPixels: Rm
}, Symbol.toStringTag, { value: "Module" }));
function id(n, t) {
  const e = n.shape.length, s = t.shape.length;
  if (e < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (t.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[s - 1] > e)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s - 1]} vs. ${e}`);
  if (H(n.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const r = t.shape, o = r[r.length - 1];
  let i = 1;
  for (let h = 0; h < r.length - 1; ++h)
    i *= r[h];
  const a = n.shape, l = r.slice();
  l.pop();
  let c = 1;
  for (let h = o; h < e; ++h)
    c *= a[h], l.push(a[h]);
  const u = [
    ...xt(n.shape).map((h) => h / c),
    1
  ].slice(0, o);
  return [l, i, c, u];
}
const Ak = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  prepareAndValidate: id
}, Symbol.toStringTag, { value: "Module" }));
function Em(n, t, e) {
  const s = t.rank > 1 ? t.shape[t.rank - 1] : 1, r = t.rank > 1 ? t.rank - 1 : 1, o = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;
  if (e.rank < r)
    throw new Error(o + ` update.rank < ${r}. `);
  if (n.length < s + (e.rank - r))
    throw new Error(o + ` Output shape length < ${s + (e.rank - r)}`);
  if (e.rank !== r + n.length - s)
    throw new Error(o + ` update.rank != ${r + n.length - s}`);
  for (let i = 0; i < r; ++i)
    if (e.shape[i] !== t.shape[i])
      throw new Error(o + ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < e.rank - r; ++i)
    if (e.shape[i + r] !== n[i + s])
      throw new Error(o + ` updates.shape[${i + r}] (${e.shape[i + r]}) != shape[${i + r}] (${n[i + r]})`);
}
function Lm(n, t, e) {
  if (t.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (n.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (t.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (e.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);
  if (e.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (n.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  Em(e, t, n);
}
function Ji(n, t, e) {
  const s = t.shape.length, r = s > 1 ? t.shape[s - 1] : 1, o = e.length;
  let i = 1;
  for (let h = r; h < o; ++h)
    i *= e[h];
  const a = r < 1 ? 1 : r, l = H(t.shape) / a, c = [...xt(e.slice(0, r)), 1], u = H(e);
  return { sliceRank: r, numUpdates: l, sliceSize: i, strides: c, outputSize: u };
}
const zk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  validateUpdateShape: Em,
  validateInput: Lm,
  calculateShapes: Ji
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kf = -2, Wk = -1;
function Dm(n, t, e) {
  const s = n.shape.length;
  k(s === t.length, () => `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`), k(s === e.length, () => `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);
  for (let r = 0; r < s; ++r)
    k(t[r] + e[r] <= n.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${t[r] + e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`);
}
function Vk(n) {
  const t = [];
  let e = 0;
  for (; n > 0; )
    n & 1 && t.push(e), n /= 2, e++;
  return t;
}
function Gm(n, t, e) {
  const s = [];
  for (let r = 0; r < n.length; r++)
    s[r] = Math.ceil((t[r] - n[r]) / e[r]);
  return s;
}
function X1(n, t, e, s) {
  const r = [...n];
  for (let o = r.length; o < s.length; o++)
    r.push(1);
  for (let o = 0; o < e; o++)
    o === 0 ? r[t] = 1 : (r.splice(t, 0, 1), r.pop());
  return r;
}
function _1(n, t, e) {
  return e <= n ? e : e - (t - 1);
}
function K1(n, t) {
  const e = [];
  for (let s = 0; s < n; s++)
    e.push(t + s);
  return e;
}
function Pk(n, t, e, s, r, o, i, a, l) {
  const c = n.length;
  let u = new Array(c), h = new Array(c), d = new Array(c);
  if (t.length && e > 0) {
    const p = t[0], f = e + 1;
    u = Z1(i, p, f, s, n), h = B1(a, p, f, r, n), d = X1(o, p, f, n);
  } else
    for (let p = 0; p < c; p++)
      u[p] = U1(i, s, o, n, p, l), h[p] = Y1(a, r, o, n, p, l), d[p] = H1(o, p, l);
  return {
    begin: u,
    end: h,
    strides: d
  };
}
function Z1(n, t, e, s, r) {
  const o = [...r], i = K1(e, t);
  for (let a = 0; a < o.length; a++)
    if (i.indexOf(a) > -1)
      o[a] = 0;
    else {
      const l = _1(t, e, a);
      let c = s[l];
      n & 1 << l && (c = 0), o[a] = c;
    }
  return o;
}
function B1(n, t, e, s, r) {
  const o = [...r], i = K1(e, t);
  for (let a = 0; a < o.length; a++)
    if (i.indexOf(a) > -1)
      o[a] = Number.MAX_SAFE_INTEGER;
    else {
      const l = _1(t, e, a);
      let c = s[l];
      n & 1 << l && (c = Number.MAX_SAFE_INTEGER), o[a] = c;
    }
  for (let a = 0; a < o.length; a++) {
    const l = r[a];
    o[a] < 0 && (o[a] += l), o[a] = wr(0, o[a], r[a]);
  }
  return o;
}
function H1(n, t, e) {
  let s = n[t];
  return (e & 1 << t || s == null) && (s = 1), s;
}
function U1(n, t, e, s, r, o) {
  let i = t[r];
  const a = e[r] || 1;
  (n & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  const l = s[r];
  return i < 0 && (i += l), i = wr(0, i, l - 1), i;
}
function Y1(n, t, e, s, r, o) {
  let i = t[r];
  const a = e[r] || 1;
  (n & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  const l = s[r];
  return i < 0 && (i += l), a > 0 ? i = wr(0, i, l) : i = wr(-1, i, l - 1), i;
}
function ad(n, t, e) {
  let s = e.length;
  for (let r = 0; r < e.length; r++)
    if (e[r] > 1) {
      s = r;
      break;
    }
  for (let r = s + 1; r < e.length; r++)
    if (t[r] > 0 || e[r] !== n[r])
      return !1;
  return !0;
}
function ld(n, t) {
  let e = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++)
    e += n[s] * t[s];
  return e;
}
function cd(n, t, e) {
  let s;
  const r = n.shape.length;
  typeof t == "number" ? s = [t, ...new Array(r - 1).fill(0)] : t.length < r ? s = t.concat(new Array(r - t.length).fill(0)) : s = t.slice(), s.forEach((i) => {
    k(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let o;
  return e == null ? o = new Array(r).fill(-1) : typeof e == "number" ? o = [e, ...new Array(r - 1).fill(-1)] : e.length < r ? o = e.concat(new Array(r - e.length).fill(-1)) : o = e, o = o.map((i, a) => i >= 0 ? i : (k(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`), n.shape[a] - s[a])), [s, o];
}
function Fm(n, t, e, s, r, o, i, a, l) {
  let c;
  if (s == null ? (c = new Array(t.length), c.fill(1)) : c = s, i != null && (i & i - 1) !== 0)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let u = !1;
  const h = {
    dims: c.length,
    numAddAxisAfterEllipsis: 0,
    begin: t.slice(),
    end: e.slice(),
    strides: c.slice(),
    beginMask: r,
    endMask: o,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  for (let w = 0; w < h.dims; w++)
    u && (1 << w & a) !== 0 && h.numAddAxisAfterEllipsis++, 1 << w & i && (u = !0);
  u || (h.ellipsisMask |= 1 << h.dims, h.dims++);
  const d = {
    dims: n.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  Mk(h, d);
  let p = !0, f = !0, m = !0;
  const g = [], y = [];
  for (let w = 0; w < n.length; ++w) {
    if (d.strides[w] === 0)
      throw Error(`strides[${w}] must be non-zero`);
    const x = !!(d.shrinkAxisMask & 1 << w), S = n[w];
    if (S === -1) {
      g.push(x ? 1 : -1);
      continue;
    }
    const v = [d.beginMask & 1 << w, d.endMask & 1 << w], T = [
      d.strides[w] > 0 ? 0 : -1,
      d.strides[w] > 0 ? S : S - 1
    ];
    if (x && d.strides[w] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    m = m && d.strides[w] === 1;
    const $ = !!(d.beginMask & 1 << w && d.endMask & 1 << w);
    if (d.beginValid && d.endValid) {
      if (x) {
        const X = d.begin[w] < 0 ? S + d.begin[w] : d.begin[w];
        if (d.begin[w] = X, d.end[w] = d.begin[w] + 1, X < 0 || X >= S)
          throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`);
      } else
        d.begin[w] = C0(d.begin[w], 0, d.strides[w], S, v, T), d.end[w] = C0(d.end[w], 1, d.strides[w], S, v, T);
      const V = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === S;
      p = p && V, f = f && (w === 0 && d.strides[w] === 1 || V);
    } else
      p = p && d.strides[w] === 1 && $, f = f && (w === 0 && d.strides[w] === 1 || $);
    let R, E = !1;
    if (d.beginValid && d.endValid ? (R = d.end[w] - d.begin[w], E = !0) : x ? (R = 1, E = !0) : $ && S >= 0 && (d.strides[w] < 0 ? R = -S : R = S, E = !0), E) {
      let V;
      R === 0 || R < 0 != d.strides[w] < 0 ? V = 0 : V = Math.trunc(R / d.strides[w]) + (R % d.strides[w] !== 0 ? 1 : 0), g.push(V);
    } else
      g.push(-1);
  }
  for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
    const x = d.finalShapeGatherIndices[w];
    x >= 0 ? y.push(g[x]) : x === kf && y.push(1);
  }
  return {
    finalShapeSparse: y.filter((w, x) => d.finalShapeGatherIndices[x] !== kf),
    finalShape: y,
    isIdentity: p,
    sliceDim0: f,
    isSimpleSlice: m,
    begin: d.begin,
    end: d.end,
    strides: d.strides
  };
}
function Mk(n, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let e = 0;
  t.beginValid = n.begin != null, t.endValid = n.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let s = 0; s < n.dims; s++)
    if (1 << s & n.ellipsisMask) {
      const r = Math.min(t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, t.dims);
      for (; e < r; e++)
        t.begin[e] = 0, t.end[e] = 0, t.strides[e] = 1, t.beginMask |= 1 << e, t.endMask |= 1 << e, t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[e] = s;
    } else if (1 << s & n.newAxisMask)
      t.finalShapeGatherIndices.push(kf), t.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (e === t.begin.length)
        throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);
      n.begin != null && (t.begin[e] = n.begin[s]), n.end != null && (t.end[e] = n.end[s]), t.strides[e] = n.strides[s], n.beginMask & 1 << s && (t.beginMask |= 1 << e), n.endMask & 1 << s && (t.endMask |= 1 << e), n.shrinkAxisMask & 1 << s ? (t.finalShapeGatherIndices.push(Wk), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << e) : (t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(s)), t.inputShapeGatherIndicesSparse[e] = s, e++;
    }
}
function C0(n, t, e, s, r, o) {
  if (r[t])
    return e > 0 ? o[t] : o[t + 1 & 1];
  {
    const i = n < 0 ? s + n : n;
    return i < o[0] ? o[0] : i > o[1] ? o[1] : i;
  }
}
const j1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid: Dm,
  maskToAxes: Vk,
  computeOutShape: Gm,
  stridesWithElidedDims: X1,
  getNormalizedAxes: Pk,
  startIndicesWithElidedDims: Z1,
  stopIndicesWithElidedDims: B1,
  stridesForAxis: H1,
  startForAxis: U1,
  stopForAxis: Y1,
  isSliceContinous: ad,
  computeFlatOffset: ld,
  parseSliceParams: cd,
  sliceInfo: Fm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yo {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
class Pn {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Pn.instance == null && (Pn.instance = new Pn()), Pn.instance;
  }
  static register(t) {
    Pn.getMap().classNameMap[t.className] = [t, t.fromConfig];
  }
}
function st(n) {
  k(n.className != null, () => "Class being registered does not have the static className property defined."), k(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), k(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), Pn.register(n);
}
const Xk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Serializable: yo,
  SerializationMap: Pn,
  registerClass: st
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _k = 1e-3, J1 = 0.1;
function Kk(n, t, e) {
  return e == null && (e = Om()), Nf(n, t, (s, r) => Am(s, r, e));
}
function Om() {
  return D.backend.floatPrecision() === 32 ? _k : J1;
}
function Nf(n, t, e) {
  let s = !0;
  if ((Be(n) || Be(t)) && (s = !1), Be(n) && Be(t) && (s = !0), s) {
    const i = n.constructor.name, a = t.constructor.name;
    if (i !== a)
      throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${a}`);
  }
  if (Array.isArray(n) && Array.isArray(t)) {
    const i = Os(n), a = Os(t);
    if (!Vt(i, a))
      throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${a}]`);
  }
  const r = Be(n) ? n : Hs(n), o = Be(t) ? t : Hs(t);
  if (r.length !== o.length)
    throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.
Actual:   ${r}.
Expected: ${o}.`);
  for (let i = 0; i < o.length; ++i) {
    const a = r[i], l = o[i];
    if (!e(a, l))
      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${l}.
Actual:   ${r}.
Expected: ${o}.`);
  }
  typeof expect < "u" && expect().nothing();
}
function Zk(n, t) {
  n().then(() => t.fail(), () => t()), typeof expect < "u" && expect().nothing();
}
function Bk(n, t) {
  const e = typeof t == "string" || typeof t == "number" || typeof t == "boolean" ? [t] : t;
  return Ls(n) || Ls(n[0]) || Ls(t) || Ls(t[0]) ? Nf(n, e, (s, r) => s == r) : Nf(n, t, (s, r) => Am(s, r, 0));
}
function Hk(n, t, e) {
  if (e == null && (e = Om()), !Am(n, t, e))
    throw new Error(`Numbers differ: actual === ${n}, expected === ${t}`);
  typeof expect < "u" && expect().nothing();
}
function Am(n, t, e) {
  return !isFinite(n) && !isFinite(t) ? !0 : !(isNaN(n) || isNaN(t) || Math.abs(n - t) > e);
}
function Uk(n, t, e) {
  for (let s = 0; s < n.length; s++)
    if (n[s] < t || n[s] > e)
      throw new Error(`Value out of range:${n[s]} low: ${t}, high: ${e}`);
}
function Yk(n, t) {
  const e = new Float32Array(n), s = new Float32Array(t);
  if (e.length !== s.length)
    throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${e.length}`);
  for (let r = 0; r < s.length; r++)
    if (e[r] !== s[r])
      throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${e[r]} instead`);
}
function Q1(n) {
  for (let t = 0; t < n.length; t++) {
    const e = n[t];
    Array.isArray(e) ? Q1(e) : n[t] = Kn(e);
  }
  return n;
}
function jk(n) {
  const t = document.createElement("video");
  return "playsInline" in t && (t.playsInline = !0), t.muted = !0, t.loop = !0, t.style.position = "fixed", t.style.left = "0px", t.style.top = "0px", t.preload = "auto", t.appendChild(n), new Promise((e) => {
    t.addEventListener("loadeddata", (s) => e(t)), t.load();
  });
}
async function Jk(n) {
  await n.play(), "requestVideoFrameCallback" in n && await new Promise((t) => {
    n.requestVideoFrameCallback(t);
  });
}
const Qk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  TEST_EPSILON_FLOAT16: J1,
  expectArraysClose: Kk,
  testEpsilon: Om,
  expectPromiseToFail: Zk,
  expectArraysEqual: Bk,
  expectNumbersClose: Hk,
  expectValuesInRange: Uk,
  expectArrayBuffersEqual: Yk,
  encodeStrings: Q1,
  createVideoElement: jk,
  play: Jk
}, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const q1 = "3.21.0";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qk(n, t) {
  let e = N(n, "a", "add"), s = N(t, "b", "add");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(mo, r);
}
const nt = G({ add_: qk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tN(n, t) {
  let e = N(n, "a", "floorDiv"), s = N(t, "b", "floorDiv");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(wi, r);
}
const ud = G({ floorDiv_: tN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eN(n, t) {
  let e = N(n, "a", "div"), s = N(t, "b", "div");
  if ([e, s] = xe(e, s), e.dtype === "int32" && s.dtype === "int32")
    return ud(e, s);
  const r = { a: e, b: s }, o = {};
  return D.runKernel(fi, r, o);
}
const St = G({ div_: eN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nN(n, t) {
  let e = N(n, "a", "mul"), s = N(t, "b", "mul");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(Li, r);
}
const A = G({ mul_: nN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sN(n) {
  const t = N(n, "x", "abs");
  if (t.dtype === "complex64") {
    const e = { x: t };
    return D.runKernel(hl, e);
  } else {
    const e = { x: t };
    return D.runKernel(sl, e);
  }
}
const $e = G({ abs_: sN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rN(n) {
  const e = { x: N(n, "x", "acos") };
  return D.runKernel(ni, e);
}
const zm = G({ acos_: rN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oN(n) {
  const e = { x: N(n, "x", "acosh") };
  return D.runKernel(si, e);
}
const Wm = G({ acosh_: oN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iN(n) {
  k(Array.isArray(n), () => "The argument passed to tf.addN() must be a list of tensors"), k(n.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${n.length}`);
  const t = n.map((r, o) => N(r, `tensors${o}`, "addN")), e = t[0];
  t.forEach((r) => {
    if (r.dtype !== e.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), t.forEach((r) => {
    if (!Vt(r.shape, e.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  const s = t;
  return D.runKernel(rl, s);
}
const tw = G({ addN_: iN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aN(n, t = null, e = !1) {
  const r = { x: N(n, "x", "all", "bool") }, o = { axis: t, keepDims: e };
  return D.runKernel(eh, r, o);
}
const hd = G({ all_: aN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lN(n, t = null, e = !1) {
  const r = { x: N(n, "x", "any", "bool") }, o = { axis: t, keepDims: e };
  return D.runKernel(nh, r, o);
}
const Ba = G({ any_: lN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cN(n, t = 0) {
  const s = { x: N(n, "x", "argMax") }, r = { axis: t };
  return D.runKernel(ol, s, r);
}
const ro = G({ argMax_: cN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uN(n, t = 0) {
  const s = { x: N(n, "x", "argMin") }, r = { axis: t };
  return D.runKernel(il, s, r);
}
const Vm = G({ argMin_: uN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hN(n) {
  const e = { x: N(n, "x", "asin") };
  return D.runKernel(ri, e);
}
const Pm = G({ asin_: hN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dN(n) {
  const e = { x: N(n, "x", "asinh") };
  return D.runKernel(oi, e);
}
const Mm = G({ asinh_: dN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pN(n) {
  const e = { x: N(n, "x", "atan") };
  return D.runKernel(ii, e);
}
const Xm = G({ atan_: pN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fN(n, t) {
  let e = N(n, "a", "atan2"), s = N(t, "b", "atan2");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(li, r);
}
const _m = G({ atan2_: fN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mN(n) {
  const e = { x: N(n, "x", "atanh") };
  return D.runKernel(ai, e);
}
const Km = G({ atanh_: mN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ac(n, t, e, s, r = "NHWC", o) {
  const i = n[3], a = [...t, i], l = or(r);
  return _e(n, a, e, o, s, null, null, l);
}
function ls(n, t, e, s, r, o, i = "channelsLast") {
  const [a, l] = Ru(t);
  let c;
  if (i === "channelsLast")
    c = [a, l, n[3], n[3]];
  else if (i === "channelsFirst")
    c = [a, l, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return _e(n, c, e, s, r, o, !1, i);
}
function rr(n, t, e, s, r, o, i = "NDHWC") {
  const [a, l, c] = Tf(t);
  let u, h;
  if (i === "NDHWC")
    h = "channelsLast", u = [a, l, c, n[4], n[4]];
  else if (i === "NCDHW")
    h = "channelsFirst", u = [a, l, c, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Lr(n, u, e, s, r, !1, h, o);
}
function _e(n, t, e, s, r, o, i = !1, a = "channelsLast") {
  let [l, c, u, h] = [-1, -1, -1, -1];
  if (a === "channelsLast")
    [l, c, u, h] = n;
  else if (a === "channelsFirst")
    [l, h, c, u] = n;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  const [d, p, , f] = t, [m, g] = Ru(e), [y, b] = Ru(s), w = Ao(d, y), x = Ao(p, b), { padInfo: S, outHeight: v, outWidth: T } = bN(r, c, u, m, g, w, x, o, a), $ = i ? f * h : f;
  let R;
  return a === "channelsFirst" ? R = [l, $, v, T] : a === "channelsLast" && (R = [l, v, T, $]), {
    batchSize: l,
    dataFormat: a,
    inHeight: c,
    inWidth: u,
    inChannels: h,
    outHeight: v,
    outWidth: T,
    outChannels: $,
    padInfo: S,
    strideHeight: m,
    strideWidth: g,
    filterHeight: d,
    filterWidth: p,
    effectiveFilterHeight: w,
    effectiveFilterWidth: x,
    dilationHeight: y,
    dilationWidth: b,
    inShape: n,
    outShape: R,
    filterShape: t
  };
}
function Lr(n, t, e, s, r, o = !1, i = "channelsLast", a) {
  let [l, c, u, h, d] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast")
    [l, c, u, h, d] = n;
  else if (i === "channelsFirst")
    [l, d, c, u, h] = n;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  const [p, f, m, , g] = t, [y, b, w] = Tf(e), [x, S, v] = Tf(s), T = Ao(p, x), $ = Ao(f, S), R = Ao(m, v), { padInfo: E, outDepth: V, outHeight: X, outWidth: _ } = xN(r, c, u, h, y, b, w, T, $, R, a), B = o ? g * d : g;
  let U;
  return i === "channelsFirst" ? U = [l, B, V, X, _] : i === "channelsLast" && (U = [l, V, X, _, B]), {
    batchSize: l,
    dataFormat: i,
    inDepth: c,
    inHeight: u,
    inWidth: h,
    inChannels: d,
    outDepth: V,
    outHeight: X,
    outWidth: _,
    outChannels: B,
    padInfo: E,
    strideDepth: y,
    strideHeight: b,
    strideWidth: w,
    filterDepth: p,
    filterHeight: f,
    filterWidth: m,
    effectiveFilterDepth: T,
    effectiveFilterHeight: $,
    effectiveFilterWidth: R,
    dilationDepth: x,
    dilationHeight: S,
    dilationWidth: v,
    inShape: n,
    outShape: U,
    filterShape: t
  };
}
function gN(n, t, e, s, r) {
  s == null && (s = Zm(n, t, e));
  const o = n[0], i = n[1], a = Jr((o - t + 2 * s) / e + 1, r), l = Jr((i - t + 2 * s) / e + 1, r);
  return [a, l];
}
function yN(n, t, e, s, r, o) {
  r == null && (r = Zm(n, t, s));
  const i = n[0], a = n[1], l = n[2], c = Jr((i - t + 2 * r) / s + 1, o), u = Jr((a - t + 2 * r) / s + 1, o), h = Jr((l - t + 2 * r) / s + 1, o);
  return [c, u, h, e];
}
function Zm(n, t, e, s = 1) {
  const r = Ao(t, s);
  return Math.floor((n[0] * (e - 1) - e + r) / 2);
}
function Ru(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function Tf(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function Ao(n, t) {
  return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function bN(n, t, e, s, r, o, i, a, l) {
  let c, u, h;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = gN([t, e], o, s, n, a);
    u = p[0], h = p[1];
  } else if (n === "same") {
    u = Math.ceil(t / s), h = Math.ceil(e / r);
    const d = Math.max(0, (u - 1) * s + o - t), p = Math.max(0, (h - 1) * r + i - e), f = Math.floor(d / 2), m = d - f, g = Math.floor(p / 2), y = p - g;
    c = { top: f, bottom: m, left: g, right: y, type: "SAME" };
  } else if (n === "valid")
    c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, u = Math.ceil((t - o + 1) / s), h = Math.ceil((e - i + 1) / r);
  else if (typeof n == "object") {
    const d = l === "channelsLast" ? n[1][0] : n[2][0], p = l === "channelsLast" ? n[1][1] : n[2][1], f = l === "channelsLast" ? n[2][0] : n[3][0], m = l === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: d, bottom: p, left: f, right: m, type: d === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, u = Jr((t - o + d + p) / s + 1, a), h = Jr((e - i + f + m) / r + 1, a);
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: u, outWidth: h };
}
function xN(n, t, e, s, r, o, i, a, l, c, u) {
  let h, d, p, f;
  if (typeof n == "number") {
    h = {
      top: n,
      bottom: n,
      left: n,
      right: n,
      front: n,
      back: n,
      type: n === 0 ? "VALID" : "NUMBER"
    };
    const g = yN([t, e, s, 1], a, 1, r, n, u);
    d = g[0], p = g[1], f = g[2];
  } else if (n === "same") {
    d = Math.ceil(t / r), p = Math.ceil(e / o), f = Math.ceil(s / i);
    const m = (d - 1) * r + a - t, g = (p - 1) * o + l - e, y = (f - 1) * i + c - s, b = Math.floor(m / 2), w = m - b, x = Math.floor(g / 2), S = g - x, v = Math.floor(y / 2), T = y - v;
    h = { top: x, bottom: S, left: v, right: T, front: b, back: w, type: "SAME" };
  } else if (n === "valid")
    h = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: "VALID"
    }, d = Math.ceil((t - a + 1) / r), p = Math.ceil((e - l + 1) / o), f = Math.ceil((s - c + 1) / i);
  else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
}
function Jr(n, t) {
  if (!t)
    return Math.trunc(n);
  switch (t) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function vr(n) {
  const [t, e, s] = Ru(n);
  return t === 1 && e === 1 && s === 1;
}
function je(n, t) {
  return vr(n) || vr(t);
}
function or(n) {
  if (n === "NHWC")
    return "channelsLast";
  if (n === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function un(n, t, e) {
  if (e != null) {
    if (typeof t == "string")
      throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    if (typeof t == "number")
      k(to(t), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    else if (typeof t == "object")
      t.forEach((s) => {
        s.forEach((r) => {
          k(to(r), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`);
        });
      });
    else
      throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wN(n, t) {
  const s = { x: N(n, "x", "reshape", "string_or_numeric") }, r = { shape: t };
  return D.runKernel(Zl, s, r);
}
const W = G({ reshape_: wN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IN(n, t, e, s, r) {
  const o = N(n, "x", "avgPool", "float32"), i = 1;
  k(je(e, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);
  let a = o, l = !1;
  o.rank === 3 && (l = !0, a = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), k(a.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`), un("avgPool", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r };
  let h = D.runKernel(al, c, u);
  return h = ut(h, o.dtype), l ? W(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const lc = G({ avgPool_: IN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SN(n, t, e, s, r, o = "NDHWC") {
  const i = N(n, "x", "avgPool3d", "float32");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(a.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`), k(o === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), un("avgPool3d", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r, dataFormat: o };
  let h = D.runKernel(ll, c, u);
  return h = ut(h, a.dtype), l ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const Bm = G({ avgPool3d_: SN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vN(n, t = 0) {
  k(n.length >= 1, () => "Pass at least one tensor to concat");
  const e = Ka(n, "tensors", "concat", "string_or_numeric");
  if (e[0].dtype === "complex64" && e.forEach((o) => {
    if (o.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${o.dtype}. `);
  }), e.length === 1)
    return Ds(e[0]);
  const s = e, r = { axis: t };
  return D.runKernel(dl, s, r);
}
const Ce = G({ concat_: vN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CN(n) {
  const e = { x: N(n, "x", "sigmoid", "float32") };
  return D.runKernel(Xi, e);
}
const gs = G({ sigmoid_: CN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kN(n, t, e) {
  const s = N(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const r = { x: s }, o = { begin: t, size: e };
  return D.runKernel(jl, r, o);
}
const Mt = G({ slice_: kN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NN(n) {
  const e = { x: N(n, "x", "tanh", "float32") };
  return D.runKernel(Ui, e);
}
const oo = G({ tanh_: NN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TN(n, t, e, s, r, o) {
  const i = N(n, "forgetBias", "basicLSTMCell"), a = N(t, "lstmKernel", "basicLSTMCell"), l = N(e, "lstmBias", "basicLSTMCell"), c = N(s, "data", "basicLSTMCell"), u = N(r, "c", "basicLSTMCell"), h = N(o, "h", "basicLSTMCell"), d = Ce([c, h], 1), p = zt(d, a), f = nt(p, l), m = f.shape[0], g = f.shape[1] / 4, y = [m, g], b = Mt(f, [0, 0], y), w = Mt(f, [0, g], y), x = Mt(f, [0, g * 2], y), S = Mt(f, [0, g * 3], y), v = nt(A(gs(b), oo(w)), A(u, gs(nt(i, x)))), T = A(oo(v), gs(S));
  return [v, T];
}
const ew = G({ basicLSTMCell_: TN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $N(n, t, e) {
  const s = N(n, "x", "batchToSpaceND"), r = t.reduce((a, l) => a * l);
  k(s.rank >= 1 + t.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`), k(e.length === t.length, () => `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`), k(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`);
  const o = { x: s }, i = { blockShape: t, crops: e };
  return D.runKernel(ul, o, i);
}
const cc = G({ batchToSpaceND_: $N });
function RN(n) {
  let t;
  return n.rank === 0 || n.rank === 1 ? t = W(n, [1, 1, 1, n.size]) : n.rank === 2 ? t = W(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? t = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : t = n, t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EN(n, t, e, s, r, o) {
  o == null && (o = 1e-3);
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  r != null && (c = N(r, "scale", "batchNorm"));
  let u;
  s != null && (u = N(s, "offset", "batchNorm")), k(a.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(u == null || a.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(c == null || a.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const d = {
    x: RN(i),
    scale: c,
    offset: u,
    mean: a,
    variance: l
  }, p = { varianceEpsilon: o }, f = D.runKernel(Il, d, p);
  return W(f, i.shape);
}
const Qi = G({ batchNorm_: EN });
function LN(n, t, e, s, r, o) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  r != null && (c = N(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), k(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), k(a.rank === 2 || a.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`), k(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), Qi(i, a, l, u, c, o);
}
const Hm = G({ batchNorm2d_: LN });
function DN(n, t, e, s, r, o) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  r != null && (c = N(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), k(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), k(a.rank === 3 || a.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`), k(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), Qi(i, a, l, u, c, o);
}
const Um = G({ batchNorm3d_: DN });
function GN(n, t, e, s, r, o) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  r != null && (c = N(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), k(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), k(a.rank === 4 || a.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`), k(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), Qi(i, a, l, u, c, o);
}
const Ym = G({ batchNorm4d_: GN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FN(n, t, e) {
  const s = N(n, "x", "bincount"), r = N(t, "weights", "bincount");
  k(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), k(e >= 0, () => `size must be non-negative, but got ${e}.`), k(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
  const o = { x: s, weights: r }, i = { size: e };
  return D.runKernel(oh, o, i);
}
const jm = G({ bincount_: FN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ON(n, t) {
  const e = N(n, "s0", "broadcastArgs", "int32"), s = N(t, "s1", "broadcastArgs", "int32");
  if (e.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);
  if (s.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
  const r = { s0: e, s1: s };
  return D.runKernel(ih, r);
}
const nw = G({ broadcastArgs_: ON });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AN(n, t) {
  let e = N(n, "broadcastTo", "x");
  const s = e.shape;
  if (t.some((c) => !(c > 0) || c % 1 !== 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);
  if (t.length < e.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);
  if (t.length > e.rank) {
    const c = e.shape.slice();
    for (; c.length < t.length; )
      c.unshift(1);
    e = W(e, c);
  }
  const r = e.shape, o = Array.from(t);
  for (let c = t.length - 1; c >= 0; c--)
    if (r[c] === t[c])
      o[c] = 1;
    else if (e.shape[c] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);
  if (o.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0)
    return Ds(e);
  const a = { x: e }, l = { reps: o };
  return D.runKernel(Yi, a, l);
}
const gr = G({ broadcastTo_: AN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zN(n) {
  const e = { x: N(n, "x", "ceil", "float32") };
  return D.runKernel(ui, e);
}
const Jm = G({ ceil_: zN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bo(n, t, e) {
  const s = { shape: n, value: t, dtype: e };
  return D.runKernel(Ih, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WN(n, t, e) {
  const s = N(n, "x", "clipByValue");
  if (k(t <= e, () => `Error in clip: min (${t}) must be less than or equal to max (${e}).`), t === e)
    return bo(s.shape, t, s.dtype);
  const r = { x: s }, o = { clipValueMin: t, clipValueMax: e };
  return D.runKernel(hi, r, o);
}
const gn = G({ clipByValue_: WN });
function VN(n) {
  return Ce(n, 0);
}
const Qm = G({ concat1d_: VN });
function PN(n, t) {
  return Ce(n, t);
}
const qm = G({ concat2d_: PN });
function MN(n, t) {
  return Ce(n, t);
}
const tg = G({ concat3d_: MN });
function XN(n, t) {
  return Ce(n, t);
}
const eg = G({ concat4d_: XN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _N(n, t, e, s, r = "NHWC", o = [1, 1], i) {
  const a = N(n, "x", "conv2d", "float32"), l = N(t, "filter", "conv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = W(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), k(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), un("conv2d", s, i);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  k(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), k(je(e, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: r, dilations: o, dimRoundingMode: i }, f = D.runKernel(pl, d, p);
  return u ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Qs = G({ conv2d_: _N });
function KN(n, t, e, s, r = "NWC", o = 1, i) {
  const a = N(n, "x", "conv1d"), l = N(t, "filter", "conv1d");
  let c = a, u = !1;
  a.rank === 2 && (u = !0, c = W(a, [1, a.shape[0], a.shape[1]])), k(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), k(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), un("conv1d", s, i), k(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), k(je(e, o), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`), k(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  const h = W(l, [1, l.shape[0], l.shape[1], l.shape[2]]), d = W(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), g = Qs(d, h, [1, e], s, "NHWC", [1, o], i);
  return u ? W(g, [g.shape[2], g.shape[3]]) : W(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const dd = G({ conv1d_: KN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZN(n, t, e, s, r, o = "NHWC", i) {
  k(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let a = n, l = t, c = !1;
  t.rank === 3 && (c = !0, l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]), a = [1, n[0], n[1], n[2]]), k(a.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`), k(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), k(e.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);
  const u = o === "NHWC" ? a[3] : a[1], h = o === "NHWC" ? l.shape[3] : l.shape[1];
  k(u === e.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`), k(h === e.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`), un("conv2dDerInput", r, i);
  const d = { dy: l, filter: e }, p = { strides: s, pad: r, dataFormat: o, dimRoundingMode: i, inputShape: a }, f = D.runKernel(fl, d, p);
  return c ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const ng = G({ conv2DBackpropInput_: ZN });
function BN(n, t, e, s, r, o) {
  const i = N(n, "x", "conv2dTranspose"), a = N(t, "filter", "conv2dTranspose");
  return ng(e, i, a, s, r, "NHWC", o);
}
const pd = G({ conv2dTranspose_: BN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HN(n, t, e, s, r = "NDHWC", o = [1, 1, 1]) {
  const i = N(n, "x", "conv3d"), a = N(t, "filter", "conv3d");
  let l = i, c = !1;
  i.rank === 4 && (c = !0, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), k(a.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`), k(l.shape[4] === a.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`), k(je(e, o), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`), k(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dataFormat: r, dilations: o }, d = D.runKernel(ml, u, h);
  return c ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const sg = G({ conv3d_: HN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UN(n, t, e, s, r) {
  k(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let o = n, i = t, a = !1;
  t.rank === 4 && (a = !0, i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), o = [1, n[0], n[1], n[2], n[3]]);
  const l = o[4], c = i.shape[4];
  k(o.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`), k(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), k(e.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`), k(l === e.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`), k(c === e.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`);
  const u = { dy: i, filter: e }, h = { pad: r, strides: s, inputShape: o }, d = D.runKernel(uh, u, h);
  return a ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const sw = G({ conv3DBackpropInput_: UN });
function YN(n, t, e, s, r) {
  const o = N(n, "x", "conv3dTranspose"), i = N(t, "filter", "conv3dTranspose");
  return sw(e, o, i, s, r);
}
const rg = G({ conv3dTranspose_: YN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jN(n) {
  const e = { x: N(n, "x", "cos", "float32") };
  return D.runKernel(di, e);
}
const uc = G({ cos_: jN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JN(n) {
  const e = { x: N(n, "x", "cosh", "float32") };
  return D.runKernel(pi, e);
}
const fd = G({ cosh_: JN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QN(n, t = 0, e = !1, s = !1) {
  const o = { x: N(n, "x", "cumprod") }, i = { axis: t, exclusive: e, reverse: s };
  return D.runKernel(hh, o, i);
}
const Ha = G({ cumprod_: QN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qN(n, t = 0, e = !1, s = !1) {
  const o = { x: N(n, "x", "cumsum") }, i = { axis: t, exclusive: e, reverse: s };
  return D.runKernel(gl, o, i);
}
const md = G({ cumsum_: qN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tT(n, t, e, s = !1) {
  const r = N(n, "x", "denseBincount"), o = N(t, "weights", "denseBincount");
  k(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), k(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), k(e >= 0, () => `size must be non-negative, but got ${e}.`), k(o.size === r.size || o.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`);
  const i = { x: r, weights: o }, a = { size: e, binaryOutput: s };
  return D.runKernel(ph, i, a);
}
const rw = G({ denseBincount_: tT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eT(n, t, e = "NHWC") {
  const s = N(n, "x", "depthToSpace", "float32"), r = e === "NHWC" ? s.shape[1] : s.shape[2], o = e === "NHWC" ? s.shape[2] : s.shape[3], i = e === "NHWC" ? s.shape[3] : s.shape[1];
  k(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), k(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${s.shape}`), k(o * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t} for depthToSpace with input shape
        ${s.shape}`), k(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${s.shape}`);
  const a = { x: s }, l = { blockSize: t, dataFormat: e };
  return D.runKernel(fh, a, l);
}
const og = G({ depthToSpace_: eT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nT(n, t, e, s, r = "NHWC", o = [1, 1], i) {
  const a = N(n, "x", "depthwiseConv2d", "float32"), l = N(t, "filter", "depthwiseConv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = W(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), k(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  k(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), un("depthwiseConv2d", s, i);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: r, dilations: o, dimRoundingMode: i }, f = D.runKernel(yl, d, p);
  return u ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const qi = G({ depthwiseConv2d_: nT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sT(n) {
  const e = { x: N(n, "x", "diag") };
  return D.runKernel(yh, e);
}
const ow = G({ diag_: sT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rT(n, t, e, s, r = [1, 1], o = "NHWC") {
  const i = N(n, "x", "dilation2d"), a = N(t, "filter", "dilation2d");
  k(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), k(a.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`), k(o === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);
  let l = i, c = !1;
  i.rank === 3 && (l = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), c = !0);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dilations: r }, d = D.runKernel(bl, u, h);
  return c ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const ig = G({ dilation2d_: rT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oT(n, t) {
  let e = N(n, "a", "equal", "string_or_numeric"), s = N(t, "b", "equal", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(xl, r);
}
const Ln = G({ equal_: oT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iT(n, t, e) {
  const s = N(t, "a", "where"), r = N(e, "b", "where"), o = N(n, "condition", "where", "bool"), i = Et(Et(o.shape, s.shape), r.shape), a = gr(o, i), l = gr(s, i), c = gr(r, i), u = {
    condition: a,
    t: l,
    e: c
  };
  return D.runKernel(Yl, u);
}
const tn = G({ where_: iT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aT(n) {
  const e = { x: N(n, "x", "zerosLike") };
  return D.runKernel(sc, e);
}
const Xt = G({ zerosLike_: aT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lT(n, t) {
  let e = N(n, "a", "div"), s = N(t, "b", "div");
  [e, s] = xe(e, s);
  const r = St(e, s), o = Xt(r), i = Ln(s, o);
  return tn(i, o, r);
}
const ag = G({ divNoNan_: lT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cT(n, t) {
  const e = N(n, "t1", "dot"), s = N(t, "t2", "dot");
  k((e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);
  const r = e.rank === 1 ? e.size : e.shape[1], o = s.rank === 1 ? s.size : s.shape[0];
  if (k(r === o, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`), e.rank === 1 && s.rank === 1) {
    const i = W(e, [1, -1]), a = W(s, [-1, 1]), l = zt(i, a);
    return W(l, []);
  } else if (e.rank === 1 && s.rank === 2) {
    const i = W(e, [1, -1]), a = W(s, [s.shape[0], s.shape[1]]), l = zt(i, a);
    return W(l, [l.size]);
  } else if (e.rank === 2 && s.rank === 1) {
    const i = W(s, [-1, 1]), a = zt(e, i);
    return W(a, [a.size]);
  } else {
    const i = W(s, [s.shape[0], s.shape[1]]);
    return zt(e, i);
  }
}
const lg = G({ dot_: cT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uT(n, ...t) {
  const e = t.map((r, o) => N(r, `tensors${o}`, "einsum")), s = { equation: n };
  return D.runKernel(bh, e, s);
}
const iw = G({ einsum_: uT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hT(n) {
  const e = { x: N(n, "x", "elu", "float32") };
  return D.runKernel(mi, e);
}
const ta = G({ elu_: hT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dT(n) {
  let t = N(n, "x", "erf");
  k(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = ut(t, "float32"));
  const e = { x: t };
  return D.runKernel(gi, e);
}
const cg = G({ erf_: dT });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ug(n, t) {
  for (let e = 0; e < n.length; ++e)
    if (n[n.length - e - 1] !== t - 1 - e)
      return !1;
  return !0;
}
function aw(n, t, e) {
  const s = n.length + t.length, r = [];
  let o = 0, i = 0;
  for (let a = 0; a < s; a++)
    e.indexOf(a) === -1 ? r.push(n[o++]) : r.push(t[i++]);
  return r;
}
function ze(n, t) {
  const e = [], s = n.length;
  for (let o = 0; o < s; o++)
    t.indexOf(o) === -1 && e.push(n[o]);
  const r = t.map((o) => n[o]);
  return [e, r];
}
function ke(n, t) {
  const e = t.map((s) => 1);
  return aw(n, e, t);
}
function Je(n, t, e) {
  k(ug(t, e), () => `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`);
}
function we(n, t) {
  if (ug(n, t))
    return null;
  const e = [];
  for (let s = 0; s < t; ++s)
    n.indexOf(s) === -1 && e.push(s);
  return n.forEach((s) => e.push(s)), e;
}
function Dr(n) {
  return n.map((t, e) => [e, t]).sort((t, e) => t[1] - e[1]).map((t) => t[0]);
}
function Ne(n, t) {
  const e = [];
  for (let s = t - n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pT(n, t = null, e = !1) {
  const r = { x: N(n, "x", "max") }, o = { reductionIndices: t, keepDims: e };
  return D.runKernel(Ll, r, o);
}
const os = G({ max_: pT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fT(n, t = null, e = !1) {
  const r = { x: N(n, "x", "min") }, o = { axis: t, keepDims: e };
  return D.runKernel(Ol, r, o);
}
const Ua = G({ min_: fT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mT(n, t) {
  let e = N(n, "base", "pow"), s = N(t, "exp", "pow");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(Di, r);
}
const qs = G({ pow_: mT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nt(n, t) {
  if ((Be(n) && t !== "string" || Array.isArray(n)) && t !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && Be(n) && !(n instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Er(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gT(n) {
  const e = { x: N(n, "x", "sqrt", "float32") };
  return D.runKernel(Ki, e);
}
const Ue = G({ sqrt_: gT });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yT(n) {
  const t = N(n, "x", "square"), e = {};
  return D.runKernel("Square", { x: t }, e);
}
const qt = G({ square_: yT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bT(n, t = null, e = !1) {
  let s = N(n, "x", "sum");
  s.dtype === "bool" && (s = ut(s, "int32"));
  const r = { x: s }, o = { axis: t, keepDims: e };
  return D.runKernel(Jl, r, o);
}
const yt = G({ sum_: bT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xT(n, t = "euclidean", e = null, s = !1) {
  n = N(n, "x", "norm");
  const r = lw(n, t, e);
  let o = r.shape;
  if (s) {
    const i = At(e, n.shape);
    o = ke(r.shape, i);
  }
  return W(r, o);
}
function lw(n, t, e = null) {
  if (n.rank === 0)
    return $e(n);
  if (n.rank !== 1 && e === null)
    return lw(W(n, [-1]), t, e);
  if (n.rank === 1 || typeof e == "number" || Array.isArray(e) && e.length === 1) {
    if (t === 1)
      return yt($e(n), e);
    if (t === 1 / 0)
      return os($e(n), e);
    if (t === -1 / 0)
      return Ua($e(n), e);
    if (t === "euclidean" || t === 2)
      return Ue(yt(qs($e(n), Nt(2, "int32")), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(e) && e.length === 2) {
    if (t === 1)
      return os(yt($e(n), e[0]), e[1] - 1);
    if (t === 1 / 0)
      return os(yt($e(n), e[1]), e[0]);
    if (t === -1 / 0)
      return Ua(yt($e(n), e[1]), e[0]);
    if (t === "fro" || t === "euclidean")
      return Ue(yt(qt(n), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${e}`);
}
const ea = G({ norm_: xT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wT(n, t = null, e = !1) {
  return ea(n, "euclidean", t, e);
}
const hg = G({ euclideanNorm_: wT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IT(n) {
  const e = { x: N(n, "x", "exp") };
  return D.runKernel(yi, e);
}
const Dn = G({ exp_: IT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ST(n, t = 0) {
  const e = N(n, "x", "expandDims", "string_or_numeric");
  k(t <= e.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: e }, r = { dim: t };
  return D.runKernel(wl, s, r);
}
const pn = G({ expandDims_: ST });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vT(n) {
  const e = { x: N(n, "x", "expm1") };
  return D.runKernel(bi, e);
}
const dg = G({ expm1_: vT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CT(n, t) {
  const e = N(n, "x", "tile", "string_or_numeric");
  k(e.rank === t.length, () => `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);
  const s = { x: e }, r = { reps: t };
  return D.runKernel(Yi, s, r);
}
const Mn = G({ tile_: CT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kT(n, t, e, s = "float32") {
  t == null && (t = n);
  const r = $t([n, t], s), o = n <= t ? n : t;
  for (let a = 0; a < o; ++a)
    r.set(1, a, a);
  const i = W(r.toTensor(), [n, t]);
  if (e == null)
    return i;
  if (e.length === 1)
    return Mn(pn(i, 0), [e[0], 1, 1]);
  if (e.length === 2)
    return Mn(pn(pn(i, 0), 0), [e[0], e[1], 1, 1]);
  if (e.length === 3)
    return Mn(pn(pn(pn(i, 0), 0), 0), [
      e[0],
      e[1],
      e[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`);
}
const gd = G({ eye_: kT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NT(n) {
  const e = { x: N(n, "x", "floor", "float32") };
  return D.runKernel(xi, e);
}
const na = G({ floor_: NT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TT(n, t, e = 0, s = 0) {
  const r = N(n, "x", "gather"), o = N(t, "indices", "gather", "int32"), i = { x: r, indices: o }, a = { axis: e, batchDims: s };
  return D.runKernel(Sl, i, a);
}
const sa = G({ gather_: TT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $T(n, t) {
  let e = N(n, "a", "greater", "string_or_numeric"), s = N(t, "b", "greater", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(vl, r);
}
const In = G({ greater_: $T });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RT(n, t) {
  let e = N(n, "a", "greaterEqual", "string_or_numeric"), s = N(t, "b", "greaterEqual", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Ii, r);
}
const Gr = G({ greaterEqual_: RT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ET(n) {
  const e = { x: N(n, "x", "isFinite") };
  return D.runKernel(vi, e);
}
const pg = G({ isFinite_: ET });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LT(n) {
  const e = { x: N(n, "x", "isInf") };
  return D.runKernel(Ci, e);
}
const fg = G({ isInf_: LT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DT(n) {
  const e = { x: N(n, "x", "isNaN") };
  return D.runKernel(ki, e);
}
const mg = G({ isNaN_: DT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GT(n, t = 0.2) {
  const s = { x: N(n, "x", "leakyRelu") }, r = { alpha: t };
  return D.runKernel(Cl, s, r);
}
const hc = G({ leakyRelu_: GT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FT(n, t) {
  let e = N(n, "a", "less", "string_or_numeric"), s = N(t, "b", "less", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(kl, r);
}
const yd = G({ less_: FT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OT(n, t) {
  let e = N(n, "a", "lessEqual", "string_or_numeric"), s = N(t, "b", "lessEqual", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Nl, r);
}
const Fr = G({ lessEqual_: OT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cw(n, t, e) {
  if (e <= 0)
    throw new Error("The number of values should be positive.");
  const s = { start: n, stop: t, num: e };
  return D.runKernel(Nh, {}, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AT(n, t = 5, e = 1, s = 1, r = 0.5) {
  const o = N(n, "x", "localResponseNormalization");
  k(o.rank === 4 || o.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${o.rank}.`), k(to(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = o, a = !1;
  o.rank === 3 && (a = !0, i = W(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const l = { x: i }, c = { depthRadius: t, bias: e, alpha: s, beta: r }, u = D.runKernel(El, l, c);
  return a ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const gg = G({ localResponseNormalization_: AT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zT(n) {
  const e = { x: N(n, "x", "log", "float32") };
  return D.runKernel(Ni, e);
}
const Gn = G({ log_: zT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WT(n) {
  const e = { x: N(n, "x", "log1p") };
  return D.runKernel(Ti, e);
}
const dc = G({ log1p_: WT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VT(n) {
  return k(Ir(n), () => "The f passed in grad(f) must be a function"), (t, e) => {
    const s = N(t, "x", "tf.grad", "string_or_numeric"), r = e != null ? N(e, "dy", "tf.grad") : null;
    return D.tidy(() => {
      const { value: o, grads: i } = D.gradients(() => n(s), [s], r);
      return r != null && Ye(o.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), bd(i), i[0];
    });
  };
}
function PT(n) {
  return k(Ir(n), () => "The f passed in grads(f) must be a function"), (t, e) => {
    k(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const s = Ka(t, "args", "tf.grads", "string_or_numeric"), r = e != null ? N(e, "dy", "tf.grads") : null;
    return D.tidy(() => {
      const { value: o, grads: i } = D.gradients(() => n(...s), s, r);
      return r != null && Ye(o.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), bd(i), i;
    });
  };
}
function MT(n) {
  return k(Ir(n), () => "The f passed in valueAndGrad(f) must be a function"), (t, e) => {
    k(t instanceof Kt, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), k(e == null || e instanceof Kt, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: s, value: r } = D.gradients(() => n(t), [t], e);
    return bd(s), { grad: s[0], value: r };
  };
}
function XT(n) {
  return k(Ir(n), () => "The f passed in valueAndGrads(f) must be a function"), (t, e) => {
    k(Array.isArray(t) && t.every((r) => r instanceof Kt), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), k(e == null || e instanceof Kt, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const s = D.gradients(() => n(...t), t, e);
    return e != null && Ye(s.value.shape, e.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), bd(s.grads), s;
  };
}
function uw(n, t) {
  k(Ir(n), () => "The f passed in variableGrads(f) must be a function"), k(t == null || Array.isArray(t) && t.every((c) => c instanceof _a), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const e = t != null;
  if (!e) {
    t = [];
    for (const c in D.registeredVariables)
      t.push(D.registeredVariables[c]);
  }
  const s = e ? t.filter((c) => !c.trainable) : null, r = t.length;
  t = t.filter((c) => c.trainable), k(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  const o = !0, { value: i, grads: a } = D.gradients(n, t, null, o);
  k(a.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), k(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  const l = {};
  return t.forEach((c, u) => {
    a[u] != null && (l[c.name] = a[u]);
  }), s != null && s.forEach((c) => l[c.name] = null), { value: i, grads: l };
}
function As(n) {
  return D.customGrad(n);
}
function bd(n) {
  if (n.filter((e) => e == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _T(n) {
  const e = { x: N(n, "x", "softplus") };
  return D.runKernel(_i, e);
}
const xo = G({ softplus_: _T });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KT(n) {
  const t = N(n, "x", "logSigmoid");
  return As((s) => ({ value: ce(xo(ce(s))), gradFunc: (i) => A(i, gs(ce(s))) }))(t);
}
const yg = G({ logSigmoid_: KT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZT(n, t) {
  let e = N(n, "a", "sub"), s = N(t, "b", "sub");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(Bi, r);
}
const mt = G({ sub_: ZT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BT(n, t = -1) {
  const e = N(n, "logits", "logSoftmax");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);
  return As((r, o) => {
    const a = os(r, t, !0), l = mt(r, a), c = mt(ut(l, "float32"), Gn(yt(Dn(l), t, !0)));
    return o([c]), { value: c, gradFunc: (h, d) => {
      const [p] = d, f = !0, m = Dn(p);
      return mt(h, A(yt(h, t, f), m));
    } };
  })(e);
}
const xd = G({ logSoftmax_: BT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HT(n, t = null, e = !1) {
  const s = N(n, "x", "logSumExp"), r = At(t, s.shape), o = os(s, r, !0), i = mt(s, o), a = Dn(i), l = yt(a, r), c = Gn(l), u = nt(W(o, c.shape), c);
  if (e) {
    const h = ke(u.shape, r);
    return W(u, h);
  }
  return u;
}
const wd = G({ logSumExp_: HT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UT(n, t) {
  const e = N(n, "a", "logicalAnd", "bool"), s = N(t, "b", "logicalAnd", "bool");
  Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Tl, r);
}
const is = G({ logicalAnd_: UT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YT(n) {
  const e = { x: N(n, "x", "logicalNot", "bool") };
  return D.runKernel($l, e);
}
const pc = G({ logicalNot_: YT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jT(n, t) {
  const e = N(n, "a", "logicalOr", "bool"), s = N(t, "b", "logicalOr", "bool");
  Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Rl, r);
}
const Id = G({ logicalOr_: jT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JT(n, t) {
  const e = N(n, "a", "logicalXor", "bool"), s = N(t, "b", "logicalXor", "bool");
  return Et(e.shape, s.shape), is(Id(n, t), pc(is(n, t)));
}
const bg = G({ logicalXor_: JT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Uc = 2147483648;
function QT(n, t, e = "left") {
  const s = N(n, "sortedSequence", "searchSorted"), r = N(t, "values", "searchSorted"), o = s.shape[s.shape.length - 1], i = r.shape[r.shape.length - 1], a = W(s, [-1, o]), l = W(r, [-1, i]);
  if (a.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (a.shape[0] !== l.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (H(l.shape) >= Uc)
    throw new Error(`values tensor size must less than ${Uc}`);
  if (a.shape[1] >= Uc)
    throw new Error(`trailing dim_size must less than ${Uc} for int32 output type, was ${a.shape[1]}`);
  const c = {
    sortedSequence: a,
    values: l
  }, u = { side: e };
  return D.runKernel(Xh, c, u);
}
const Sd = G({ searchSorted_: QT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hw(n, t) {
  return Sd(n, t, "left");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qT(n, t, e, s, r) {
  const o = N(n, "x", "maxPool"), i = 1;
  let a = o, l = !1;
  o.rank === 3 && (l = !0, a = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), k(a.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`), k(je(e, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`), un("maxPool", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r }, h = D.runKernel(Dl, c, u);
  return l ? W(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const fc = G({ maxPool_: qT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t$(n, t = [1, 1, 1], e, s, r, o = "NDHWC") {
  const i = N(n, "x", "maxPool3d");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(a.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`), k(o === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), un("maxPool3d", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r, dataFormat: o }, h = D.runKernel(Gl, c, u);
  return l ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const xg = G({ maxPool3d_: t$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e$(n, t, e, s, r = !1) {
  const i = { x: N(n, "x", "maxPoolWithArgmax") }, a = { filterSize: t, strides: e, pad: s, includeBatchInIndex: r }, l = D.runKernel(Eh, i, a);
  return { result: l[0], indexes: l[1] };
}
const dw = G({ maxPoolWithArgmax_: e$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n$(n, t) {
  let e = N(n, "a", "maximum"), s = N(t, "b", "maximum");
  [e, s] = xe(e, s), e.dtype === "bool" && (e = ut(e, "int32"), s = ut(s, "int32")), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel($i, r);
}
const Ps = G({ maximum_: n$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s$(n, t = null, e = !1) {
  const r = { x: N(n, "x", "mean") }, o = { axis: t, keepDims: e };
  return D.runKernel(Fl, r, o);
}
const ye = G({ mean_: s$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Re(n, t = "float32") {
  if (t === "complex64") {
    const s = Re(n, "float32"), r = Re(n, "float32");
    return js(s, r);
  }
  const e = Ie(H(n), t);
  return D.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $n(n, t = "float32") {
  if (t === "complex64") {
    const s = $n(n, "float32"), r = Re(n, "float32");
    return js(s, r);
  }
  const e = th(H(n), t);
  return D.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pw(n, t, { indexing: e = "xy" } = {}) {
  if (e !== "xy" && e !== "ij")
    throw new TypeError(`${e} is not a valid third argument to meshgrid`);
  if (n === void 0)
    return [];
  let s = N(n, "x", "meshgrid", n instanceof Kt ? n.dtype : "float32");
  if (t === void 0)
    return [s];
  let r = N(t, "y", "meshgrid", t instanceof Kt ? t.dtype : "float32");
  const o = H(s.shape), i = H(r.shape);
  return e === "xy" ? (s = W(s, [1, -1]), r = W(r, [-1, 1]), [
    zt($n([i, 1], s.dtype), s),
    zt(r, $n([1, o], r.dtype))
  ]) : (s = W(s, [-1, 1]), r = W(r, [1, -1]), [
    zt(s, $n([1, i], s.dtype)),
    zt($n([o, 1], r.dtype), r)
  ]);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r$(n, t) {
  let e = N(n, "a", "minimum"), s = N(t, "b", "minimum");
  [e, s] = xe(e, s), e.dtype === "bool" && (e = ut(e, "int32"), s = ut(s, "int32")), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Ri, r);
}
const ra = G({ minimum_: r$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o$(n, t, e) {
  k(e === "reflect" || e === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);
  const s = N(n, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  k(t.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);
  const r = e === "reflect" ? 1 : 0;
  for (let a = 0; a < s.rank; a++)
    k(t[a].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), k(t[a][0] >= 0 && t[a][0] <= s.shape[a] - r && t[a][1] >= 0 && t[a][1] <= s.shape[a] - r, () => `Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a] - r} or less than 0 for input of shape ${s.shape}`);
  const o = { paddings: t, mode: e }, i = { x: s };
  return D.runKernel(Al, i, o);
}
const wg = G({ mirrorPad_: o$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i$(n, t) {
  let e = N(n, "a", "mod"), s = N(t, "b", "mod");
  [e, s] = xe(e, s);
  const r = { a: e, b: s };
  return D.runKernel(Ei, r);
}
const Ig = G({ mod_: i$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a$(n, t = null, e = !1) {
  n = N(n, "x", "moments");
  const s = At(t, n.shape), r = ye(n, s, e);
  let o = r.shape;
  e || (o = ke(r.shape, s));
  const i = qt(mt(ut(n, "float32"), W(r, o))), a = ye(i, s, e);
  return { mean: r, variance: a };
}
const mc = G({ moments_: a$ });
function l$(n, t, e, s) {
  const r = N(t, "data", "multiRNNCell"), o = Ka(e, "c", "multiRNNCell"), i = Ka(s, "h", "multiRNNCell");
  let a = r;
  const l = [];
  for (let h = 0; h < n.length; h++) {
    const d = n[h](a, o[h], i[h]);
    l.push(d[0]), l.push(d[1]), a = d[1];
  }
  const c = [], u = [];
  for (let h = 0; h < l.length; h += 2)
    c.push(l[h]), u.push(l[h + 1]);
  return [c, u];
}
const fw = G({ multiRNNCell_: l$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c$(n, t, e, s = !1) {
  const r = N(n, "logits", "multinomial"), o = r.size, i = r.rank;
  if (o < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);
  if (i > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
  e = e || Math.random();
  const l = { logits: i === 1 ? W(r, [1, -1]) : r }, c = { numSamples: t, seed: e, normalized: s }, u = D.runKernel(Lh, l, c);
  return i === 1 ? W(u, [u.size]) : u;
}
const mw = G({ multinomial_: c$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u$(n, t) {
  let e = N(n, "a", "notEqual", "string_or_numeric"), s = N(t, "b", "notEqual", "string_or_numeric");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s };
  return D.runKernel(Wl, r);
}
const io = G({ notEqual_: u$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h$(n) {
  const e = { x: N(n, "x", "onesLike") };
  return D.runKernel(Vl, e);
}
const Fn = G({ onesLike_: h$ });
function d$(n, t) {
  const e = N(n, "v1", "outerProduct"), s = N(t, "v2", "outerProduct");
  k(e.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);
  const r = W(e, [-1, 1]), o = W(s, [1, -1]);
  return zt(r, o);
}
const gw = G({ outerProduct_: d$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p$(n, t, e = 0) {
  const s = N(n, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const r = { paddings: t, constantValue: e }, o = { x: s };
  return D.runKernel(Xl, o, r);
}
const ir = G({ pad_: p$ });
function f$(n, t, e = 0) {
  return k(t.length === 2, () => "Invalid number of paddings. Must be length of 2."), ir(n, [t], e);
}
const yw = G({ pad1d_: f$ });
function m$(n, t, e = 0) {
  return k(t.length === 2 && t[0].length === 2 && t[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), ir(n, t, e);
}
const bw = G({ pad2d_: m$ });
function g$(n, t, e = 0) {
  return k(t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), ir(n, t, e);
}
const xw = G({ pad3d_: g$ });
function y$(n, t, e = 0) {
  return k(t.length === 4 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2 && t[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), ir(n, t, e);
}
const ww = G({ pad4d_: y$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b$(n, t, e) {
  const s = N(n, "x", "spaceToBatchND");
  k(s.rank >= 1 + t.length, () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`), k(e.length === t.length, () => `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`), k(s.shape.reduce((i, a, l) => l > 0 && l <= t.length ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0 : i, !0), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);
  const r = { x: s }, o = { blockShape: t, paddings: e };
  return D.runKernel(Ql, r, o);
}
const gc = G({ spaceToBatchND_: b$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x$(n, t, e, s, r, o, i) {
  r == null && (r = [1, 1]), o == null && (o = 1), s === 0 && (s = "valid");
  const a = N(n, "x", "maxPool");
  let l = a, c = !1;
  a.rank === 3 && (c = !0, l = W(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(je(o, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);
  const u = ls(l.shape, t, o, r, s), h = [u.dilationHeight, u.dilationWidth];
  let d;
  s === "same" ? d = I$([u.filterHeight, u.filterWidth], h) : d = [[0, 0], [0, 0]];
  const p = h[0] === 1 && h[1] === 1, [f, m] = w$([u.inHeight, u.inWidth], h, d), g = p ? s : "valid", y = p ? l : gc(l, h, f), w = (e === "avg" ? () => lc(y, t, o, g, i) : () => fc(y, t, o, g, i))(), x = p ? w : cc(w, h, m);
  return c ? W(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function w$(n, t, e) {
  const s = e.map((u) => u[0]), r = e.map((u) => u[1]), o = n.concat(s, r), i = t.map((u, h) => (u - o[h] % u) % u), a = r.map((u, h) => u + i[h]), l = t.map((u, h) => [s[h], a[h]]), c = t.map((u, h) => [0, i[h]]);
  return [l, c];
}
function I$(n, t) {
  const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1), r = s.map((i) => Math.floor(i / 2)), o = s.map((i, a) => i - r[a]);
  return s.map((i, a) => [r[a], o[a]]);
}
const Sg = G({ pool_: x$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S$(n, t) {
  const e = N(n, "x", "prelu"), s = N(t, "alpha", "prelu"), r = { x: e, alpha: s };
  return D.runKernel(_l, r);
}
const yc = G({ prelu_: S$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v$(n, t = null, e = !1) {
  let s = N(n, "x", "prod");
  s.dtype === "bool" && (s = ut(s, "int32"));
  const r = { x: s }, o = { axis: t, keepDims: e };
  return D.runKernel(Kl, r, o);
}
const vg = G({ prod_: v$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C$(n, t, e, s) {
  const r = n.map((u, h) => N(u, `tensors${h}`, "raggedGather", "int32")), o = N(t, "paramsDenseValues", "raggedGather"), i = N(e, "indices", "raggedGather", "int32"), a = {
    paramsNestedSplits: r,
    paramsDenseValues: o,
    indices: i
  }, l = { outputRaggedRank: s }, c = D.runKernel(Oh, a, l);
  return {
    outputNestedSplits: c.slice(0, c.length - 1),
    outputDenseValues: c[c.length - 1]
  };
}
const Iw = G({ raggedGather_: C$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k$(n, t, e, s, r) {
  const o = N(n, "shape", "raggedTensorToTensor", "int32"), i = N(t, "values", "raggedTensorToTensor"), a = N(e, "defaultValue", "raggedTensorToTensor", i.dtype), l = s.map((h, d) => N(h, `tensors${d}`, "raggedTensorToTensor", "int32")), c = {
    shape: o,
    values: i,
    defaultValue: a,
    rowPartitionTensors: l
  }, u = { rowPartitionTypes: r };
  return D.runKernel(Ah, c, u);
}
const Sw = G({ raggedTensorToTensor_: k$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N$(n, t, e) {
  const s = H(n);
  let r = null;
  if (e == null || e === "float32")
    r = new Float32Array(s);
  else if (e === "int32")
    r = new Int32Array(s);
  else if (e === "bool")
    r = new Uint8Array(s);
  else
    throw new Error(`Unknown data type ${e}`);
  for (let o = 0; o < s; o++)
    r[o] = t();
  return D.makeTensor(r, n, e);
}
const vw = G({ rand_: N$ });
var Cw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(l) {
      var c = this, u = a();
      c.next = function() {
        var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = h - (c.c = h | 0);
      }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
    }
    function o(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function i(l, c) {
      var u = new r(l), h = c && c.state, d = u.next;
      return d.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, d.double = function() {
        return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
      }, d.quick = d, h && (typeof h == "object" && o(h, u), d.state = function() {
        return o(u, {});
      }), d;
    }
    function a() {
      var l = 4022871197, c = function(u) {
        u = String(u);
        for (var h = 0; h < u.length; h++) {
          l += u.charCodeAt(h);
          var d = 0.02519603282416938 * l;
          l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.alea = i;
  })(
    Rr,
    n,
    !1
  );
})(Cw);
var kw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var h = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
      }, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor128 = i;
  })(
    Rr,
    n,
    !1
  );
})(kw);
var Nw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function o(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l.v = a.v, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorwow = i;
  })(
    Rr,
    n,
    !1
  );
})(Nw);
var Tw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this;
      l.next = function() {
        var u = l.x, h = l.i, d, p;
        return d = u[h], d ^= d >>> 7, p = d ^ d << 24, d = u[h + 1 & 7], p ^= d ^ d >>> 10, d = u[h + 3 & 7], p ^= d ^ d >>> 3, d = u[h + 4 & 7], p ^= d ^ d << 7, d = u[h + 7 & 7], d = d ^ d << 13, p ^= d ^ d << 9, u[h] = p, l.i = h + 1 & 7, p;
      };
      function c(u, h) {
        var d, p = [];
        if (h === (h | 0))
          p[0] = h;
        else
          for (h = "" + h, d = 0; d < h.length; ++d)
            p[d & 7] = p[d & 7] << 15 ^ h.charCodeAt(d) + p[d + 1 & 7] << 13;
        for (; p.length < 8; )
          p.push(0);
        for (d = 0; d < 8 && p[d] === 0; ++d)
          ;
        for (d == 8 ? p[7] = -1 : p[d], u.x = p, u.i = 0, d = 256; d > 0; --d)
          u.next();
      }
      c(l, a);
    }
    function o(a, l) {
      return l.x = a.x.slice(), l.i = a.i, l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.x && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorshift7 = i;
  })(
    Rr,
    n,
    !1
  );
})(Tw);
var $w = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this;
      l.next = function() {
        var u = l.w, h = l.X, d = l.i, p, f;
        return l.w = u = u + 1640531527 | 0, f = h[d + 34 & 127], p = h[d = d + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = h[d] = f ^ p, l.i = d, f + (u ^ u >>> 16) | 0;
      };
      function c(u, h) {
        var d, p, f, m, g, y = [], b = 128;
        for (h === (h | 0) ? (p = h, h = null) : (h = h + "\0", p = 0, b = Math.max(b, h.length)), f = 0, m = -32; m < b; ++m)
          h && (p ^= h.charCodeAt((m + 32) % h.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, d = y[m & 127] ^= p + g, f = d == 0 ? f + 1 : 0);
        for (f >= 128 && (y[(h && h.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m)
          p = y[f + 34 & 127], d = y[f = f + 1 & 127], p ^= p << 13, d ^= d << 17, p ^= p >>> 15, d ^= d >>> 12, y[f] = p ^ d;
        u.w = g, u.X = y, u.i = f;
      }
      c(l, a);
    }
    function o(a, l) {
      return l.i = a.i, l.w = a.w, l.X = a.X.slice(), l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.X && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor4096 = i;
  })(
    Rr,
    n,
    !1
  );
})($w);
var Rw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.b, d = l.c, p = l.d, f = l.a;
        return h = h << 25 ^ h >>> 7 ^ d, d = d - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - p | 0, l.d = p << 16 ^ d >>> 16 ^ f, l.a = f - h | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, a === Math.floor(a) ? (l.a = a / 4294967296 | 0, l.b = a | 0) : c += a;
      for (var u = 0; u < c.length + 20; u++)
        l.b ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(a, l) {
      return l.a = a.a, l.b = a.b, l.c = a.c, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.tychei = i;
  })(
    Rr,
    n,
    !1
  );
})(Rw);
var Ew = { exports: {} };
const T$ = {}, $$ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: T$
}, Symbol.toStringTag, { value: "Module" })), R$ = /* @__PURE__ */ x2($$);
(function(n) {
  (function(t, e, s) {
    var r = 256, o = 6, i = 52, a = "random", l = s.pow(r, o), c = s.pow(2, i), u = c * 2, h = r - 1, d;
    function p(x, S, v) {
      var T = [];
      S = S == !0 ? { entropy: !0 } : S || {};
      var $ = y(g(
        S.entropy ? [x, w(e)] : x == null ? b() : x,
        3
      ), T), R = new f(T), E = function() {
        for (var V = R.g(o), X = l, _ = 0; V < c; )
          V = (V + _) * r, X *= r, _ = R.g(1);
        for (; V >= u; )
          V /= 2, X /= 2, _ >>>= 1;
        return (V + _) / X;
      };
      return E.int32 = function() {
        return R.g(4) | 0;
      }, E.quick = function() {
        return R.g(4) / 4294967296;
      }, E.double = E, y(w(R.S), e), (S.pass || v || function(V, X, _, B) {
        return B && (B.S && m(B, R), V.state = function() {
          return m(R, {});
        }), _ ? (s[a] = V, X) : V;
      })(
        E,
        $,
        "global" in S ? S.global : this == s,
        S.state
      );
    }
    function f(x) {
      var S, v = x.length, T = this, $ = 0, R = T.i = T.j = 0, E = T.S = [];
      for (v || (x = [v++]); $ < r; )
        E[$] = $++;
      for ($ = 0; $ < r; $++)
        E[$] = E[R = h & R + x[$ % v] + (S = E[$])], E[R] = S;
      (T.g = function(V) {
        for (var X, _ = 0, B = T.i, U = T.j, Y = T.S; V--; )
          X = Y[B = h & B + 1], _ = _ * r + Y[h & (Y[B] = Y[U = h & U + X]) + (Y[U] = X)];
        return T.i = B, T.j = U, _;
      })(r);
    }
    function m(x, S) {
      return S.i = x.i, S.j = x.j, S.S = x.S.slice(), S;
    }
    function g(x, S) {
      var v = [], T = typeof x, $;
      if (S && T == "object")
        for ($ in x)
          try {
            v.push(g(x[$], S - 1));
          } catch {
          }
      return v.length ? v : T == "string" ? x : x + "\0";
    }
    function y(x, S) {
      for (var v = x + "", T, $ = 0; $ < v.length; )
        S[h & $] = h & (T ^= S[h & $] * 19) + v.charCodeAt($++);
      return w(S);
    }
    function b() {
      try {
        var x;
        return d && (x = d.randomBytes) ? x = x(r) : (x = new Uint8Array(r), (t.crypto || t.msCrypto).getRandomValues(x)), w(x);
      } catch {
        var S = t.navigator, v = S && S.plugins;
        return [+new Date(), t, v, t.screen, w(e)];
      }
    }
    function w(x) {
      return String.fromCharCode.apply(0, x);
    }
    if (y(s.random(), e), n.exports) {
      n.exports = p;
      try {
        d = R$;
      } catch {
      }
    } else
      s["seed" + a] = p;
  })(
    typeof self < "u" ? self : Rr,
    [],
    Math
  );
})(Ew);
var E$ = Cw.exports, L$ = kw.exports, D$ = Nw.exports, G$ = Tw.exports, F$ = $w.exports, O$ = Rw.exports, wo = Ew.exports;
wo.alea = E$;
wo.xor128 = L$;
wo.xorwow = D$;
wo.xorshift7 = G$;
wo.xor4096 = F$;
wo.tychei = O$;
var oa = wo;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Cg {
  constructor(t, e, s, r, o) {
    this.mean = t, this.stdDev = e, this.dtype = s, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const i = o || Math.random();
    this.random = oa.alea(i.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const r = this.nextVal;
      return this.nextVal = NaN, r;
    }
    let t, e, s = !1;
    for (; !s; ) {
      let r, o, i;
      do
        r = 2 * this.random() - 1, o = 2 * this.random() - 1, i = r * r + o * o;
      while (i >= 1 || i === 0);
      const a = Math.sqrt(-2 * Math.log(i) / i);
      t = this.mean + this.stdDev * r * a, e = this.mean + this.stdDev * o * a, (!this.truncated || this.isValidTruncated(t)) && (s = !0);
    }
    return (!this.truncated || this.isValidTruncated(e)) && (this.nextVal = this.convertValue(e)), this.convertValue(t);
  }
  convertValue(t) {
    return this.dtype == null || this.dtype === "float32" ? t : Math.round(t);
  }
  isValidTruncated(t) {
    return t <= this.upper && t >= this.lower;
  }
}
class A$ {
  constructor(t, e, s, r) {
    this.alpha = t, this.beta = 1 / e, this.dtype = s;
    const o = r || Math.random();
    this.randu = oa.alea(o.toString()), this.randn = new Cg(0, 1, s, !1, this.randu()), t < 1 ? this.d = t + 2 / 3 : this.d = t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let t, e, s, r, o, i;
    for (; ; ) {
      do
        r = this.randn.nextValue(), i = 1 + this.c * r;
      while (i <= 0);
      if (i *= i * i, t = r * r, e = 1 - 0.331 * t * t, s = 0.5 * t + this.d * (1 - i + Math.log(i)), o = this.randu(), o < e || Math.log(o) < s)
        break;
    }
    return i = 1 / this.beta * this.d * i, this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(i);
  }
  convertValue(t) {
    return this.dtype === "float32" ? t : Math.round(t);
  }
}
class z$ {
  constructor(t = 0, e = 1, s, r) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = t, this.range = e - t, this.dtype = s, r == null && (r = Math.random()), typeof r == "number" && (r = r.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);
    this.random = oa.alea(r);
  }
  convertValue(t) {
    return this.canReturnFloat() ? t : Math.round(t);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W$(n, t, e = 1, s = "float32", r) {
  if (e == null && (e = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32")
    throw new Error(`Unsupported data type ${s}`);
  const o = new A$(t, e, s, r), i = $t(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const Lw = G({ randomGamma_: W$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V$(n, t = 0, e = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  const o = new Cg(t, e, s, !1, r), i = $t(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const vd = G({ randomNormal_: V$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P$(n, t, e) {
  if (t != null && t === "bool")
    throw new Error(`Unsupported data type ${t}`);
  return vd(n, 0, 1, t, e);
}
const Dw = G({ randomStandardNormal_: P$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M$(n, t = 0, e = 1, s = "float32", r) {
  const o = $t(n, s), i = new z$(t, e, null, r);
  for (let a = 0; a < o.values.length; a++)
    o.values[a] = i.nextValue();
  return o.toTensor();
}
const ia = G({ randomUniform_: M$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _o(n, t, e = 1, s = "float32") {
  if (e === 0)
    throw new Error("Cannot have a step of zero");
  const r = { start: n, stop: t, step: e, dtype: s };
  return D.runKernel(zh, {}, r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X$(n) {
  const e = { x: N(n, "x", "reciprocal") };
  return D.runKernel(Gi, e);
}
const kg = G({ reciprocal_: X$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _$(n) {
  const e = { x: N(n, "x", "relu") };
  return D.runKernel(Fi, e);
}
const vs = G({ relu_: _$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K$(n) {
  const e = { x: N(n, "x", "relu6") };
  return D.runKernel(Oi, e);
}
const Cd = G({ relu6_: K$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z$(n, t) {
  const s = { x: N(n, "x", "reverse") }, r = { dims: t };
  return D.runKernel(Ul, s, r);
}
const Zn = G({ reverse_: Z$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B$(n) {
  const t = N(n, "x", "reverse");
  return k(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), Zn(t, 0);
}
const Gw = G({ reverse1d_: B$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H$(n, t) {
  const e = N(n, "x", "reverse");
  return k(e.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`), Zn(e, t);
}
const Fw = G({ reverse2d_: H$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U$(n, t) {
  const e = N(n, "x", "reverse");
  return k(e.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`), Zn(e, t);
}
const Ow = G({ reverse3d_: U$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y$(n, t) {
  const e = N(n, "x", "reverse");
  return k(e.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`), Zn(e, t);
}
const Aw = G({ reverse4d_: Y$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j$(n) {
  const e = { x: N(n, "x", "round") };
  return D.runKernel(Ai, e);
}
const kd = G({ round_: j$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J$(n) {
  const e = { x: N(n, "x", "rsqrt", "float32") };
  return D.runKernel(zi, e);
}
const Nd = G({ rsqrt_: J$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q$(n) {
  const e = { x: N(n, "x", "selu") };
  return D.runKernel(Wi, e);
}
const Td = G({ selu_: Q$ });
function q$(n, t, e, s, r, o = [1, 1], i = "NHWC") {
  const a = N(n, "x", "separableConv2d"), l = N(t, "depthwiseFilter", "separableConv2d"), c = N(e, "pointwiseFilter", "separableConv2d");
  let u = a, h = !1;
  if (a.rank === 3 && (h = !0, u = W(a, [1, a.shape[0], a.shape[1], a.shape[2]])), i === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  k(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), k(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), k(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), k(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), k(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const d = l.shape[2], p = l.shape[3];
  k(c.shape[2] === d * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * p}, but got ${c.shape[2]}.`);
  const f = qi(u, l, s, r, i, o), g = Qs(f, c, 1, "valid", i);
  return h ? W(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const $d = G({ separableConv2d_: q$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function tR(n, t) {
  const e = N(n, "x", "setdiff1d"), s = N(t, "y", "setdiff1d");
  k(e.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`), k(e.rank === 1, () => `x should be 1D tensor, but got x (${e.shape}).`), k(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
  const r = await e.data(), o = await s.data(), i = new Set(o);
  let a = 0;
  for (let u = 0; u < r.length; u++)
    i.has(r[u]) || a++;
  const l = new ve([a], e.dtype), c = new ve([a], "int32");
  for (let u = 0, h = 0; u < r.length; u++)
    i.has(r[u]) || (l.values[h] = r[u], c.values[h] = u, h++);
  return [l.toTensor(), c.toTensor()];
}
const zw = tR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eR(n) {
  const e = { x: N(n, "x", "sign") };
  return D.runKernel(Mi, e);
}
const Ng = G({ sign_: eR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nR(n) {
  const e = { x: N(n, "x", "sin", "float32") };
  return D.runKernel(Vi, e);
}
const Rd = G({ sin_: nR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sR(n) {
  const e = { x: N(n, "x", "sinh") };
  return D.runKernel(Pi, e);
}
const Ed = G({ sinh_: sR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rR(n, t, e) {
  const s = N(n, "x", "slice1d");
  return k(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), Mt(s, [t], [e]);
}
const bc = G({ slice1d_: rR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oR(n, t, e) {
  const s = N(n, "x", "slice2d");
  return k(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), Mt(s, t, e);
}
const Ld = G({ slice2d_: oR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iR(n, t, e) {
  const s = N(n, "x", "slice3d");
  return k(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), Mt(s, t, e);
}
const xc = G({ slice3d_: iR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aR(n, t, e) {
  const s = N(n, "x", "slice4d");
  return k(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), Mt(s, t, e);
}
const Ko = G({ slice4d_: aR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lR(n, t = -1) {
  const e = N(n, "logits", "softmax", "float32");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);
  const s = { logits: e }, r = { dim: t };
  return D.runKernel(tc, s, r);
}
const wc = G({ softmax_: lR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cR(n) {
  k(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return D.runKernel(wh, t);
}
const Ic = G({ fft_: cR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uR(n) {
  k(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return D.runKernel(Ch, t);
}
const Zo = G({ ifft_: uR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hR(n) {
  const t = n.shape[n.shape.length - 1], e = n.size / t;
  let s;
  if (t <= 2) {
    const r = W(n, [e, t]);
    s = Zo(r);
  } else {
    const r = [e, 2 * (t - 1)], o = W(Xo(n), [e, t]), i = W(ic(n), [e, t]), a = Zn(Mt(o, [0, 1], [e, t - 2]), 1), l = A(Zn(Mt(i, [0, 1], [e, t - 2]), 1), Nt(-1)), c = Ce([o, a], 1), u = Ce([i, l], 1), h = W(js(c, u), [r[0], r[1]]);
    s = Zo(h);
  }
  if (s = Xo(s), n.rank === 3 && n.shape[0] !== 0) {
    const r = s, o = n.shape[0];
    s = W(s, [o, s.shape[0] / o, s.shape[1]]), r.dispose();
  }
  return s;
}
const Dd = G({ irfft_: hR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dR(n, t, e = 0) {
  const r = { x: N(n, "x", "split") }, o = { numOrSizeSplits: t, axis: e };
  return D.runKernel(ql, r, o);
}
const mn = G({ split_: dR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pR(n, t) {
  k(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let e = n.shape[n.shape.length - 1];
  const s = n.size / e;
  let r;
  if (t != null && t < e) {
    const f = n.shape.map((g) => 0), m = n.shape.map((g) => g);
    m[n.shape.length - 1] = t, r = Mt(n, f, m), e = t;
  } else if (t != null && t > e) {
    const f = n.shape.map((m) => m);
    f[n.shape.length - 1] = t - e, r = Ce([n, Re(f)], n.shape.length - 1), e = t;
  } else
    r = n;
  const o = Xt(r), i = W(js(r, o), [s, e]), a = Ic(i), l = Math.floor(e / 2) + 1, c = Xo(a), u = ic(a), h = mn(c, [l, e - l], c.shape.length - 1), d = mn(u, [l, e - l], u.shape.length - 1), p = r.shape.slice();
  return p[r.shape.length - 1] = l, W(js(h[0], d[0]), p);
}
const Sc = G({ rfft_: pR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fR(n, t) {
  let e = N(n, "a", "squaredDifference"), s = N(t, "b", "squaredDifference");
  [e, s] = xe(e, s), Et(e.shape, s.shape);
  const r = { a: e, b: s }, o = {};
  return D.runKernel(Zi, r, o);
}
const Gd = G({ squaredDifference_: fR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mR(n, t) {
  const e = N(n, "x", "squeeze", "string_or_numeric");
  return W(e, nr(e.shape, t).newShape);
}
const Or = G({ squeeze_: mR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gR(n, t = 0) {
  const e = Ka(n, "tensors", "stack", "string_or_numeric");
  k(e.length >= 1, () => "Pass at least one tensor to tf.stack"), e.length > 0 && k(t <= e[0].rank, () => "Axis must be <= rank of the tensor");
  const s = e, r = { axis: t };
  return D.runKernel(Ml, s, r);
}
const yn = G({ stack_: gR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yR(n, t = 0) {
  const s = { x: N(n, "x", "step") }, r = { alpha: t };
  return D.runKernel(ji, s, r);
}
const Io = G({ step_: yR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bR(n, t, e, s, r = 0, o = 0, i = 0, a = 0, l = 0) {
  const u = { x: N(n, "x", "stridedSlice", "string_or_numeric") }, h = {
    begin: t,
    end: e,
    strides: s,
    beginMask: r,
    endMask: o,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  return D.runKernel(Yh, u, h);
}
const Tg = G({ stridedSlice_: bR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xR(n) {
  const e = { x: N(n, "x", "tan", "float32") };
  return D.runKernel(Hi, e);
}
const $g = G({ tan_: xR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qe(n, t) {
  fo(n);
  const e = Os(n, t);
  if (e.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Er(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yr(n, t, e) {
  if (fo(n), t != null && t.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const s = Os(n, e);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ww(n, t, e) {
  if (fo(n), t != null && t.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  const s = Os(n, e);
  if (s.length !== 4 && s.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vw(n, t, e) {
  if (fo(n), t != null && t.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  const s = Os(n, e);
  if (s.length !== 5 && s.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pw(n, t, e) {
  if (fo(n), t != null && t.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  const s = Os(n, e);
  if (s.length !== 6 && s.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return t = t || s, Er(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wR(n, t = 1, e = !0) {
  const s = N(n, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const r = s.shape[s.shape.length - 1];
  if (t < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > r)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);
  const o = { x: s }, i = { k: t, sorted: e }, [a, l] = D.runKernel(qh, o, i);
  return { values: a, indices: l };
}
const Rg = G({ topk_: wR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IR(n, t = 0, e = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const o = new Cg(t, e, s, !0, r), i = $t(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const Fd = G({ truncatedNormal_: IR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SR(n, t = 0) {
  const e = N(n, "x", "unique", "string_or_numeric");
  k(e.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: e }, r = { axis: t }, [o, i] = D.runKernel(ed, s, r);
  return { values: o, indices: i };
}
const Eg = G({ unique_: SR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vR(n, t, e) {
  const s = N(n, "x", "unsortedSegmentSum"), r = N(t, "segmentIds", "unsortedSegmentSum", "int32");
  k(to(e), () => "numSegments must be of dtype int");
  const o = { x: s, segmentIds: r }, i = { numSegments: e };
  return D.runKernel(nc, o, i);
}
const Od = G({ unsortedSegmentSum_: vR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CR(n, t = 0) {
  const e = N(n, "x", "unstack", "string_or_numeric");
  k(t >= -e.shape.length && t < e.shape.length, () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);
  const s = { value: e }, r = { axis: t };
  return D.runKernel(ec, s, r);
}
const as = G({ unstack_: CR });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mw(n, t) {
  return Sd(n, t, "right");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lg(n, t = !0, e, s) {
  return D.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ad(n, t) {
  const e = [];
  for (let o = 0; o < t.length; o++)
    t[o] && e.push(o);
  const s = $t(n, "int32"), r = $t([e.length, n.length], "int32");
  for (let o = 0; o < e.length; o++) {
    const i = s.indexToLoc(e[o]), a = o * n.length;
    r.values.set(i, a);
  }
  return r.toTensor();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function kR(n) {
  const t = N(n, "condition", "whereAsync", "bool"), e = await t.data(), s = Ad(t.shape, e);
  return n !== t && t.dispose(), s;
}
const Dg = kR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function NR(n, t, e) {
  const s = N(n, "tensor", "boolMask"), r = N(t, "mask", "boolMask", "bool"), o = e == null ? 0 : e, i = r.rank, a = s.shape;
  k(i > 0, () => "mask cannot be scalar"), Ye(a.slice(o, o + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let m = o; m < o + i; m++)
    l *= a[m];
  const c = a.slice(0, o).concat([l], a.slice(o + i)), u = W(s, c), h = W(r, [-1]), d = await Dg(h), p = Or(d, [1]), f = sa(u, p, o);
  return n !== s && s.dispose(), t !== r && r.dispose(), p.dispose(), u.dispose(), h.dispose(), d.dispose(), f;
}
const Xw = NR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TR(n, t, e, s, r = !0) {
  const o = N(n, "v", "movingAverage"), i = N(t, "x", "movingAverage"), a = N(e, "decay", "movingAverage");
  I1(o, i), k(Vt(o.shape, i.shape), () => "Shape mismatch in v and x");
  const l = Nt(1), c = mt(l, a);
  let u = A(mt(i, o), c);
  if (r) {
    k(s != null, () => "When using zeroDebias: true, step is required.");
    const h = N(s, "step", "movingAverage");
    u = St(u, mt(l, qs(a, h)));
  }
  return nt(o, u);
}
const _w = G({ movingAverage_: TR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $R(n, t, e) {
  const s = N(n, "indices", "scatterND", "int32"), r = N(t, "updates", "scatterND");
  Lm(r, s, e);
  const o = { indices: s, updates: r }, i = { shape: e };
  return D.runKernel(Mh, o, i);
}
const Kw = G({ scatterND_: $R });
function RR(n, t, e, s) {
  if (n.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);
  if (n.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);
  const r = n.rank > 0 ? n.shape[0] : 1, o = n.rank > 1 ? n.shape[1] : 1;
  if (e.length !== o)
    throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);
  const i = t.size;
  if (!(t.rank === 0 || t.rank === 1 && i === r))
    throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);
  if (t.dtype !== s.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ER(n, t, e, s = 0) {
  const r = N(n, "sparseIndices", "sparseToDense", "int32"), o = N(t, "sparseValues", "sparseToDense", "string_or_numeric"), i = N(s, "defaultValue", "sparseToDense", o.dtype);
  RR(r, o, e, i);
  const a = {
    sparseIndices: r,
    sparseValues: o,
    defaultValue: i
  }, l = { outputShape: e };
  return D.runKernel(Hh, a, l);
}
const Zw = G({ sparseToDense_: ER });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LR(n, t) {
  const e = N(t, "indices", "gatherND", "int32"), r = { params: N(n, "x", "gatherND", "string_or_numeric"), indices: e };
  return D.runKernel(vh, r);
}
const Bw = G({ gatherND_: LR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DR(n, t) {
  if (t == null)
    return n.shape.slice();
  if (Vt(n.shape, t))
    return t;
  if (n.shape.length === t.length) {
    const e = [];
    for (let s = 0; s < n.shape.length; s++)
      t[s] == null && n.shape[s] != null ? e.push(n.shape[s]) : e.push(t[s]);
    return e;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GR(n, t, e, s) {
  const r = N(n, "x", "dropout");
  if (k(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), k(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0)
    return n instanceof Kt ? r.clone() : r;
  const o = DR(r, e), i = 1 - t, a = St(na(nt(ia(o, 0, 1, "float32", s), i)), i);
  return A(r, a);
}
const Gg = G({ dropout_: GR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fg(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function zd(n, t, e) {
  const s = 1 - n % 2, r = new Float32Array(n);
  for (let o = 0; o < n; ++o) {
    const i = 2 * Math.PI * o / (n + s - 1);
    r[o] = t - e * Math.cos(i);
  }
  return qe(r, "float32");
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function FR(n, t, e = 1) {
  const s = N(n, "predictions", "inTopK"), r = N(t, "targets", "inTopK");
  k(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), k(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), Ye(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  const o = s.shape[s.shape.length - 1];
  k(e > 0 && e <= o, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);
  const i = await s.data(), a = await r.data(), [l, c] = [i.length / o, o], u = ue("bool", l);
  for (let h = 0; h < l; h++) {
    const d = h * c, p = i.subarray(d, d + c), f = [];
    for (let m = 0; m < p.length; m++)
      f.push({ value: p[m], index: m });
    f.sort((m, g) => g.value - m.value), u[h] = 0;
    for (let m = 0; m < e; m++)
      if (f[m].index === a[h]) {
        u[h] = 1;
        break;
      }
  }
  return n !== s && s.dispose(), t !== r && r.dispose(), ge(u, r.shape, "bool");
}
const Hw = FR;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OR(n, t, e, s, r, o = "NHWC", i) {
  let a = n;
  n.rank === 3 && (a = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])), k(a.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`), k(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), k(e.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);
  const c = o === "NHWC" ? a.shape[3] : a.shape[1], u = o === "NHWC" ? l.shape[3] : l.shape[1];
  k(c === e[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`), k(u === e[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`), un("conv2dDerFilter", r, i);
  const h = { x: a, dy: l }, d = { strides: s, pad: r, dataFormat: o, dimRoundingMode: i, filterShape: e };
  return D.runKernel(lh, h, d);
}
const Og = G({ conv2DBackpropFilter_: OR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wd(n, t, e) {
  if (e == null || e === "linear")
    return n;
  if (e === "relu")
    return A(n, Io(t));
  throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function Vd(n, t) {
  let e = t;
  const s = Le(n.shape, t.shape);
  return s.length > 0 && (e = yt(e, s)), W(e, n.shape);
}
function Pd(n, t, e, s) {
  if (t === "linear")
    return n;
  if (t === "relu")
    return vs(n);
  if (t === "elu")
    return ta(n);
  if (t === "relu6")
    return Cd(n);
  if (t === "prelu")
    return yc(n, e);
  if (t === "leakyrelu")
    return hc(n, s);
  if (t === "sigmoid")
    return gs(n);
  throw new Error(`Unknown fused activation ${t}.`);
}
const Md = (n, t) => !(n > 0) || t === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AR({ x: n, filter: t, strides: e, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (l = l || "linear", Md(D.state.gradientDepth, l) === !1) {
    k(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let v = Qs(n, t, e, s, r, o, i);
    return a != null && (v = nt(v, a)), Pd(v, l, c, u);
  }
  const h = N(n, "x", "conv2d", "float32"), d = N(t, "filter", "conv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = W(h, [1, h.shape[0], h.shape[1], h.shape[2]])), k(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), k(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), un("fused conv2d", s, i);
  const m = r === "NHWC" ? p.shape[3] : p.shape[1];
  k(d.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`), k(je(e, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);
  const g = _e(p.shape, d.shape, e, o, s, i);
  let y;
  a != null && (y = N(a, "bias", "fused conv2d"), [y] = xe(y, h), r === "NHWC" ? Et(g.outShape, y.shape) : (k(y.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`), k(y.shape.length === 0 || y.shape[0] === g.outChannels || y.shape[0] === 1, () => `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (c != null) {
    const v = c.shape;
    if (k(v.length <= 1 || v.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${v.length}.`), v.length === 1)
      k(v[0] === 1 || v[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (v.length === 3)
      try {
        Et(v, g.outShape);
      } catch {
        const $ = `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error($);
      }
    b = N(c, "prelu weights", "fused conv2d");
  }
  const w = (v, T) => {
    k(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
    const [$, R, E, V] = T, X = Wd(v, E, l);
    k(vr(o), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);
    const _ = ng(R.shape, X, $, e, s), B = Og(R, X, $.shape, e, s), U = [_, B];
    if (V != null) {
      const Y = Vd(V, X);
      U.push(Y);
    }
    return U;
  }, x = {
    x: p,
    filter: d,
    bias: y,
    preluActivationWeights: b
  }, S = {
    strides: e,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? As((T, $, R) => {
    let E = D.runKernel(Pa, x, S);
    return R([$, T, E]), f && (E = W(E, [E.shape[1], E.shape[2], E.shape[3]])), { value: E, gradFunc: w };
  })(p, d) : As((T, $, R, E) => {
    let V = D.runKernel(Pa, x, S);
    return E([$, T, V, R]), f && (V = W(V, [V.shape[1], V.shape[2], V.shape[3]])), { value: V, gradFunc: w };
  })(p, d, y);
}
const Uw = G({ fusedConv2d_: AR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zR(n, t, e, s, r, o = [1, 1], i) {
  let a = n;
  n.rank === 3 && (a = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { x: a, dy: l }, u = { strides: s, pad: r, dimRoundingMode: i, dilations: o, filterShape: e };
  return D.runKernel(mh, c, u);
}
const Yw = G({ depthwiseConv2dNativeBackpropFilter_: zR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WR(n, t, e, s, r, o = [1, 1], i) {
  let a = t, l = !1;
  t.rank === 3 && (l = !0, a = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { dy: a, filter: e }, u = { strides: s, pad: r, dimRoundingMode: i, dilations: o, inputShape: n }, h = D.runKernel(gh, c, u);
  return l ? W(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const jw = G({ depthwiseConv2dNativeBackpropInput_: WR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VR({ x: n, filter: t, strides: e, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (Md(D.state.gradientDepth, l) === !1) {
    let S = qi(n, t, e, s, r, o, i);
    return a != null && (S = nt(S, a)), Pd(S, l, c, u);
  }
  const h = N(n, "x", "depthwiseConv2d", "float32"), d = N(t, "filter", "depthwiseConv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = W(h, [1, h.shape[0], h.shape[1], h.shape[2]])), k(p.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`), k(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), k(p.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), o == null && (o = [1, 1]), k(je(e, o), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`), un("fused depthwiseConv2d", s, i);
  const m = _e(p.shape, d.shape, e, o, s, i, !0);
  let g;
  a != null && (g = N(a, "bias", "fused conv2d"), [g] = xe(g, h), Et(m.outShape, g.shape));
  let y;
  c != null && (y = N(c, "prelu weights", "fused depthwiseConv2d"));
  const b = (S, v) => {
    k(vr(o), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
    const [T, $, R, E] = v, V = Wd(S, R, l), X = jw($.shape, V, T, e, s, o, i), _ = Yw($, V, T.shape, e, s, o, i);
    if (E != null) {
      const B = Vd(g, V);
      return [X, _, B];
    }
    return [X, _];
  }, w = {
    x: p,
    filter: d,
    bias: g,
    preluActivationWeights: y
  }, x = {
    strides: e,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? As((v, T, $) => {
    let R = D.runKernel(Ma, w, x);
    return $([T, v, R]), f && (R = W(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: b };
  })(p, d) : As((v, T, $, R) => {
    let E = D.runKernel(Ma, w, x);
    return R([T, v, E, $]), f && (E = W(E, [E.shape[1], E.shape[2], E.shape[3]])), { value: E, gradFunc: b };
  })(p, d, g);
}
const PR = G({ fusedDepthwiseConv2d_: VR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MR({ a: n, b: t, transposeA: e = !1, transposeB: s = !1, bias: r, activation: o = "linear", preluActivationWeights: i, leakyreluAlpha: a = 0.2 }) {
  if (Md(D.state.gradientDepth, o) === !1) {
    let V = zt(n, t, e, s);
    return r != null && (V = nt(V, r)), Pd(V, o, i, a);
  }
  let l = N(n, "a", "fused matMul"), c = N(t, "b", "fused matMul");
  [l, c] = xe(l, c);
  const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], d = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), m = c.shape.slice(0, -2), g = H(f), y = H(m);
  k(u === h, () => `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const w = Et(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([d, p]), x = e ? W(l, [g, u, d]) : W(l, [g, d, u]), S = s ? W(c, [y, p, h]) : W(c, [y, h, p]);
  let v;
  r != null && (v = N(r, "bias", "fused matMul"), [v] = xe(v, l), Et(w, v.shape));
  let T;
  i != null && (T = N(i, "prelu weights", "fused matMul"));
  const $ = (V, X) => {
    const [_, B, U, Y] = X, tt = Wd(W(V, U.shape), U, o);
    let J, et;
    if (!e && !s ? (J = zt(tt, B, !1, !0), et = zt(_, tt, !0, !1)) : !e && s ? (J = zt(tt, B, !1, !1), et = zt(tt, _, !0, !1)) : e && !s ? (J = zt(B, tt, !1, !0), et = zt(_, tt, !1, !1)) : (J = zt(B, tt, !0, !0), et = zt(tt, _, !0, !0)), r != null) {
      const rt = Vd(Y, tt);
      return [J, et, rt];
    } else
      return [J, et];
  }, R = {
    a: x,
    b: S,
    bias: v,
    preluActivationWeights: T
  }, E = { transposeA: e, transposeB: s, activation: o, leakyreluAlpha: a };
  return r == null ? As((X, _, B) => {
    const U = D.runKernel(Va, R, E);
    return B([X, _, U]), { value: W(U, w), gradFunc: $ };
  })(x, S) : As((X, _, B, U) => {
    const Y = D.runKernel(Va, R, E);
    return U([X, _, Y, B]), { value: W(Y, w), gradFunc: $ };
  })(x, S, v);
}
const $f = G({ fusedMatMul_: MR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Jw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  conv2d: Uw,
  depthwiseConv2d: PR,
  matMul: $f
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XR(n) {
  return zd(n, 0.54, 0.46);
}
const _R = G({ hammingWindow_: XR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KR(n) {
  return zd(n, 0.5, 0.5);
}
const Qw = G({ hannWindow_: KR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZR(n, t, e, s = !1, r = 0) {
  let o = 0;
  const i = [];
  for (; o + t <= n.size; )
    i.push(Mt(n, o, t)), o += e;
  if (s)
    for (; o < n.size; ) {
      const a = o + t - n.size, l = Ce([
        Mt(n, o, t - a),
        bo([a], r)
      ]);
      i.push(l), o += e;
    }
  return i.length === 0 ? yr([], [0, t]) : W(Ce(i), [i.length, t]);
}
const qw = G({ frame_: ZR });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BR(n, t, e, s, r = Qw) {
  s == null && (s = Fg(t));
  const o = qw(n, t, e), i = A(o, r(t));
  return Sc(i, s);
}
const HR = G({ stft_: BR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UR(n, t, e, s, r = "bilinear", o = 0) {
  const i = N(n, "image", "cropAndResize"), a = N(t, "boxes", "cropAndResize", "float32"), l = N(e, "boxInd", "cropAndResize", "int32"), c = a.shape[0];
  k(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), k(a.rank === 2 && a.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`), k(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`), k(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), k(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), k(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  const u = { image: i, boxes: a, boxInd: l }, h = { method: r, extrapolationValue: o, cropSize: s };
  return D.runKernel(dh, u, h);
}
const YR = G({ cropAndResize_: UR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jR(n) {
  const t = N(n, "image", "flipLeftRight", "float32");
  k(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  const e = { image: t };
  return D.runKernel(Sh, e, {});
}
const JR = G({ flipLeftRight_: jR });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QR(n) {
  const t = N(n, "image", "grayscaleToRGB"), e = t.rank - 1, s = t.shape[e];
  k(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), k(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const r = new Array(t.rank);
  return r.fill(1, 0, e), r[e] = 3, Mn(t, r);
}
const qR = G({ grayscaleToRGB_: QR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tE(n, t, e = 0, s = 0.5) {
  const r = N(n, "image", "rotateWithOffset", "float32");
  k(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  const o = { image: r }, i = { radians: t, fillValue: e, center: s };
  return D.runKernel(nd, o, i);
}
const eE = G({ rotateWithOffset_: tE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aa(n, t, e, s, r, o) {
  s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), o == null && (o = 0);
  const i = n.shape[0];
  return e = Math.min(e, i), k(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), k(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), k(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), k(t.rank === 1, () => "scores must be a 1D tensor"), k(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), k(0 <= o && o <= 1, () => `softNmsSigma must be in [0, 1], but was '${o}'`), { maxOutputSize: e, iouThreshold: s, scoreThreshold: r, softNmsSigma: o };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = N(n, "boxes", "nonMaxSuppression", "float32"), i = N(t, "scores", "nonMaxSuppression", "float32"), a = aa(o, i, e, s, r);
  e = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
  const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: r };
  return D.runKernel(Dh, { boxes: o, scores: i }, l);
}
const sE = G({ nonMaxSuppression_: nE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rE(n, t, e) {
  const s = oE(n, t, e), r = s < 0 ? -(s + 1) : s;
  n.splice(r, 0, t);
}
function oE(n, t, e) {
  return aE(n, t, e || iE);
}
function iE(n, t) {
  return n > t ? 1 : n < t ? -1 : 0;
}
function aE(n, t, e) {
  let s = 0, r = n.length, o = 0, i = !1;
  for (; s < r; ) {
    o = s + (r - s >>> 1);
    const a = e(t, n[o]);
    a > 0 ? s = o + 1 : (r = o, i = !a);
  }
  return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xd(n, t, e, s, r) {
  return Ag(n, t, e, s, r, 0);
}
function _d(n, t, e, s, r, o) {
  return Ag(
    n,
    t,
    e,
    s,
    r,
    0,
    !1,
    o,
    !0
  );
}
function Kd(n, t, e, s, r, o) {
  return Ag(n, t, e, s, r, o, !0);
}
function Ag(n, t, e, s, r, o, i = !1, a = !1, l = !1) {
  const c = [];
  for (let g = 0; g < t.length; g++)
    t[g] > r && c.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
  c.sort(k0);
  const u = o > 0 ? -0.5 / o : 0, h = [], d = [];
  for (; h.length < e && c.length > 0; ) {
    const g = c.pop(), { score: y, boxIndex: b, suppressBeginIndex: w } = g;
    if (y < r)
      break;
    let x = !1;
    for (let S = h.length - 1; S >= w; --S) {
      const v = lE(n, b, h[S]);
      if (v >= s) {
        x = !0;
        break;
      }
      if (g.score = g.score * cE(s, u, v), g.score <= r)
        break;
    }
    g.suppressBeginIndex = h.length, x || (g.score === y ? (h.push(b), d.push(g.score)) : g.score > r && rE(c, g, k0));
  }
  const p = h.length, f = e - p;
  a && f > 0 && (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
  const m = { selectedIndices: h };
  return i && (m.selectedScores = d), l && (m.validOutputs = p), m;
}
function lE(n, t, e) {
  const s = n.subarray(t * 4, t * 4 + 4), r = n.subarray(e * 4, e * 4 + 4), o = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), a = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(r[0], r[2]), u = Math.min(r[1], r[3]), h = Math.max(r[0], r[2]), d = Math.max(r[1], r[3]), p = (a - o) * (l - i), f = (h - c) * (d - u);
  if (p <= 0 || f <= 0)
    return 0;
  const m = Math.max(o, c), g = Math.max(i, u), y = Math.min(a, h), b = Math.min(l, d), w = Math.max(y - m, 0) * Math.max(b - g, 0);
  return w / (p + f - w);
}
function cE(n, t, e) {
  const s = Math.exp(t * e * e);
  return e <= n ? s : 0;
}
function k0(n, t) {
  return n.score - t.score || n.score === t.score && t.boxIndex - n.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function uE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = N(n, "boxes", "nonMaxSuppressionAsync"), i = N(t, "scores", "nonMaxSuppressionAsync"), a = aa(o, i, e, s, r);
  e = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
  const l = await Promise.all([o.data(), i.data()]), c = l[0], u = l[1], { selectedIndices: h } = Xd(c, u, e, s, r);
  return o !== n && o.dispose(), i !== t && i.dispose(), qe(h, "int32");
}
const hE = uE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const i = N(n, "boxes", "nonMaxSuppression"), a = N(t, "scores", "nonMaxSuppression"), l = aa(i, a, e, s, r, o);
  e = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = { boxes: i, scores: a }, u = { maxOutputSize: e, iouThreshold: s, scoreThreshold: r, softNmsSigma: o }, h = D.runKernel(Fh, c, u);
  return { selectedIndices: h[0], selectedScores: h[1] };
}
const pE = G({ nonMaxSuppressionWithScore_: dE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function fE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const i = N(n, "boxes", "nonMaxSuppressionAsync"), a = N(t, "scores", "nonMaxSuppressionAsync"), l = aa(i, a, e, s, r, o);
  e = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = await Promise.all([i.data(), a.data()]), u = c[0], h = c[1], { selectedIndices: d, selectedScores: p } = Kd(u, h, e, s, r, o);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: qe(d, "int32"),
    selectedScores: qe(p)
  };
}
const mE = fE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const i = N(n, "boxes", "nonMaxSuppression"), a = N(t, "scores", "nonMaxSuppression"), l = aa(i, a, e, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, d = { boxes: i, scores: a }, p = {
    maxOutputSize: c,
    iouThreshold: u,
    scoreThreshold: h,
    padToMaxOutputSize: o
  }, f = D.runKernel(Gh, d, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const yE = G({ nonMaxSuppressionPadded_: gE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function bE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const i = N(n, "boxes", "nonMaxSuppressionAsync"), a = N(t, "scores", "nonMaxSuppressionAsync"), l = aa(i, a, e, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, [d, p] = await Promise.all([i.data(), a.data()]), { selectedIndices: f, validOutputs: m } = _d(d, p, c, u, h, o);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: qe(f, "int32"),
    validOutputs: Nt(m, "int32")
  };
}
const xE = bE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wE(n, t, e = !1, s = !1) {
  const r = N(n, "images", "resizeBilinear");
  k(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), k(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), k(s === !1 || e === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, i = !1;
  r.rank === 3 && (i = !0, o = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const a = { images: o }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = D.runKernel(Hl, a, l);
  return i ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const tI = G({ resizeBilinear_: wE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IE(n, t, e = !1, s = !1) {
  const r = N(n, "images", "resizeNearestNeighbor");
  k(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), k(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), k(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), k(s === !1 || e === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, i = !1;
  r.rank === 3 && (i = !0, o = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const a = { images: o }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = D.runKernel(Bl, a, l);
  return i ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const eI = G({ resizeNearestNeighbor_: IE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SE(n, t = "binary", e = !1, s = 0.5) {
  const r = N(n, "image", "threshold"), o = 0.2989, i = 0.587, a = 0.114, l = r.shape[0] * r.shape[1];
  let c = A(qe([s]), 255), u, h, d, p;
  if (k(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), k(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), k(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), k(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), r.shape[2] === 3) {
    [u, h, d] = mn(r, [1, 1, 1], -1);
    const g = A(u, o), y = A(h, i), b = A(d, a);
    p = nt(nt(g, y), b);
  } else
    p = n;
  if (t === "otsu") {
    const g = jm(ut(kd(p), "int32"), ge([]), 256);
    c = vE(g, l);
  }
  const f = e ? Fr(p, c) : In(p, c);
  return ut(A(f, 255), "int32");
}
function vE(n, t) {
  let e = qe([-1]), s = qe([0]), r = qe([0]), o, i, a, l, c, u;
  for (let h = 0; h < n.size - 1; h++) {
    o = Mt(n, 0, h + 1), i = Mt(n, h + 1), c = St(yt(o), t), u = St(yt(i), t);
    const d = yt(A(o, _o(0, o.size)));
    a = St(d, yt(o));
    const p = bo(i.shape, o.size), f = nt(_o(0, i.size), p), m = A(i, f);
    l = St(yt(m), yt(i));
    const g = mt(a, l), y = mt(a, l), b = A(c, u);
    r = A(A(b, g), y);
    const w = In(r, s);
    s = tn(w, r, s), e = tn(w, qe([h]), e);
  }
  return e;
}
const CE = G({ threshold_: SE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kE(n, t, e = "nearest", s = "constant", r = 0, o) {
  const i = N(n, "image", "transform", "float32"), a = N(t, "transforms", "transform", "float32");
  k(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), k(a.rank === 2 && (a.shape[0] === i.shape[0] || a.shape[0] === 1) && a.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), k(o == null || o.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${o}.`);
  const l = { image: i, transforms: a }, c = { interpolation: e, fillMode: s, fillValue: r, outputShape: o };
  return D.runKernel(td, l, c);
}
const NE = G({ transform_: kE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TE(n, t, e) {
  k(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), k(e % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${e}.`);
  const s = N(n, "a", "bandPart");
  k(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const r = s.shape, [o, i] = s.shape.slice(-2);
  if (!(t <= o))
    throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`);
  if (!(e <= i))
    throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);
  t < 0 && (t = o), e < 0 && (e = i);
  const a = W(_o(0, o, 1, "int32"), [-1, 1]), l = _o(0, i, 1, "int32"), c = mt(a, l), u = is(Fr(c, Nt(+t, "int32")), Gr(c, Nt(-e, "int32"))), h = Re([o, i], s.dtype);
  return W(yn(as(W(s, [-1, o, i])).map((d) => tn(u, d, h))), r);
}
const $E = G({ bandPart_: TE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RE(n) {
  let t;
  if (Array.isArray(n)) {
    t = !1, k(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const r = n[0].shape[0];
    for (let o = 1; o < n.length; ++o)
      k(n[o].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`);
  } else
    t = !0, n = mn(n, n.shape[0], 0).map((r) => Or(r, [0]));
  k(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const e = [], s = n;
  for (let r = 0; r < n.length; ++r)
    e.push(D.tidy(() => {
      let o = s[r];
      if (r > 0)
        for (let i = 0; i < r; ++i) {
          const a = A(yt(A(e[i], o)), e[i]);
          o = mt(o, a);
        }
      return St(o, ea(o, "euclidean"));
    }));
  return t ? yn(e, 0) : e;
}
const EE = G({ gramSchmidt_: RE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LE(n, t = !1) {
  if (k(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2)
    return N0(n, t);
  {
    const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c), s = as(W(n, [
      e,
      n.shape[n.shape.length - 2],
      n.shape[n.shape.length - 1]
    ]), 0), r = [], o = [];
    s.forEach((l) => {
      const [c, u] = N0(l, t);
      r.push(c), o.push(u);
    });
    const i = W(yn(r, 0), n.shape), a = W(yn(o, 0), n.shape);
    return [i, a];
  }
}
function N0(n, t = !1) {
  return D.tidy(() => {
    k(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const e = n.shape[0], s = n.shape[1];
    let r = gd(e), o = Ds(n);
    const i = yr([[1]], [1, 1]);
    let a = Ds(i);
    const l = e >= s ? s : e;
    for (let c = 0; c < l; ++c) {
      const u = o, h = a, d = r;
      [a, o, r] = D.tidy(() => {
        const p = Mt(o, [c, c], [e - c, 1]), f = ea(p), m = Mt(o, [c, c], [1, 1]), g = tn(In(m, 0), yr([[-1]]), yr([[1]])), y = mt(m, A(g, f)), b = St(p, y);
        b.shape[0] === 1 ? a = Ds(i) : a = Ce([
          i,
          Mt(b, [1, 0], [b.shape[0] - 1, b.shape[1]])
        ], 0);
        const w = ce(St(zt(g, y), f)), x = Mt(o, [c, 0], [e - c, s]), S = A(w, a), v = Wt(a);
        if (c === 0)
          o = mt(x, zt(S, zt(v, x)));
        else {
          const R = mt(x, zt(S, zt(v, x)));
          o = Ce([Mt(o, [0, 0], [c, s]), R], 0);
        }
        const T = Wt(S), $ = Mt(r, [0, c], [e, r.shape[1] - c]);
        if (c === 0)
          r = mt($, zt(zt($, a), T));
        else {
          const R = mt($, zt(zt($, a), T));
          r = Ce([Mt(r, [0, 0], [e, c]), R], 1);
        }
        return [a, o, r];
      }), Dt([u, h, d]);
    }
    return !t && e > s && (r = Mt(r, [0, 0], [e, s]), o = Mt(o, [0, 0], [s, s])), [r, o];
  });
}
const DE = G({ qr_: LE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var rn;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(rn || (rn = {}));
function GE(n, t, e = rn.SUM_BY_NONZERO_WEIGHTS) {
  const s = N(n, "losses", "computeWeightedLoss");
  let r = null;
  t != null && (r = N(t, "weights", "computeWeightedLoss"));
  const o = r == null ? s : A(s, r);
  if (e === rn.NONE)
    return o;
  if (e === rn.SUM)
    return yt(o);
  if (e === rn.MEAN) {
    if (r == null)
      return ye(o);
    {
      const i = s.size / r.size, a = St(yt(o), yt(r));
      return i > 1 ? St(a, Nt(i)) : a;
    }
  }
  if (e === rn.SUM_BY_NONZERO_WEIGHTS) {
    if (r == null)
      return St(yt(o), Nt(s.size));
    {
      const i = A(r, $n(s.shape)), a = ut(yt(io(i, Nt(0))), "float32");
      return St(yt(o), a);
    }
  }
  throw Error(`Unknown reduction: ${e}`);
}
const ar = G({ computeWeightedLoss_: GE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FE(n, t, e, s = rn.SUM_BY_NONZERO_WEIGHTS) {
  const r = N(n, "labels", "absoluteDifference"), o = N(t, "predictions", "absoluteDifference");
  let i = null;
  e != null && (i = N(e, "weights", "absoluteDifference")), Ye(r.shape, o.shape, "Error in absoluteDifference: ");
  const a = $e(mt(r, o));
  return ar(a, i, s);
}
const OE = G({ absoluteDifference_: FE });
function AE(n, t, e, s, r = rn.SUM_BY_NONZERO_WEIGHTS) {
  const o = N(n, "labels", "cosineDistance"), i = N(t, "predictions", "cosineDistance");
  let a = null;
  s != null && (a = N(s, "weights", "cosineDistance")), Ye(o.shape, i.shape, "Error in cosineDistance: ");
  const l = Nt(1), c = mt(l, yt(A(o, i), e, !0));
  return ar(c, a, r);
}
const zE = G({ cosineDistance_: AE });
function WE(n, t, e, s = rn.SUM_BY_NONZERO_WEIGHTS) {
  let r = N(n, "labels", "hingeLoss");
  const o = N(t, "predictions", "hingeLoss");
  let i = null;
  e != null && (i = N(e, "weights", "hingeLoss")), Ye(r.shape, o.shape, "Error in hingeLoss: ");
  const a = Nt(1);
  r = mt(A(Nt(2), r), a);
  const l = vs(mt(a, A(r, o)));
  return ar(l, i, s);
}
const VE = G({ hingeLoss_: WE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PE(n, t, e, s = 1, r = rn.SUM_BY_NONZERO_WEIGHTS) {
  const o = N(n, "labels", "huberLoss"), i = N(t, "predictions", "huberLoss");
  let a = null;
  e != null && (a = N(e, "weights", "huberLoss")), Ye(o.shape, i.shape, "Error in huberLoss: ");
  const l = Nt(s), c = $e(mt(i, o)), u = ra(c, l), h = mt(c, u), d = nt(A(Nt(0.5), qt(u)), A(l, h));
  return ar(d, a, r);
}
const ME = G({ huberLoss_: PE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XE(n, t, e, s = 1e-7, r = rn.SUM_BY_NONZERO_WEIGHTS) {
  const o = N(n, "labels", "logLoss"), i = N(t, "predictions", "logLoss");
  let a = null;
  e != null && (a = N(e, "weights", "logLoss")), Ye(o.shape, i.shape, "Error in logLoss: ");
  const l = Nt(1), c = Nt(s), u = ce(A(o, Gn(nt(i, c)))), h = A(mt(l, o), Gn(nt(mt(l, i), c))), d = mt(u, h);
  return ar(d, a, r);
}
const _E = G({ logLoss_: XE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KE(n, t, e, s = rn.SUM_BY_NONZERO_WEIGHTS) {
  const r = N(n, "labels", "meanSquaredError"), o = N(t, "predictions", "meanSquaredError");
  let i = null;
  e != null && (i = N(e, "weights", "meanSquaredError")), Ye(r.shape, o.shape, "Error in meanSquaredError: ");
  const a = Gd(r, o);
  return ar(a, i, s);
}
const ZE = G({ meanSquaredError_: KE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BE(n, t) {
  const e = N(n, "labels", "sigmoidCrossEntropyWithLogits"), s = N(t, "logits", "sigmoidCrossEntropyWithLogits");
  Ye(e.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const r = vs(s), o = A(s, e), i = dc(Dn(ce($e(s))));
  return nt(mt(r, o), i);
}
function HE(n, t, e, s = 0, r = rn.SUM_BY_NONZERO_WEIGHTS) {
  let o = N(n, "multiClassLabels", "sigmoidCrossEntropy");
  const i = N(t, "logits", "sigmoidCrossEntropy");
  let a = null;
  if (e != null && (a = N(e, "weights", "sigmoidCrossEntropy")), Ye(o.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = Nt(s), u = Nt(1), h = Nt(0.5);
    o = nt(A(o, mt(u, c)), A(h, c));
  }
  const l = BE(o, i);
  return ar(l, a, r);
}
const UE = G({ sigmoidCrossEntropy_: HE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YE(n, t, e = -1) {
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);
  return As((r, o, i) => {
    const l = wd(o, [e], !0), c = mt(ut(o, "float32"), l);
    i([r, c]);
    const u = ce(A(c, r));
    return { value: yt(u, [e]), gradFunc: (p, f) => {
      const [m, g] = f, y = ke(p.shape, [e]);
      return [
        A(W(p, y), mt(ut(m, "float32"), Dn(g))),
        A(W(p, y), mt(Dn(g), ut(m, "float32")))
      ];
    } };
  })(n, t);
}
function jE(n, t, e, s = 0, r = rn.SUM_BY_NONZERO_WEIGHTS) {
  let o = N(n, "onehotLabels", "softmaxCrossEntropy");
  const i = N(t, "logits", "softmaxCrossEntropy");
  let a = null;
  if (e != null && (a = N(e, "weights", "softmaxCrossEntropy")), Ye(o.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = Nt(s), u = Nt(1), h = Nt(o.shape[1]);
    o = nt(A(o, mt(u, c)), St(c, h));
  }
  const l = YE(o, i);
  return ar(l, a, r);
}
const JE = G({ softmaxCrossEntropy_: jE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QE(n, t, e, s) {
  const r = N(n, "indices", "sparseFillEmptyRows", "int32"), o = N(t, "values", "sparseFillEmptyRows"), i = N(e, "denseShape", "sparseFillEmptyRows", "int32"), a = N(s, "defaultValue", "sparseFillEmptyRows", o.dtype);
  if (r.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);
  if (i.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (a.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${a.shape}`);
  const l = {
    indices: r,
    values: o,
    denseShape: i,
    defaultValue: a
  }, c = D.runKernel(_h, l);
  return {
    outputIndices: c[0],
    outputValues: c[1],
    emptyRowIndicator: c[2],
    reverseIndexMap: c[3]
  };
}
const qE = G({ sparseFillEmptyRows_: QE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tL(n, t, e) {
  const s = N(n, "inputIndices", "sparseReshape", "int32"), r = N(t, "inputShape", "sparseReshape", "int32"), o = N(e, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (r.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);
  const i = {
    inputIndices: s,
    inputShape: r,
    newShape: o
  }, a = D.runKernel(Kh, i);
  return { outputIndices: a[0], outputShape: a[1] };
}
const eL = G({ sparseReshape_: tL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nL(n, t, e) {
  const s = N(n, "data", "sparseSegmentMean"), r = N(t, "indices", "sparseSegmentMean", "int32"), o = N(e, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${o.shape}`);
  const i = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return D.runKernel(Zh, i);
}
const sL = G({ sparseSegmentMean_: nL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rL(n, t, e) {
  const s = N(n, "data", "sparseSegmentSum"), r = N(t, "indices", "sparseSegmentSum", "int32"), o = N(e, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${o.shape}`);
  const i = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return D.runKernel(Bh, i);
}
const oL = G({ sparseSegmentSum_: rL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iL(n, t, e, s, r, o, i, a) {
  const l = N(n, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const c = N(t, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const u = {
    separator: e,
    nGramWidths: s,
    leftPad: r,
    rightPad: o,
    padWidth: i,
    preserveShortSequences: a
  }, h = { data: l, dataSplits: c }, d = D.runKernel(jh, h, u);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
const aL = G({ stringNGrams_: iL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lL(n, t, e = !0) {
  const s = N(n, "input", "stringSplit", "string"), r = N(t, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (r.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  const o = { skipEmpty: e }, i = { input: s, delimiter: r }, a = D.runKernel(Jh, i, o);
  return { indices: a[0], values: a[1], shape: a[2] };
}
const cL = G({ stringSplit_: lL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uL(n, t) {
  const e = N(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: t };
  if (t <= 0)
    throw new Error("Number of buckets must be at least 1");
  const r = { input: e };
  return D.runKernel(Qh, r, s);
}
const hL = G({ stringToHashBucketFast_: uL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nI = {
  fft: Ic,
  ifft: Zo,
  rfft: Sc,
  irfft: Dd
}, sI = {
  hammingWindow: _R,
  hannWindow: Qw,
  frame: qw,
  stft: HR
}, Hr = {
  flipLeftRight: JR,
  grayscaleToRGB: qR,
  resizeNearestNeighbor: eI,
  resizeBilinear: tI,
  rotateWithOffset: eE,
  cropAndResize: YR,
  nonMaxSuppression: sE,
  nonMaxSuppressionAsync: hE,
  nonMaxSuppressionWithScore: pE,
  nonMaxSuppressionWithScoreAsync: mE,
  nonMaxSuppressionPadded: yE,
  nonMaxSuppressionPaddedAsync: xE,
  threshold: CE,
  transform: NE
}, zg = {
  bandPart: $E,
  gramSchmidt: EE,
  qr: DE
}, rI = {
  absoluteDifference: OE,
  computeWeightedLoss: ar,
  cosineDistance: zE,
  hingeLoss: VE,
  huberLoss: ME,
  logLoss: _E,
  meanSquaredError: ZE,
  sigmoidCrossEntropy: UE,
  softmaxCrossEntropy: JE
}, oI = {
  sparseFillEmptyRows: qE,
  sparseReshape: eL,
  sparseSegmentMean: sL,
  sparseSegmentSum: oL
}, iI = {
  stringNGrams: aL,
  stringSplit: cL,
  stringToHashBucketFast: hL
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lr extends yo {
  minimize(t, e = !1, s) {
    const { value: r, grads: o } = this.computeGradients(t, s);
    if (s != null) {
      const i = s.map((a) => ({ name: a.name, tensor: o[a.name] }));
      this.applyGradients(i);
    } else
      this.applyGradients(o);
    return Dt(o), e ? r : (r.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(t, e) {
    return uw(t, e);
  }
  dispose() {
    this.iterations_ != null && Dt(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      tensor: Nt(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(t) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(t) {
    return this.iterations_ = (await t[0].tensor.data())[0], t.slice(1);
  }
}
Object.defineProperty(lr, Symbol.hasInstance, {
  value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Zd extends lr {
  constructor(t, e, s = null) {
    super(), this.learningRate = t, this.rho = e, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = D.backend.epsilon());
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = D.registeredVariables[s], i = !1;
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accum_grad`,
        variable: M(() => Xt(o).variable(i))
      }), this.accumulatedUpdates[r] == null && (this.accumulatedUpdates[r] = {
        originalName: `${s}/accum_var`,
        variable: M(() => Xt(o).variable(i))
      });
      const a = Array.isArray(t) ? t[r].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedGrads[r].variable, c = this.accumulatedUpdates[r].variable;
      M(() => {
        const u = nt(A(l, this.rho), A(qt(a), 1 - this.rho)), h = A(St(Ue(nt(c, this.epsilon)), Ue(nt(l, this.epsilon))), a), d = nt(A(c, this.rho), A(qt(h), 1 - this.rho));
        l.assign(u), c.assign(d);
        const p = nt(A(h, -this.learningRate), o);
        o.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Dt(this.accumulatedGrads.map((t) => t.variable)), Dt(this.accumulatedUpdates.map((t) => t.variable)));
  }
  async getWeights() {
    const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = t.length / 2, s = !1;
    this.accumulatedGrads = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedUpdates = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.rho, e.epsilon);
  }
}
Zd.className = "Adadelta";
st(Zd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Bd extends lr {
  constructor(t, e = 0.1) {
    super(), this.learningRate = t, this.initialAccumulatorValue = e, this.accumulatedGrads = [];
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = D.registeredVariables[s];
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accumulator`,
        variable: M(() => bo(o.shape, this.initialAccumulatorValue).variable(!1))
      });
      const i = Array.isArray(t) ? t[r].tensor : t[s];
      if (i == null)
        return;
      const a = this.accumulatedGrads[r].variable;
      M(() => {
        const l = nt(a, qt(i));
        a.assign(l);
        const c = nt(A(St(i, Ue(nt(l, D.backend.epsilon()))), -this.learningRate), o);
        o.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Dt(this.accumulatedGrads.map((t) => t.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulatedGrads = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.initialAccumulatorValue);
  }
}
Bd.className = "Adagrad";
st(Bd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Hd extends lr {
  constructor(t, e, s, r = null) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = r, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], M(() => {
      this.accBeta1 = Nt(e).variable(), this.accBeta2 = Nt(s).variable();
    }), r == null && (this.epsilon = D.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    M(() => {
      const s = mt(1, this.accBeta1), r = mt(1, this.accBeta2);
      e.forEach((o, i) => {
        const a = D.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${o}/m`,
          variable: M(() => Xt(a).variable(l))
        }), this.accumulatedSecondMoment[i] == null && (this.accumulatedSecondMoment[i] = {
          originalName: `${o}/v`,
          variable: M(() => Xt(a).variable(l))
        });
        const c = Array.isArray(t) ? t[i].tensor : t[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedSecondMoment[i].variable, d = nt(A(u, this.beta1), A(c, 1 - this.beta1)), p = nt(A(h, this.beta2), A(qt(c), 1 - this.beta2)), f = St(d, s), m = St(p, r);
        u.assign(d), h.assign(p);
        const g = nt(A(St(f, nt(Ue(m), this.epsilon)), -this.learningRate), a);
        a.assign(g);
      }), this.accBeta1.assign(A(this.accBeta1, this.beta1)), this.accBeta2.assign(A(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Dt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedSecondMoment != null && Dt(this.accumulatedSecondMoment.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t), M(() => {
      this.accBeta1.assign(qs(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(qs(this.beta2, this.iterations_ + 1));
    });
    const e = t.length / 2, s = !1;
    this.accumulatedFirstMoment = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedSecondMoment = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
  }
}
Hd.className = "Adam";
st(Hd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ud extends lr {
  constructor(t, e, s, r = null, o = 0) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = r, this.decay = o, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], M(() => {
      this.iteration = Nt(0).variable(), this.accBeta1 = Nt(e).variable();
    }), r == null && (this.epsilon = D.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    M(() => {
      const s = mt(1, this.accBeta1), r = St(-this.learningRate, nt(A(this.iteration, this.decay), 1));
      e.forEach((o, i) => {
        const a = D.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${o}/m`,
          variable: Xt(a).variable(l)
        }), this.accumulatedWeightedInfNorm[i] == null && (this.accumulatedWeightedInfNorm[i] = {
          originalName: `${o}/v`,
          variable: Xt(a).variable(l)
        });
        const c = Array.isArray(t) ? t[i].tensor : t[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedWeightedInfNorm[i].variable, d = nt(A(u, this.beta1), A(c, 1 - this.beta1)), p = A(h, this.beta2), f = $e(c), m = Ps(p, f);
        u.assign(d), h.assign(m);
        const g = nt(A(St(r, s), St(d, nt(m, this.epsilon))), a);
        a.assign(g);
      }), this.iteration.assign(nt(this.iteration, 1)), this.accBeta1.assign(A(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Dt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedWeightedInfNorm != null && Dt(this.accumulatedWeightedInfNorm.map((t) => t.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(t) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
  }
}
Ud.className = "Adamax";
st(Ud);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vc extends lr {
  constructor(t) {
    super(), this.learningRate = t, this.setLearningRate(t);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = Array.isArray(t) ? t[r].tensor : t[s];
      if (o == null)
        return;
      const i = D.registeredVariables[s];
      M(() => {
        const a = nt(A(this.c, o), i);
        i.assign(a);
      });
    }), this.incrementIterations();
  }
  setLearningRate(t) {
    this.learningRate = t, this.c != null && this.c.dispose(), this.c = Se(Nt(-t));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(t) {
    if (t = await this.extractIterations(t), t.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate);
  }
}
vc.className = "SGD";
st(vc);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Yd extends vc {
  constructor(t, e, s = !1) {
    super(t), this.learningRate = t, this.momentum = e, this.useNesterov = s, this.accumulations = [], this.m = Nt(this.momentum);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = D.registeredVariables[s];
      this.accumulations[r] == null && (this.accumulations[r] = {
        originalName: `${s}/momentum`,
        variable: M(() => Xt(o).variable(!1))
      });
      const i = this.accumulations[r].variable, a = Array.isArray(t) ? t[r].tensor : t[s];
      a != null && M(() => {
        let l;
        const c = nt(A(this.m, i), a);
        this.useNesterov ? l = nt(A(this.c, nt(a, A(c, this.m))), o) : l = nt(A(this.c, c), o), i.assign(c), o.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Dt(this.accumulations.map((t) => t.variable));
  }
  setMomentum(t) {
    this.momentum = t;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulations = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.momentum, e.useNesterov);
  }
}
Yd.className = "Momentum";
st(Yd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jd extends lr {
  constructor(t, e = 0.9, s = 0, r = null, o = !1) {
    if (super(), this.learningRate = t, this.decay = e, this.momentum = s, this.epsilon = r, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = o, r == null && (this.epsilon = D.backend.epsilon()), t == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = D.registeredVariables[s], i = !1;
      this.accumulatedMeanSquares[r] == null && (this.accumulatedMeanSquares[r] = {
        originalName: `${s}/rms`,
        variable: M(() => Xt(o).variable(i))
      }), this.accumulatedMoments[r] == null && (this.accumulatedMoments[r] = {
        originalName: `${s}/momentum`,
        variable: M(() => Xt(o).variable(i))
      }), this.accumulatedMeanGrads[r] == null && this.centered && (this.accumulatedMeanGrads[r] = {
        originalName: `${s}/mg`,
        variable: M(() => Xt(o).variable(i))
      });
      const a = Array.isArray(t) ? t[r].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedMeanSquares[r].variable, c = this.accumulatedMoments[r].variable;
      M(() => {
        const u = nt(A(l, this.decay), A(qt(a), 1 - this.decay));
        if (this.centered) {
          const h = this.accumulatedMeanGrads[r].variable, d = nt(A(h, this.decay), A(a, 1 - this.decay)), p = St(A(a, this.learningRate), Ue(mt(u, nt(qt(d), this.epsilon)))), f = nt(A(c, this.momentum), p);
          l.assign(u), h.assign(d), c.assign(f);
          const m = mt(o, f);
          o.assign(m);
        } else {
          const h = nt(A(l, this.decay), A(qt(a), 1 - this.decay)), d = nt(A(c, this.momentum), St(A(a, this.learningRate), Ue(nt(h, this.epsilon))));
          l.assign(h), c.assign(d);
          const p = mt(o, d);
          o.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Dt(this.accumulatedMeanSquares.map((t) => t.variable)), this.accumulatedMeanGrads != null && this.centered && Dt(this.accumulatedMeanGrads.map((t) => t.variable)), this.accumulatedMoments != null && Dt(this.accumulatedMoments.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && t.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = this.centered ? t.length / 3 : t.length / 2, s = !1;
    this.accumulatedMeanSquares = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedMoments = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.centered && (this.accumulatedMeanGrads = t.slice(e * 2, e * 3).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
  }
}
jd.className = "RMSProp";
st(jd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ur {
  static sgd(t) {
    return new vc(t);
  }
  static momentum(t, e, s = !1) {
    return new Yd(t, e, s);
  }
  static rmsprop(t, e = 0.9, s = 0, r = null, o = !1) {
    return new jd(t, e, s, r, o);
  }
  static adam(t = 1e-3, e = 0.9, s = 0.999, r = null) {
    return new Hd(t, e, s, r);
  }
  static adadelta(t = 1e-3, e = 0.95, s = null) {
    return new Zd(t, e, s);
  }
  static adamax(t = 2e-3, e = 0.9, s = 0.999, r = null, o = 0) {
    return new Ud(t, e, s, r, o);
  }
  static adagrad(t, e = 0.1) {
    return new Bd(t, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mr = {
  sgd: ur.sgd,
  momentum: ur.momentum,
  adadelta: ur.adadelta,
  adagrad: ur.adagrad,
  rmsprop: ur.rmsprop,
  adamax: ur.adamax,
  adam: ur.adam
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dL = (() => typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n())();
function Cc() {
  return new Promise((n) => dL(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wg(n, t) {
  const e = n[0].length;
  n.forEach((r, o) => {
    k(r.length === e, () => `Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`);
  }), k(t >= 0 && t < e, () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`);
  const s = n[0];
  n.forEach((r, o) => {
    for (let i = 0; i < e; i++)
      k(i === t || r[i] === s[i], () => `Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`);
  });
}
function Gs(n, t) {
  const e = n[0].slice();
  for (let s = 1; s < n.length; s++)
    e[t] += n[s][t];
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var qn;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(qn || (qn = {}));
function Vg(n, t, e) {
  let s = new Array();
  if (e == null && t == null)
    return s;
  if (t == null)
    for (; s.length < n + e.length; )
      s.push(-1);
  else
    s = t.slice();
  if (e == null)
    return s;
  if (n + e.length !== s.length)
    throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n + e.length}, but shape.rank = ${s.length}`);
  for (let r = 1; r < e.length; ++r) {
    const o = e[r], i = s[s.length - e.length + r], a = s[i];
    if (o >= 0)
      if (a >= 0) {
        if (a !== o)
          throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r + n}] = ${o} but shape[${r + n}] = ${a}`);
      } else
        s[i] = o;
  }
  return s;
}
function Pg(n) {
  const t = {
    FIRST_DIM_SIZE: qn.FIRST_DIM_SIZE,
    VALUE_ROWIDS: qn.VALUE_ROWIDS,
    ROW_LENGTHS: qn.ROW_LENGTHS,
    ROW_SPLITS: qn.ROW_SPLITS,
    ROW_LIMITS: qn.ROW_LIMITS,
    ROW_STARTS: qn.ROW_STARTS
  }, e = [];
  for (const s of n)
    if (s in t)
      e.push(t[s]);
    else
      break;
  return e;
}
function Mg(n) {
  return n.length === 0 ? 0 : n[0] === qn.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function Xg(n, t) {
  if (n == null || t == null)
    return;
  const e = n.length, s = t.length;
  if (e >= s)
    throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let r = 0; r < Math.min(e, s - 1); ++r) {
    const o = n[r], i = t[r + 1];
    if (o >= 0 && i >= 0 && o !== 1 && o !== i)
      throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r - n.length}] = ${o} but ragged tensor input.flatValues.shape[${r - n.length}] = ${i}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _g = 30;
function Jd(n) {
  return n <= _g ? n : wu(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kg(n, t, e) {
  const s = e * (typeof n == "number" ? n : n[0]), r = t * (typeof n == "number" ? n : n[1]);
  return [s, r];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kc(n, t, e, s = !0) {
  let r = [];
  if (s)
    r = r.concat(t.slice(0)), r.push(n[0] / e), r = r.concat(n.slice(1));
  else {
    r = r.concat(n[0]);
    const o = t.length;
    for (let i = 0; i < o; ++i)
      r = r.concat([n[i + 1] / t[i], t[i]]);
    r = r.concat(n.slice(o + 1));
  }
  return r;
}
function Nc(n, t, e = !0) {
  const s = [];
  if (e) {
    s.push(t);
    for (let r = t + 1; r < n; ++r)
      r <= 2 * t ? (s.push(r), s.push(r - (t + 1))) : s.push(r);
  } else {
    const r = [], o = [];
    for (let i = 1; i < n; ++i)
      i >= t * 2 + 1 || i % 2 === 1 ? o.push(i) : r.push(i);
    s.push(...r), s.push(0), s.push(...o);
  }
  return s;
}
function Tc(n, t, e, s = !0) {
  const r = [];
  s ? r.push(n[0] / e) : r.push(n[0] * e);
  for (let o = 1; o < n.length; ++o)
    o <= t.length ? s ? r.push(t[o - 1] * n[o]) : r.push(n[o] / t[o - 1]) : r.push(n[o]);
  return r;
}
function Zg(n, t) {
  const e = [0];
  for (let s = 0; s < t; ++s)
    e.push(n[s][0]);
  return e;
}
function Bg(n, t, e) {
  const s = n.slice(0, 1);
  for (let r = 0; r < e; ++r)
    s.push(n[r + 1] - t[r][0] - t[r][1]);
  return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qd = 1.7580993408473768, qd = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Hg = 0.3275911, Ug = 0.254829592, Yg = -0.284496736, jg = 1.421413741, Jg = -1.453152027, Qg = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tr(n, t) {
  if (n.length !== t.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);
  const e = new Float32Array(n.length * 2);
  for (let s = 0; s < e.length; s += 2)
    e[s] = n[s / 2], e[s + 1] = t[s / 2];
  return e;
}
function aI(n) {
  const t = new Float32Array(n.length / 2), e = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2)
    t[s / 2] = n[s], e[s / 2] = n[s + 1];
  return { real: t, imag: e };
}
function lI(n) {
  const t = Math.ceil(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let r = 0; r < n.length; r += 4)
    e[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: e, imag: s };
}
function cI(n) {
  const t = Math.floor(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let r = 2; r < n.length; r += 4)
    e[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: e, imag: s };
}
function qg(n, t) {
  const e = n[t * 2], s = n[t * 2 + 1];
  return { real: e, imag: s };
}
function uI(n, t, e, s) {
  n[s * 2] = t, n[s * 2 + 1] = e;
}
function hI(n, t) {
  const e = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let r = 0; r < Math.ceil(n / 2); r++) {
    const o = (t ? 2 : -2) * Math.PI * (r / n);
    e[r] = Math.cos(o), s[r] = Math.sin(o);
  }
  return { real: e, imag: s };
}
function dI(n, t, e) {
  const s = (e ? 2 : -2) * Math.PI * (n / t), r = Math.cos(s), o = Math.sin(s);
  return { real: r, imag: o };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gp = "->", pL = /->/g, T0 = ",", $0 = "...";
function ty(n, t) {
  n = n.replace(/\s/g, "");
  const e = (n.length - n.replace(pL, "").length) / Gp.length;
  if (e < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (e > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Gp}").`);
  const [s, r] = n.split(Gp);
  k(s.indexOf($0) === -1, () => `The ellipsis notation ("${$0}") is not supported yet.`);
  const o = s.split(T0), i = o.length;
  if (t !== i)
    throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const a = [];
  for (let d = 0; d < r.length; ++d) {
    const p = r[d];
    if (!o.some((f) => f.indexOf(p) !== -1))
      throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    a.indexOf(p) === -1 && a.push(p);
  }
  for (let d = 0; d < s.length; ++d) {
    const p = s[d];
    a.indexOf(p) === -1 && p !== T0 && a.push(p);
  }
  const l = new Array(o.length);
  for (let d = 0; d < i; ++d) {
    if (new Set(o[d].split("")).size !== o[d].length)
      throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);
    l[d] = [];
    for (let p = 0; p < o[d].length; ++p)
      l[d].push(a.indexOf(o[d][p]));
  }
  const c = a.length, u = r.length, h = [];
  for (let d = u; d < c; ++d)
    h.push(d);
  return { allDims: a, summedDims: h, idDims: l };
}
function ey(n, t) {
  let e = new Array(n);
  e.fill(-1);
  for (let r = 0; r < t.length; ++r)
    e[t[r]] = r;
  const s = [];
  for (let r = 0; r < n; ++r)
    e[r] === -1 && s.push(r);
  return e = e.filter((r) => r !== -1), { permutationIndices: e, expandDims: s };
}
function ny(n, t, e) {
  const s = new Array(n);
  for (let r = 0; r < e.length; ++r) {
    const o = e[r].shape;
    for (let i = 0; i < t[r].length; ++i)
      s[t[r][i]] === void 0 ? s[t[r][i]] = o[i] : k(s[t[r][i]] === o[i], () => `Expected dimension ${s[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(o)}, but got dimension ${o[i]}`);
  }
}
function sy(n, t) {
  const e = n, s = [];
  let r = 0;
  n.length === 0 && e.push(-1), r = n.length + 1;
  for (let i = 0; i < r; ++i)
    s.push([]);
  const o = [];
  for (let i = 0; i < e.length; ++i) {
    const a = e[i], l = fL(t, a);
    for (const c of l)
      o.indexOf(c) === -1 && (s[i].push(c), o.push(c));
  }
  return { path: e, steps: s };
}
function ry(n) {
  return n.every((t, e) => t === e);
}
function fL(n, t) {
  const e = [];
  for (let s = 0; s < n.length; ++s)
    (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
  return e;
}
function oy(n, t, e = 0) {
  let s = [];
  if (typeof t == "number")
    k(n.shape[e] % t === 0, () => "Number of splits must evenly divide the axis."), s = new Array(t).fill(n.shape[e] / t);
  else {
    const r = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
    k(r <= 1, () => "There should be only one negative value in split array.");
    const o = t.indexOf(-1);
    if (o !== -1) {
      const i = t.reduce((a, l) => l > 0 ? a + l : a);
      t[o] = n.shape[e] - i;
    }
    k(n.shape[e] === t.reduce((i, a) => i + a), () => "The sum of sizes must match the size of the axis dimension."), s = t;
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iy(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function ay(n, t) {
  return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function ly(n, t, e) {
  return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cy(n, t) {
  return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function uy(n, t) {
  return `size ${n} must be non-negative, not ${t}`;
}
function hy() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function dy(n, t) {
  const e = H(n), s = H(t);
  return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function py(n, t) {
  const e = H(n), s = H(t);
  return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ya() {
  return "segment ids must be >= 0";
}
function fy() {
  return "segment ids are not increasing";
}
function my(n, t) {
  return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function gy(n, t, e) {
  return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pI(n, t) {
  let e = !1, s;
  for (n <= _g ? (s = n, e = !0) : s = wu(n, Math.floor(Math.sqrt(n))); !e; )
    s > t || s === n ? e = !0 : s = wu(n, s + 1);
  return s;
}
function fI(n, t, e) {
  const s = [], r = n.length;
  for (let o = 0; o < r; o++)
    o !== t ? s.push(n[o]) : s.push(e);
  return s;
}
function yy(n, t, e, s) {
  const r = t.shape.length, o = n.shape.length;
  if (s !== 0 && (s < -r || s > r))
    throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
  if (s < 0 && (s += r), s > o)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${o}).`);
  if (e < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);
  for (let h = 0; h < s; ++h)
    if (n.shape[h] !== t.shape[h])
      throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);
  const i = n.shape[e], a = [];
  let l = 1, c = 1, u = 1;
  for (let h = 0; h < s; ++h)
    a.push(n.shape[h]), l *= n.shape[h];
  for (let h = s; h < e; h++)
    a.push(n.shape[h]), c *= n.shape[h];
  for (let h = s; h < r; h++)
    a.push(t.shape[h]);
  for (let h = e + 1; h < o; h++)
    a.push(n.shape[h]), u *= n.shape[h];
  return { batchSize: l, sliceSize: u, outerSize: c, dimSize: i, outputShape: a };
}
const mL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  segOpComputeOptimalWindowSize: pI,
  computeOutShape: fI,
  collectGatherOpShapeInfo: yy
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function er(n) {
  try {
    return n.map((t) => Us(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function by(n) {
  return n.map((t) => Kn(t));
}
const mI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  slice_util: j1,
  segment_util: mL,
  fromUint8ToStringArray: er,
  fromStringArrayToUint8: by,
  upcastType: ln,
  axesAreInnerMostDims: ug,
  combineLocations: aw,
  computeOutAndReduceShapes: ze,
  expandShapeToKeepDim: ke,
  assertAxesAreInnerMostDims: Je,
  getAxesPermutation: we,
  getUndoAxesPermutation: Dr,
  getInnerMostAxes: Ne,
  getBroadcastDims: Js,
  getReductionAxes: Le,
  assertAndGetBroadcastShape: Et,
  assertParamsConsistent: Wg,
  computeOutShape: Gs,
  computeDilation2DInfo: ac,
  computePool2DInfo: ls,
  computePool3DInfo: rr,
  computeConv2DInfo: _e,
  computeConv3DInfo: Lr,
  computeDefaultPad: Zm,
  tupleValuesAreOne: vr,
  eitherStridesOrDilationsAreOne: je,
  convertConv2DDataFormat: or,
  checkPadOnDimRoundingMode: un,
  getFusedDyActivation: Wd,
  getFusedBiasGradient: Vd,
  applyActivation: Pd,
  shouldFuse: Md,
  get RowPartitionType() {
    return qn;
  },
  combineRaggedTensorToTensorShapes: Vg,
  getRowPartitionTypesHelper: Pg,
  getRaggedRank: Mg,
  validateDefaultValueShape: Xg,
  PARALLELIZE_THRESHOLD: _g,
  computeOptimalWindowSize: Jd,
  getImageCenter: Kg,
  getReshaped: kc,
  getPermuted: Nc,
  getReshapedPermuted: Tc,
  getSliceBeginCoords: Zg,
  getSliceSize: Bg,
  prepareAndValidate: id,
  validateUpdateShape: Em,
  validateInput: Lm,
  calculateShapes: Ji,
  SELU_SCALEALPHA: Qd,
  SELU_SCALE: qd,
  ERF_P: Hg,
  ERF_A1: Ug,
  ERF_A2: Yg,
  ERF_A3: jg,
  ERF_A4: Jg,
  ERF_A5: Qg,
  warn: Vn,
  log: V2,
  mergeRealAndImagArrays: tr,
  splitRealAndImagArrays: aI,
  complexWithEvenIndex: lI,
  complexWithOddIndex: cI,
  getComplexWithIndex: qg,
  assignToTypedArray: uI,
  exponents: hI,
  exponent: dI,
  decodeEinsumEquation: ty,
  getEinsumPermutation: ey,
  checkEinsumDimSizes: ny,
  getEinsumComputePath: sy,
  isIdentityPermutation: ry,
  prepareSplitSize: oy,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch: iy,
  getSparseFillEmptyRowsNegativeIndexErrorMessage: ay,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: ly,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: cy,
  getSparseReshapeNegativeOutputDimErrorMessage: uy,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: hy,
  getSparseReshapeInputOutputMultipleErrorMessage: dy,
  getSparseReshapeInputOutputMismatchErrorMessage: py,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: Ya,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: fy,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: my,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: gy
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  nonMaxSuppressionV3Impl: Xd,
  nonMaxSuppressionV4Impl: _d,
  nonMaxSuppressionV5Impl: Kd,
  whereImpl: Ad
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gI = {
  kernelName: sl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, Io(ut(e, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yL = {
  kernelName: ni,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = qt(ut(e, "float32")), r = Ue(mt(Nt(1), s));
        return ce(St(n, r));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bL = {
  kernelName: si,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ue(mt(qt(ut(e, "float32")), 1));
        return St(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xL = {
  kernelName: mo,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = Le(e.shape, r);
      return l.length > 0 && (a = yt(a, l)), W(a, e.shape);
    }, b: () => {
      let a = n;
      const l = Le(s.shape, r);
      return l.length > 0 && (a = yt(a, l)), W(a, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wL = {
  kernelName: rl,
  saveAllInputs: !0,
  gradFunc: (n, t) => {
    const e = {};
    return t.forEach((s, r) => {
      e[r] = () => n.clone();
    }), e;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IL = {
  kernelName: ol,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Xt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SL = {
  kernelName: il,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Xt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vL = {
  kernelName: ri,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, Ue(mt(Nt(1), qt(ut(e, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CL = {
  kernelName: oi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ue(nt(Nt(1), qt(ut(e, "float32"))));
        return St(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kL = {
  kernelName: li,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      const a = nt(qt(e), qt(s));
      let l = A(n, St(s, a));
      const c = Le(e.shape, r);
      return c.length > 0 && (l = yt(l, c)), W(l, e.shape);
    }, b: () => {
      const a = nt(qt(e), qt(s));
      let l = ce(A(n, St(e, a)));
      const c = Le(s.shape, r);
      return c.length > 0 && (l = yt(l, c)), W(l, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NL = {
  kernelName: ii,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, nt(qt(ut(e, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TL = {
  kernelName: ai,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, mt(Nt(1), qt(ut(e, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $L(n, t, e, s, r, o) {
  const i = N(n, "dy", "avgPool3dGrad"), a = N(t, "input", "avgPool3dGrad");
  let l = i, c = a, u = !1;
  a.rank === 4 && (u = !0, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), c = W(a, [
    1,
    a.shape[0],
    a.shape[1],
    a.shape[2],
    a.shape[3]
  ])), k(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), k(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), un("avgPool3dGrad", r, o);
  const h = { dy: l, input: c }, d = { filterSize: e, strides: s, pad: r, dimRoundingMode: o }, p = D.runKernel(rh, h, d);
  return u ? W(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const RL = G({ avgPool3dGrad_: $L });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EL = {
  kernelName: ll,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: r, strides: o, pad: i, dimRoundingMode: a } = e;
    return {
      x: () => RL(n, s, r, o, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LL(n, t, e, s, r) {
  const o = N(n, "dy", "avgPoolGrad"), i = N(t, "input", "avgPoolGrad");
  k(i.rank === o.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${o.rank})`);
  let a = i, l = o, c = !1;
  i.rank === 3 && (c = !0, a = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), k(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), k(a.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);
  const u = { dy: l, input: a }, h = { filterSize: e, strides: s, pad: r }, d = D.runKernel(sh, u, h);
  return c ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const DL = G({ avgPoolGrad_: LL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GL = {
  kernelName: al,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: r, strides: o, pad: i } = e;
    return { x: () => DL(n, s, r, o, i) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FL = {
  kernelName: cl,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { transposeA: o, transposeB: i } = e;
    return !o && !i ? {
      a: () => zt(n, r, !1, !0),
      b: () => zt(s, n, !0, !1)
    } : !o && i ? {
      a: () => zt(n, r, !1, !1),
      b: () => zt(n, s, !0, !1)
    } : o && !i ? {
      a: () => zt(r, n, !1, !0),
      b: () => zt(s, n, !1, !1)
    } : {
      a: () => zt(r, n, !0, !0),
      b: () => zt(n, s, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OL = {
  kernelName: ul,
  gradFunc: (n, t, e) => {
    const { blockShape: s, crops: r } = e;
    return { x: () => gc(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AL = {
  kernelName: u1,
  gradFunc: (n, t, e) => {
    const s = e, r = s.inputShape, o = s.shape, i = Array.from(o);
    for (let l = r.length - 1; l >= 0; l--)
      if (r[l] === o[l])
        i[l] = 1;
      else if (r[l] !== 1)
        throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);
    const a = [];
    for (let l = 0; l < i.length; l++)
      i[l] > 1 && a.push(l);
    return { x: () => yt(n, a, !0) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zL = {
  kernelName: ci,
  gradFunc: (n) => ({ x: () => n.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WL = {
  kernelName: ui,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VL = {
  kernelName: hi,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { clipValueMin: r, clipValueMax: o } = e;
    return {
      x: () => tn(is(Gr(s, r), Fr(s, o)), n, Xt(n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PL = {
  kernelName: hl,
  inputsToSave: ["x"],
  gradFunc: gI.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ML = {
  kernelName: dl,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const s = t.map((l) => l.shape), { axis: r } = e, o = At(r, t[0].shape)[0], i = s.map((l) => l[o]);
    return mn(n, i, o).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XL = {
  kernelName: pl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { dilations: o, strides: i, pad: a, dataFormat: l } = e;
    return k(vr(o), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`), {
      x: () => ng(s.shape, n, r, i, a, l),
      filter: () => Og(s, n, r.shape, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _L = {
  kernelName: fl,
  inputsToSave: ["dy", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { strides: o, pad: i, dataFormat: a, dimRoundingMode: l } = e;
    return {
      dy: () => Qs(n, r, o, i, a, 1, l),
      filter: () => Og(n, s, r.shape, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KL(n, t, e, s, r) {
  let o = n;
  n.rank === 4 && (o = W(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let i = t;
  i.rank === 4 && (i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), k(o.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`), k(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), k(e.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`), k(o.shape[4] === e[3], () => `Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`), k(i.shape[4] === e[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);
  const a = { x: o, dy: i }, l = { strides: s, pad: r, filterShape: e };
  return D.runKernel(ch, a, l);
}
const ZL = G({ conv3DBackpropFilter_: KL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BL = {
  kernelName: ml,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: r, pad: o } = e;
    k(vr(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    const [i, a] = t;
    return {
      x: () => sw(i.shape, n, a, r, o),
      filter: () => ZL(i, n, a.shape, r, o)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HL = {
  kernelName: di,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(ce(Rd(ut(e, "float32"))), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UL = {
  kernelName: pi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(Ed(ut(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YL = {
  kernelName: gl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r, exclusive: o, reverse: i } = e;
    return {
      x: () => {
        const a = we([r], s.rank);
        let l = md(n, r, o, !i);
        return a != null && (l = Wt(l, a)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jL = {
  kernelName: yl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: r, pad: o, dimRoundingMode: i } = e, a = s == null ? [1, 1] : s;
    k(vr(a), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [l, c] = t;
    return k(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), k(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), k(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), k(je(r, a), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${a}'.`), un("depthwiseConv2d", o, i), {
      x: () => jw(l.shape, n, c, r, o, a, i),
      filter: () => Yw(l, n, c.shape, r, o, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JL = {
  kernelName: bl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, o = { x: s, filter: r, dy: n }, i = { x: s, filter: r, dy: n };
    return {
      x: () => D.runKernel(Iu, o, e),
      filter: () => D.runKernel(Su, i, e)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QL = {
  kernelName: mi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t, s = { dy: n, y: e };
    return { x: () => D.runKernel(xh, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qL = {
  kernelName: gi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = A(Dn(ce(qt(e))), 2 / Math.sqrt(Math.PI));
    return { x: () => A(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tD = {
  kernelName: yi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eD = {
  kernelName: wl,
  inputsToSave: ["input"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { input: () => W(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nD = {
  kernelName: bi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, Dn(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sD = {
  kernelName: xi,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rD = {
  kernelName: wi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      const a = St(n, ut(s, "float32")), l = Le(e.shape, r);
      return l.length > 0 ? W(yt(a, l), e.shape) : a;
    }, b: () => {
      let a = A(n, ut(e, "float32"));
      const l = Le(s.shape, r);
      l.length > 0 && (a = W(yt(a, l), s.shape));
      const c = qt(s);
      return ce(St(a, ut(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oD = {
  kernelName: Il,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (n, t, e) => {
    const { varianceEpsilon: s } = e, [r, o, i, a] = t, l = a == null ? Nt(1) : a, c = Le(o.shape, r.shape), u = [];
    if (o.rank === 1) {
      for (let x = 0; x < r.shape.length - 1; ++x)
        u.push(r.shape[x]);
      u.push(1);
    }
    const h = mt(r, o), d = A(n, l), p = Nd(nt(i, Nt(s))), f = A(A(A(p, p), p), Nt(-0.5));
    return {
      x: () => o.rank === 1 ? W(A(A(n, Mn(W(p, [1, 1, 1, o.shape[0]]), u)), l), r.shape) : W(A(A(n, p), l), r.shape),
      mean: () => {
        let x = A(A(p, Nt(-1)), d);
        return o.rank === 1 && (x = yt(x, c)), W(x, o.shape);
      },
      variance: () => {
        let x = A(A(f, h), d);
        return o.rank === 1 && (x = yt(x, c)), W(x, o.shape);
      },
      scale: () => {
        const x = A(h, p);
        let S = A(n, x);
        return o.rank === 1 && (S = yt(S, c)), W(S, o.shape);
      },
      offset: () => {
        let x = n;
        return o.rank === 1 && (x = yt(x, c)), W(x, o.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iD = {
  kernelName: Sl,
  inputsToSave: ["x", "indices"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { axis: o } = e, i = At(o, s.shape)[0];
    return { x: () => {
      const l = s.shape, c = r.size, u = l.slice(0, i), h = u.length, d = l.slice(o, l.length).slice(1), p = d.length, f = R0(0, h), m = R0(h + 1, h + 1 + p), g = E0([u, [c], d]), y = W(n, g), b = W(r, [c]), w = E0([[h], f, m]), x = Wt(y, w);
      let S = Od(x, b, s.shape[i]);
      const v = Dr(w);
      return S = Wt(S, v), S;
    }, indices: () => r };
  }
};
function R0(n, t) {
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
function E0(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e)
    for (let s = 0; s < n[e].length; ++s)
      t.push(n[e][s]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aD = {
  kernelName: Ii,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => Xt(e), b: () => Xt(s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lD = {
  kernelName: Si,
  gradFunc: (n) => ({ x: () => ut(n, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cD = {
  kernelName: vi,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uD = {
  kernelName: Ci,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hD = {
  kernelName: ki,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dD = {
  kernelName: Cl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { alpha: r } = e, o = In(s, 0);
    return { x: () => tn(o, n, A(n, r)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pD = {
  kernelName: Ti,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, nt(e, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fD = {
  kernelName: Ni,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ut(e, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mD = {
  kernelName: h1,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e;
    return {
      logits: () => {
        const i = Dn(s);
        return mt(n, A(yt(n, r, !0), i));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gD(n, t, e, s = 5, r = 1, o = 1, i = 0.5) {
  const a = { x: n, y: t, dy: e }, l = { depthRadius: s, bias: r, alpha: o, beta: i };
  return D.runKernel(Th, a, l);
}
const yD = G({ localResponseNormalizationBackprop_: gD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bD = {
  kernelName: El,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { depthRadius: o, bias: i, alpha: a, beta: l } = e;
    return {
      x: () => yD(s, r, n, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yI(n, t, e, s) {
  return t.rank < e.rank && (t = W(t, ke(t.shape, s))), n.rank < e.rank && (n = W(n, ke(n.shape, s))), {
    x: () => A(n, ut(Ln(e, t), n.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L0 = {
  kernelName: Ll,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { reductionIndices: r } = s, o = t[0], i = t[1], a = At(r, o.shape), l = yI(n, i, o, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xD = {
  kernelName: $i,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => A(n, ut(Gr(e, s), "float32")), b: () => A(n, ut(yd(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wD(n, t, e, s, r, o, i) {
  const a = N(n, "dy", "maxPool3dGrad"), l = N(t, "input", "maxPool3dGrad"), c = N(e, "output", "maxPool3dGrad");
  let u = a, h = l, d = c, p = !1;
  l.rank === 4 && (p = !0, u = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), h = W(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), d = W(c, [
    1,
    c.shape[0],
    c.shape[1],
    c.shape[2],
    c.shape[3]
  ])), k(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), k(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), k(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), un("maxPool3dGrad", o, i);
  const f = { dy: u, input: h, output: d }, m = { filterSize: s, strides: r, pad: o, dimRoundingMode: i }, g = D.runKernel(Rh, f, m);
  return p ? W(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const ID = G({ maxPool3dGrad_: wD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SD = {
  kernelName: Gl,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = e;
    return {
      x: () => ID(n, s, r, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vD(n, t, e, s, r, o, i) {
  const a = N(n, "dy", "maxPoolGrad"), l = N(t, "input", "maxPoolGrad"), c = N(e, "output", "maxPoolGrad");
  k(l.rank === a.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`), k(a.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`), k(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), un("maxPoolGrad", o, i);
  const u = { dy: a, input: l, output: c }, h = { filterSize: s, strides: r, pad: o, dimRoundingMode: i };
  return D.runKernel($h, u, h);
}
const CD = G({ maxPoolGrad_: vD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kD = {
  kernelName: Dl,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { filterSize: o, strides: i, pad: a } = e;
    return {
      x: () => CD(n, s, r, o, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ND = {
  kernelName: Fl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e, o = At(r, s.shape), a = ze(s.shape, o)[1], l = H(a);
    return { x: () => {
      const u = s.shape.slice();
      o.forEach((p) => {
        u[p] = 1;
      });
      const h = W(n, u);
      return St(A(h, $n(s.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TD = {
  kernelName: Ol,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { axis: r } = s, [o, i] = t, a = At(r, o.shape), l = yI(n, i, o, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $D = {
  kernelName: Ri,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => A(n, ut(Fr(e, s), "float32")), b: () => A(n, ut(In(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RD = {
  kernelName: Al,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: r } = e, o = r.map((i) => i[0]);
    return { x: () => Mt(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ED = {
  kernelName: Ei,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      const a = Le(e.shape, r);
      return a.length > 0 ? W(yt(n, a), e.shape) : n;
    }, b: () => {
      const a = A(n, ce(na(St(e, s)))), l = Le(s.shape, r);
      return l.length > 0 ? W(yt(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LD = {
  kernelName: Li,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      const a = A(n, ut(s, "float32")), l = Le(e.shape, r);
      return l.length > 0 ? W(yt(a, l), e.shape) : a;
    }, b: () => {
      const a = A(n, ut(e, "float32")), l = Le(s.shape, r);
      return l.length > 0 ? W(yt(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DD = {
  kernelName: zl,
  gradFunc: (n) => ({ x: () => ce(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GD = {
  kernelName: Pl,
  inputsToSave: ["indices"],
  gradFunc: (n, t) => {
    const e = t[0];
    return { indices: () => Re(e.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FD = {
  kernelName: Vl,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OD = {
  kernelName: Ml,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return as(n, s).map((o) => () => o);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D0 = {
  kernelName: Xl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: r } = e, o = r.map((i) => i[0]);
    return { x: () => Mt(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AD = {
  kernelName: Di,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e, s, r] = t, o = e, i = s, a = Et(o.shape, i.shape);
    return { a: () => {
      const u = ut(i, "float32");
      let h = A(n, A(u, qs(o, mt(u, Nt(1)))));
      const d = Le(o.shape, a);
      return d.length > 0 && (h = yt(h, d)), W(h, o.shape);
    }, b: () => {
      const u = In(o, 0), h = tn(u, Gn(o), Xt(o));
      let d = A(n, A(r, h));
      const p = Le(i.shape, a);
      return p.length > 0 && (d = yt(d, p)), W(d, i.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zD = {
  kernelName: _l,
  inputsToSave: ["x", "alpha"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = In(e, 0);
    return {
      x: () => tn(r, n, A(n, s)),
      alpha: () => {
        let o = tn(r, Xt(n), A(n, e));
        const i = Le(s.shape, n.shape);
        return i.length > 0 && (o = yt(o, i)), W(o, s.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WD(n, t, e) {
  const s = n.shape.slice();
  s[e] = 1;
  const r = W(t, s), o = Ha(n, e, !0, !1), i = Ha(n, e, !0, !0), a = A(o, i);
  return A(r, a);
}
function VD(n, t, e) {
  const s = n.shape.length, r = s - e.length, o = we(e, s);
  let i = n;
  o != null && (i = Wt(n, o));
  const a = i.shape.slice(), c = a.splice(s - e.length, e.length).reduce((d, p) => d * p, 1);
  a.push(c);
  const u = i.reshape(a);
  let h = WD(u, t, r);
  if (h = h.reshape(i.shape), o != null) {
    const d = Dr(o);
    h = Wt(h, d);
  }
  return h;
}
const PD = {
  kernelName: Kl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e;
    let o = [];
    return r == null ? o = s.shape.map((i, a) => a) : typeof r == "number" ? o = [r] : o = r, { x: () => VD(s, n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MD = {
  kernelName: fi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      const a = St(n, ut(s, "float32")), l = Le(e.shape, r);
      return l.length > 0 ? W(yt(a, l), e.shape) : a;
    }, b: () => {
      let a = A(n, ut(e, "float32"));
      const l = Le(s.shape, r);
      l.length > 0 && (a = W(yt(a, l), s.shape));
      const c = qt(s);
      return ce(St(a, ut(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XD = {
  kernelName: Gi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ce(qt(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _D = {
  kernelName: Oi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = A(Fr(e, 6), Io(e));
    return { x: () => A(n, ut(s, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KD = {
  kernelName: Fi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, ut(Io(e), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZD = {
  kernelName: Zl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => W(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BD = {
  kernelName: Hl,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = { dy: n, images: s };
    return { images: () => D.runKernel(Ph, r, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HD = {
  kernelName: Bl,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = { dy: n, images: s };
    return { images: () => D.runKernel(Vh, r, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UD = {
  kernelName: Ul,
  gradFunc: (n, t, e) => {
    const { dims: s } = e, r = At(s, n.shape);
    return { x: () => Zn(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YD = {
  kernelName: Ai,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jD = {
  kernelName: zi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ce(St(n, A(qs(e, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JD = {
  kernelName: Yl,
  inputsToSave: ["condition"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      condition: () => ut(Xt(e), "float32"),
      t: () => A(n, ut(e, n.dtype)),
      e: () => A(n, ut(pc(e), n.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QD = {
  kernelName: Wi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = In(e, Nt(0)), r = Nt(Qd), o = Nt(qd), i = A(n, o), a = A(A(n, r), Dn(ut(e, "float32")));
        return tn(s, i, a);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qD = {
  kernelName: Xi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, A(e, mt(Nt(1), e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t3 = {
  kernelName: Mi,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e3 = {
  kernelName: Vi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(uc(ut(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n3 = {
  kernelName: Pi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(fd(ut(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s3 = {
  kernelName: jl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { begin: r, size: o } = e, i = s.shape, [a, l] = cd(s, r, o), c = [];
    for (let u = 0; u < n.rank; u++)
      c.push([a[u], i[u] - a[u] - l[u]]);
    return { x: () => ir(n, c) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r3 = {
  kernelName: tc,
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { dim: r } = e, o = !0, i = A(n, s);
    return {
      logits: () => mt(i, A(yt(i, [r], o), s))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o3 = {
  kernelName: _i,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, gs(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G0 = {
  kernelName: Ql,
  gradFunc: (n, t, e) => {
    const { blockShape: s, paddings: r } = e;
    return { x: () => cc(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F0 = {
  kernelName: ql,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return { x: () => Ce(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i3 = {
  kernelName: Ki,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, A(Ue(ut(e, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a3 = {
  kernelName: Uh,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(n, A(ut(e, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l3 = {
  kernelName: Zi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Nt(2);
    return { a: () => A(n, A(r, mt(e, s))), b: () => A(n, A(r, mt(s, e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c3 = {
  kernelName: ji,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u3 = {
  kernelName: Bi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = Et(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = Le(e.shape, r);
      return l.length > 0 && (a = yt(a, l)), W(a, e.shape);
    }, b: () => {
      let a = n;
      const l = Le(s.shape, r);
      return l.length > 0 && (a = yt(a, l)), W(ce(a), s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const h3 = {
  kernelName: Jl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = s.shape.slice(), { axis: o } = e;
    At(o, s.shape).forEach((c) => {
      r[c] = 1;
    });
    const a = W(n, r), l = A(a, $n(s.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d3 = {
  kernelName: Hi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, qt(uc(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p3 = {
  kernelName: Ui,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => A(mt(Nt(1), qt(e)), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f3 = {
  kernelName: Yi,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { reps: r } = e;
    return { x: () => {
      let i = Xt(s);
      if (s.rank === 1)
        for (let a = 0; a < r[0]; ++a)
          i = nt(i, Mt(n, [a * s.shape[0]], [s.shape[0]]));
      else if (s.rank === 2)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            i = nt(i, Mt(n, [a * s.shape[0], l * s.shape[1]], [
              s.shape[0],
              s.shape[1]
            ]));
      else if (s.rank === 3)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              i = nt(i, Mt(n, [a * s.shape[0], l * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
      else if (s.rank === 4)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              for (let u = 0; u < r[3]; ++u)
                i = nt(i, Mt(n, [
                  a * s.shape[0],
                  l * s.shape[1],
                  c * s.shape[2],
                  u * s.shape[3]
                ], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
      return i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m3 = {
  kernelName: jr,
  gradFunc: (n, t, e) => {
    const s = e, { perm: r } = s, o = Dr(r);
    return { x: () => Wt(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g3 = {
  kernelName: ec,
  gradFunc: (n, t, e) => {
    const s = e, { axis: r } = s;
    return { value: () => yn(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y3 = {
  kernelName: nc,
  inputsToSave: ["segmentIds"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => b3(n, e) };
  }
};
function b3(n, t) {
  const e = Ps(t, Xt(t)), s = sa(n, e);
  let r = Gr(t, Nt(0, "int32"));
  const o = s.rank - r.rank;
  for (let a = 0; a < o; ++a)
    r = pn(r, a + 1);
  r = is(r, $n(s.shape, "bool"));
  const i = Xt(s);
  return tn(r, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x3 = {
  kernelName: sc,
  gradFunc: (n) => ({ x: () => Xt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w3 = [
  gI,
  yL,
  bL,
  xL,
  wL,
  IL,
  SL,
  vL,
  CL,
  kL,
  NL,
  TL,
  EL,
  GL,
  FL,
  OL,
  AL,
  zL,
  WL,
  VL,
  PL,
  ML,
  _L,
  XL,
  BL,
  HL,
  UL,
  YL,
  jL,
  JL,
  MD,
  QL,
  qL,
  tD,
  eD,
  nD,
  rD,
  sD,
  oD,
  iD,
  aD,
  lD,
  cD,
  uD,
  hD,
  dD,
  pD,
  fD,
  mD,
  bD,
  L0,
  L0,
  xD,
  SD,
  kD,
  ND,
  TD,
  $D,
  RD,
  ED,
  LD,
  DD,
  GD,
  FD,
  OD,
  D0,
  D0,
  AD,
  zD,
  PD,
  XD,
  _D,
  KD,
  ZD,
  BD,
  HD,
  UD,
  YD,
  jD,
  JD,
  QD,
  qD,
  t3,
  e3,
  n3,
  s3,
  r3,
  o3,
  G0,
  G0,
  F0,
  F0,
  i3,
  l3,
  a3,
  c3,
  u3,
  h3,
  d3,
  p3,
  f3,
  m3,
  g3,
  y3,
  x3
];
for (const n of w3)
  d1(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.abs = function() {
  return this.throwIfDisposed(), $e(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.acos = function() {
  return this.throwIfDisposed(), zm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.acosh = function() {
  return this.throwIfDisposed(), Wm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.add = function(n) {
  return this.throwIfDisposed(), nt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.all = function(n, t) {
  return this.throwIfDisposed(), hd(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.any = function(n, t) {
  return this.throwIfDisposed(), Ba(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.argMax = function(n) {
  return this.throwIfDisposed(), ro(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.argMin = function(n) {
  return this.throwIfDisposed(), Vm(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.asScalar = function() {
  return this.throwIfDisposed(), k(this.size === 1, () => "The array must have only 1 element."), W(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.asType = function(n) {
  return this.throwIfDisposed(), ut(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.as1D = function() {
  return this.throwIfDisposed(), W(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.as2D = function(n, t) {
  return this.throwIfDisposed(), W(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.as3D = function(n, t, e) {
  return this.throwIfDisposed(), W(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.as4D = function(n, t, e, s) {
  return this.throwIfDisposed(), W(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.as5D = function(n, t, e, s, r) {
  return this.throwIfDisposed(), W(this, [n, t, e, s, r]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.asin = function() {
  return this.throwIfDisposed(), Pm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.asinh = function() {
  return this.throwIfDisposed(), Mm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.atan = function() {
  return this.throwIfDisposed(), Xm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), _m(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.atanh = function() {
  return this.throwIfDisposed(), Km(this);
};
q().prototype.avgPool = function(n, t, e, s) {
  return this.throwIfDisposed(), lc(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.batchToSpaceND = function(n, t) {
  return this.throwIfDisposed(), cc(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.batchNorm = function(n, t, e, s, r) {
  return this.throwIfDisposed(), Qi(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), gr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.cast = function(n) {
  return this.throwIfDisposed(), ut(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.ceil = function() {
  return this.throwIfDisposed(), Jm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.clipByValue = function(n, t) {
  return this.throwIfDisposed(), gn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.concat = function(n, t) {
  return this.throwIfDisposed(), n instanceof Kt && (n = [n]), Ce([this, ...n], t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.conv1d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), dd(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.conv2dTranspose = function(n, t, e, s, r) {
  return this.throwIfDisposed(), pd(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.conv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), Qs(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.cos = function() {
  return this.throwIfDisposed(), uc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.cosh = function() {
  return this.throwIfDisposed(), fd(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.cumprod = function(n, t, e) {
  return this.throwIfDisposed(), Ha(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.cumsum = function(n, t, e) {
  return this.throwIfDisposed(), md(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.depthToSpace = function(n, t) {
  return this.throwIfDisposed(), og(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.depthwiseConv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), qi(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.dilation2d = function(n, t, e, s, r) {
  return this.throwIfDisposed(), ig(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), ag(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.div = function(n) {
  return this.throwIfDisposed(), St(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.dot = function(n) {
  return this.throwIfDisposed(), lg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.elu = function() {
  return this.throwIfDisposed(), ta(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.equal = function(n) {
  return this.throwIfDisposed(), Ln(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.erf = function() {
  return this.throwIfDisposed(), cg(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.euclideanNorm = function(n, t) {
  return this.throwIfDisposed(), hg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.exp = function() {
  return this.throwIfDisposed(), Dn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), pn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.expm1 = function() {
  return this.throwIfDisposed(), dg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.fft = function() {
  return this.throwIfDisposed(), Ic(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.flatten = function() {
  return this.throwIfDisposed(), W(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.floor = function() {
  return this.throwIfDisposed(), na(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), ud(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.gather = function(n, t) {
  return this.throwIfDisposed(), sa(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), Gr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.greater = function(n) {
  return this.throwIfDisposed(), In(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.ifft = function() {
  return this.throwIfDisposed(), Zo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.irfft = function() {
  return this.throwIfDisposed(), Dd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.isFinite = function() {
  return this.throwIfDisposed(), pg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.isInf = function() {
  return this.throwIfDisposed(), fg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.isNaN = function() {
  return this.throwIfDisposed(), mg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), hc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), Fr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.less = function(n) {
  return this.throwIfDisposed(), yd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.localResponseNormalization = function(n, t, e, s) {
  return this.throwIfDisposed(), gg(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), yg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), xd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logSumExp = function(n, t) {
  return this.throwIfDisposed(), wd(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.log = function() {
  return this.throwIfDisposed(), Gn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.log1p = function() {
  return this.throwIfDisposed(), dc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), is(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logicalNot = function() {
  return this.throwIfDisposed(), pc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), Id(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), bg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.matMul = function(n, t, e) {
  return this.throwIfDisposed(), zt(this, n, t, e);
};
q().prototype.maxPool = function(n, t, e, s) {
  return this.throwIfDisposed(), fc(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.max = function(n, t) {
  return this.throwIfDisposed(), os(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.maximum = function(n) {
  return this.throwIfDisposed(), Ps(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.mean = function(n, t) {
  return this.throwIfDisposed(), ye(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.min = function(n, t) {
  return this.throwIfDisposed(), Ua(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.minimum = function(n) {
  return this.throwIfDisposed(), ra(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.mirrorPad = function(n, t) {
  return this.throwIfDisposed(), wg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.mod = function(n) {
  return this.throwIfDisposed(), Ig(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.mul = function(n) {
  return this.throwIfDisposed(), A(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.neg = function() {
  return this.throwIfDisposed(), ce(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.norm = function(n, t, e) {
  return this.throwIfDisposed(), ea(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), io(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.oneHot = function(n, t = 1, e = 0) {
  return this.throwIfDisposed(), Mo(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.onesLike = function() {
  return this.throwIfDisposed(), Fn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.pad = function(n, t) {
  return this.throwIfDisposed(), ir(this, n, t);
};
q().prototype.pool = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), Sg(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.pow = function(n) {
  return this.throwIfDisposed(), qs(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.prelu = function(n) {
  return this.throwIfDisposed(), yc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.prod = function(n, t) {
  return this.throwIfDisposed(), vg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.reciprocal = function() {
  return this.throwIfDisposed(), kg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.relu = function() {
  return this.throwIfDisposed(), vs(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.relu6 = function() {
  return this.throwIfDisposed(), Cd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), W(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.reshape = function(n) {
  return this.throwIfDisposed(), W(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.resizeBilinear = function(n, t, e) {
  return this.throwIfDisposed(), tI(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.resizeNearestNeighbor = function(n, t, e) {
  return this.throwIfDisposed(), eI(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.reverse = function(n) {
  return this.throwIfDisposed(), Zn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.rfft = function() {
  return this.throwIfDisposed(), Sc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.round = function() {
  return this.throwIfDisposed(), kd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.rsqrt = function() {
  return this.throwIfDisposed(), Nd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.selu = function() {
  return this.throwIfDisposed(), Td(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.separableConv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), $d(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sigmoid = function() {
  return this.throwIfDisposed(), gs(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sign = function() {
  return this.throwIfDisposed(), Ng(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sin = function() {
  return this.throwIfDisposed(), Rd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sinh = function() {
  return this.throwIfDisposed(), Ed(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.slice = function(n, t) {
  return this.throwIfDisposed(), Mt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.softmax = function(n) {
  return this.throwIfDisposed(), wc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.softplus = function() {
  return this.throwIfDisposed(), xo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.spaceToBatchND = function(n, t) {
  return this.throwIfDisposed(), gc(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.split = function(n, t) {
  return this.throwIfDisposed(), mn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sqrt = function() {
  return this.throwIfDisposed(), Ue(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.square = function() {
  return this.throwIfDisposed(), qt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), Gd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), Or(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.stack = function(n, t) {
  this.throwIfDisposed();
  const e = n instanceof Kt ? [this, n] : [this, ...n];
  return yn(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.step = function(n) {
  return this.throwIfDisposed(), Io(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.stridedSlice = function(n, t, e, s, r, o, i, a) {
  return this.throwIfDisposed(), Tg(this, n, t, e, s, r, o, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sub = function(n) {
  return this.throwIfDisposed(), mt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.sum = function(n, t) {
  return this.throwIfDisposed(), yt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.tan = function() {
  return this.throwIfDisposed(), $g(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.tanh = function() {
  return this.throwIfDisposed(), oo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.tile = function(n) {
  return this.throwIfDisposed(), Mn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.toBool = function() {
  return this.throwIfDisposed(), ut(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.toFloat = function() {
  return this.throwIfDisposed(), ut(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.toInt = function() {
  return this.throwIfDisposed(), ut(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.topk = function(n, t) {
  return this.throwIfDisposed(), Rg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.transpose = function(n) {
  return this.throwIfDisposed(), Wt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.unique = function(n) {
  return this.throwIfDisposed(), Eg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.unsortedSegmentSum = function(n, t) {
  return this.throwIfDisposed(), Od(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.unstack = function(n) {
  return this.throwIfDisposed(), as(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.where = function(n, t) {
  return this.throwIfDisposed(), tn(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
q().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Xt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ts extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Ts.prototype);
  }
}
class ss extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, ss.prototype);
  }
}
class P extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, P.prototype);
  }
}
class Gt extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Gt.prototype);
  }
}
class xy extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, xy.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class bI {
  constructor(t) {
    this.maxEntries = t || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(t) {
    let e;
    return this.cache.has(t) && (e = this.cache.get(t), this.cache.delete(t), this.cache.set(t, e)), e;
  }
  put(t, e) {
    if (this.cache.has(t))
      this.cache.delete(t);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(t, e);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(t) {
    if (t < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);
    if (this.maxEntries > t)
      for (let e = 0; e < this.maxEntries - t; e++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
    this.maxEntries = t;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ao(n, t) {
  if (Array.isArray(n)) {
    let e = [];
    for (let s = 0; s < t; s++)
      e = e.concat(n);
    return e;
  } else {
    const e = new Array(t);
    return e.fill(n), e;
  }
}
function $s(n, t) {
  if (!n)
    throw new xy(t);
}
function O0(n, t) {
  let e = 0;
  for (const s of n)
    s === t && e++;
  return e;
}
function fn(n) {
  return n.length === 1 ? n[0] : n;
}
function ie(n) {
  return Array.isArray(n) ? n : [n];
}
function Ms(n) {
  const e = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return e[0] !== "_" ? e : "private" + e;
}
function _r(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let Un = {};
function wy(n) {
  if (n == null)
    return null;
  const t = {};
  return t.className = n.getClassName(), t.config = n.getConfig(), t;
}
function Rf(n) {
  if (!(n == null || typeof n != "object"))
    if (Array.isArray(n))
      n.forEach((t) => Rf(t));
    else {
      const t = Object.keys(n);
      for (const e of t) {
        const s = n[e];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[e] = s.value : Rf(s));
      }
    }
}
function $c(n, t = {}, e = {}, s = "object", r = !1) {
  if (typeof n == "string") {
    const o = n;
    let i;
    if (o in e)
      i = e[o];
    else if (o in Un)
      i = Un[o];
    else if (i = t[o], i == null)
      throw new P(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    const o = n;
    if (o.className == null || o.config == null)
      throw new P(`${s}: Improper config format: ${JSON.stringify(o)}.
'className' and 'config' must set.`);
    const i = o.className;
    let a, l;
    if (i in e ? [a, l] = e[i] : i in Un ? [a, l] = Un.className : i in t && ([a, l] = t[i]), a == null)
      throw new P(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const c = {};
      for (const p of Object.keys(Un))
        c[p] = Un[p];
      for (const p of Object.keys(e))
        c[p] = e[p];
      const u = o.config;
      u.customObjects = c;
      const h = Object.assign({}, Un);
      for (const p of Object.keys(e))
        Un[p] = e[p];
      Rf(o.config);
      const d = l(a, o.config, e, r);
      return Un = Object.assign({}, h), d;
    } else {
      const c = Object.assign({}, Un);
      for (const h of Object.keys(e))
        Un[h] = e[h];
      const u = new a(o.config);
      return Un = Object.assign({}, c), u;
    }
  }
}
function I3(n, t) {
  return n < t ? -1 : n > t ? 1 : 0;
}
function Yc(n, t) {
  return -1 * I3(n, t);
}
function br(n) {
  if (n == null)
    return n;
  const t = [];
  for (const e of n)
    t.indexOf(e) === -1 && t.push(e);
  return t;
}
function S3(n) {
  if (n == null)
    throw new P(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const t in n)
    if (n.hasOwnProperty(t))
      return !1;
  return !0;
}
function So(n, t, e) {
  if (e != null && n.indexOf(e) < 0)
    throw new P(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`);
}
function Iy(n, t, e = 0, s = 1 / 0) {
  return $s(e >= 0), $s(s >= e), Array.isArray(n) && n.length >= e && n.length <= s && n.every((r) => typeof r === t);
}
function Me(n, t) {
  Array.isArray(n) ? (k(n.length > 0, () => `${t} is unexpectedly an empty array.`), n.forEach((e, s) => Me(e, `element ${s + 1} of ${t}`))) : k(Number.isInteger(n) && n > 0, () => `Expected ${t} to be a positive integer, but got ${xI(n)}.`);
}
function xI(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((t) => xI(t)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function v3(n, t, e) {
  let s = e != null ? e() : Ze(), r;
  return (...i) => {
    const a = e != null ? e() : Ze();
    return a - s < t || (s = a, r = n(...i)), r;
  };
}
function wI(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let C3 = 0;
function II() {
  return C3++;
}
const jc = {};
function tp(n = "") {
  return n in jc || (jc[n] = 0), jc[n] += 1, n + jc[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const k3 = ["channelsFirst", "channelsLast"], N3 = ["nearest", "bilinear"], T3 = ["valid", "same", "causal"], $3 = ["max", "avg"], R3 = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const $o = /* @__PURE__ */ new Map();
function Te(n) {
  So(k3, "DataFormat", n);
}
function E3(n) {
  So(N3, "InterpolationFormat", n);
}
function Bn(n) {
  So(T3, "PaddingMode", n);
}
function SI(n) {
  So($3, "PoolMode", n);
}
const Wa = [], A0 = "/";
function Qr(n, t) {
  Wa.push(n);
  try {
    const e = t();
    return Wa.pop(), e;
  } catch (e) {
    throw Wa.pop(), e;
  }
}
function L3() {
  return Wa.length === 0 ? "" : Wa.join(A0) + A0;
}
function vI(n) {
  if (!kI(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  return L3() + n;
}
function CI(n) {
  if (!kI(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  $o.has(n) || $o.set(n, 0);
  const t = $o.get(n);
  if ($o.set(n, $o.get(n) + 1), t > 0) {
    const e = `${n}_${t}`;
    return $o.set(e, 1), e;
  } else
    return n;
}
const D3 = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function kI(n) {
  return !!n.match(D3);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function G3(n) {
  return n === parseInt(n.toString(), 10);
}
function xr(n, t, e) {
  t == null && (t = 0), e == null && (e = n.length);
  let s = 1;
  for (let r = t; r < e; ++r)
    s *= n[r];
  return s;
}
function Bo(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s < t && (t = s);
  }
  return t;
}
function Cr(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s > t && (t = s);
  }
  return t;
}
function xs(n, t) {
  if (t < n)
    throw new P(`end (${t}) < begin (${n}) is forbidden.`);
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Fp;
function Fe() {
  return Fp == null && (Fp = Ks().epsilon()), Fp;
}
function ws() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Rc(n, t) {
  return ut(n, t);
}
function Ec(n, t = -1) {
  const e = n.shape.slice();
  return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), W(n, e);
}
function F3(n, t) {
  return M(() => {
    if (n.shape.length !== 2)
      throw new P(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const e = Ec(n, 1);
    return Ef(e, [1, t, 1]);
  });
}
function O3(n) {
  const t = [xr(n.shape)];
  return W(n, t);
}
function A3(n) {
  if (n.rank <= 1)
    throw new P(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const t = [n.shape[0], xr(n.shape, 1)];
  return W(n, t);
}
function qr(n, t, e) {
  return M(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        return Ld(n, [t, 0], [e, n.shape[1]]);
      case 3:
        return xc(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
      case 4:
        return Ko(n, [t, 0, 0, 0], [e, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return Mt(n, [t, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4]
        ]);
      case 6:
        return Mt(n, [t, 0, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4],
          n.shape[5]
        ]);
      default:
        throw new P(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Op(n, t, e) {
  return M(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        return Ld(n, [0, t], [n.shape[0], e]);
      case 3:
        return xc(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
      case 4:
        return Ko(n, [0, 0, 0, t], [n.shape[0], n.shape[1], n.shape[2], e]);
      default:
        throw new P(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Jc(n, t, e, s) {
  return M(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        switch (s) {
          case 1:
            return qr(n, t, e);
          case 2:
            return Op(n, t, e);
          default:
            throw new P(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return qr(n, t, e);
          case 2:
            return xc(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
          case 3:
            return Op(n, t, e);
          default:
            throw new P(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return qr(n, t, e);
          case 2:
            return Ko(n, [0, t, 0, 0], [n.shape[0], e, n.shape[2], n.shape[3]]);
          case 3:
            return Ko(n, [0, 0, t, 0], [n.shape[0], n.shape[1], e, n.shape[3]]);
          case 4:
            return Op(n, t, e);
          default:
            throw new P(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new P(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Sy(n, t = -1) {
  let e;
  return t < 0 && (e = n[0].rank, e !== 0 ? t = e : t = 0), t === n[0].rank && (t = -1), Ce(n, t);
}
function z0(n, t) {
  switch (n.rank) {
    case 1:
      return Qm([n, t]);
    case 2:
      return qm([n, t], 0);
    case 3:
      return tg([n, t], 0);
    case 4:
      return eg([n, t], 0);
    default:
      throw new P(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function Ef(n, t) {
  if (Array.isArray(t) || (t = [t]), n.rank !== t.length)
    throw new P(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);
  return Mn(n, t);
}
function ep(n, t = 0, e = 1, s, r) {
  return vd(n, t, e, s, r);
}
function Fs(n, t, e, s) {
  if (n.rank < 2 || t.rank < 2)
    throw new Gt(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    const r = n.shape.slice(-1)[0], o = t.shape.slice(-2)[0];
    if (r !== o)
      throw new Gt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);
  }
  if (n.rank === 2 && t.rank === 2)
    return $f({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Lf(n.rank, s, ws()) : null,
      activation: e
    });
  {
    const r = n.shape.slice(), o = r.pop();
    n = W(n, [-1, o]);
    const i = t.shape.slice(), a = i.pop(), l = i.pop(), c = [...i, a], u = Array.from({ length: t.rank }, (f, m) => m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m);
    t = W(Wt(t, u), [l, -1]);
    const h = [...r, ...c];
    return W($f({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Lf(n.rank, s, ws()) : null,
      activation: e
    }), h);
  }
}
function NI(n, t, e) {
  return M(() => (Array.isArray(t) ? t = qe(t, "int32") : t = ut(t, "int32"), sa(n, t, e)));
}
function Lc(n) {
  return A(n, n);
}
function Lf(n, t, e) {
  const s = t.shape;
  if (t.rank !== 1 && t.rank !== n)
    throw new P(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (e === "channelsFirst")
      return s.length === 1 ? W(t, [1, s[0], 1, 1, 1]) : W(t, [1, s[3], s[0], s[1], s[2]]);
    if (e === "channelsLast")
      return s.length === 1 ? W(t, [1, 1, 1, 1, s[0]]) : W(t, [1].concat(s));
  } else if (n === 4) {
    if (e === "channelsFirst")
      return s.length === 1 ? W(t, [1, s[0], 1, 1]) : W(t, [1, s[2], s[0], s[1]]);
    if (e === "channelsLast")
      return s.length === 1 ? W(t, [1, 1, 1, s[0]]) : W(t, [1].concat(s));
  } else if (n === 3) {
    if (e === "channelsFirst")
      return s.length === 1 ? W(t, [1, s[0], 1]) : W(t, [1, s[1], s[0]]);
    if (e === "channelsLast")
      return s.length === 1 ? W(t, [1, 1, s[0]]) : W(t, [1].concat(s));
  } else if (n < 3)
    return t;
  throw new P(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function Cs(n, t, e) {
  return M(() => (e == null && (e = ws()), Te(e), nt(n, Lf(n.rank, t, e))));
}
function z3(n, t = 1) {
  if (t !== 1)
    throw new Gt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return ta(n);
}
function W3(n) {
  return M(() => St(n, nt($e(n), 1)));
}
function TI(n, t, e, s) {
  return M(() => Gg(n, t, e, s));
}
function V3(n) {
  return M(() => {
    const t = nt(0.5, A(0.2, n));
    return gn(t, 0, 1);
  });
}
function Dc(n, t, e = !1) {
  return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const P3 = ["fanIn", "fanOut", "fanAvg"], M3 = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function X3(n) {
  So(P3, "FanMode", n);
}
function _3(n) {
  So(M3, "Distribution", n);
}
class cs extends yo {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class vy extends cs {
  apply(t, e) {
    return Re(t, e);
  }
}
vy.className = "Zeros";
st(vy);
class np extends cs {
  apply(t, e) {
    return $n(t, e);
  }
}
np.className = "Ones";
st(np);
class Cy extends cs {
  constructor(t) {
    if (super(), typeof t != "object")
      throw new P(`Expected argument of type ConstantConfig but got ${t}`);
    if (t.value === void 0)
      throw new P(`config must have value set but got ${t}`);
    this.value = t.value;
  }
  apply(t, e) {
    return M(() => A(Nt(this.value), $n(t, e)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
Cy.className = "Constant";
st(Cy);
class ky extends cs {
  constructor(t) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = t.minval || this.DEFAULT_MINVAL, this.maxval = t.maxval || this.DEFAULT_MAXVAL, this.seed = t.seed;
  }
  apply(t, e) {
    return ia(t, this.minval, this.maxval, e);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
ky.className = "RandomUniform";
st(ky);
class Ny extends cs {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new Gt(`randomNormal does not support dType ${e}.`);
    return ep(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Ny.className = "RandomNormal";
st(Ny);
class Ty extends cs {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new Gt(`truncatedNormal does not support dType ${e}.`);
    return Fd(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Ty.className = "TruncatedNormal";
st(Ty);
class $y extends cs {
  constructor(t) {
    super(), this.gain = t.gain != null ? t.gain : 1;
  }
  apply(t, e) {
    return M(() => {
      if (t.length !== 2 || t[0] !== t[1])
        throw new P("Identity matrix initializer can only be used for 2D square matrices.");
      return A(this.gain, gd(t[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
$y.className = "Identity";
st($y);
function K3(n, t = "channelsLast") {
  let e, s;
  if (Te(t), n.length === 2)
    e = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (t === "channelsFirst") {
      const r = xr(n, 2);
      e = n[1] * r, s = n[0] * r;
    } else if (t === "channelsLast") {
      const r = xr(n, 0, n.length - 2);
      e = n[n.length - 2] * r, s = n[n.length - 1] * r;
    }
  } else {
    const r = xr(n);
    e = Math.sqrt(r), s = Math.sqrt(r);
  }
  return [e, s];
}
class bn extends cs {
  constructor(t) {
    if (super(), t.scale < 0)
      throw new P(`scale must be a positive float. Got: ${t.scale}`);
    this.scale = t.scale == null ? 1 : t.scale, this.mode = t.mode == null ? "fanIn" : t.mode, X3(this.mode), this.distribution = t.distribution == null ? "normal" : t.distribution, _3(this.distribution), this.seed = t.seed;
  }
  apply(t, e) {
    const s = K3(t), r = s[0], o = s[1];
    let i = this.scale;
    if (this.mode === "fanIn" ? i /= Math.max(1, r) : this.mode === "fanOut" ? i /= Math.max(1, o) : i /= Math.max(1, (r + o) / 2), this.distribution === "normal") {
      const a = Math.sqrt(i);
      if (e = e || "float32", e !== "float32" && e !== "int32")
        throw new Gt(`${this.getClassName()} does not support dType ${e}.`);
      return Fd(t, 0, a, e, this.seed);
    } else {
      const a = Math.sqrt(3 * i);
      return ia(t, -a, a, e);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
bn.className = "VarianceScaling";
st(bn);
class sp extends bn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
sp.className = "GlorotUniform";
st(sp);
class rp extends bn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
rp.className = "GlorotNormal";
st(rp);
class op extends bn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
op.className = "HeNormal";
st(op);
class ip extends bn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
ip.className = "HeUniform";
st(ip);
class ap extends bn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
ap.className = "LeCunNormal";
st(ap);
class lp extends bn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return bn.className;
  }
}
lp.className = "LeCunNormal";
st(lp);
class Ry extends cs {
  constructor(t) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain, this.seed = t.seed, this.seed != null)
      throw new Gt("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(t, e) {
    return M(() => {
      if (t.length < 2)
        throw new Gt("Shape must be at least 2D.");
      t[0] * t[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0] * t[1]}) elements: Slowness may result.`);
      const s = t[0] > t[1] ? [t[1], t[0]] : t, r = ep(s, 0, 1, "float32");
      let o = zg.gramSchmidt(r);
      return t[0] > t[1] && (o = Wt(o)), A(this.gain, o);
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
Ry.className = "Orthogonal";
st(Ry);
const W0 = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function V0(n, t = {}) {
  return $c(n, Pn.getMap().classNameMap, t, "initializer");
}
function be(n) {
  return wy(n);
}
function de(n) {
  if (typeof n == "string") {
    const t = n in W0 ? W0[n] : n;
    if (t === "GlorotNormal")
      return new rp();
    if (t === "GlorotUniform")
      return new sp();
    if (t === "HeNormal")
      return new op();
    if (t === "HeUniform")
      return new ip();
    if (t === "LeCunNormal")
      return new ap();
    if (t === "LeCunUniform")
      return new lp();
    {
      const e = {};
      return e.className = t, e.config = {}, V0(e);
    }
  } else
    return n instanceof cs ? n : V0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Df(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function Eu(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function Ot(n) {
  let t;
  if (Array.isArray(n)) {
    if (n.length !== 1)
      throw new P(`Expected Tensor length to be 1; got ${n.length}`);
    t = n[0];
  } else
    t = n;
  return t;
}
function jt(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1)
      return n = n, n[0];
    throw new P(`Expected exactly 1 Shape; got ${n.length}`);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Lu(n) {
  let t = 0;
  for (const e of n)
    e.shape.length === 0 ? t += 1 : t += e.shape.reduce((s, r) => s * r);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const P0 = "Variable";
class $I {
  constructor(t, e = "float32", s = P0, r = !0, o = null) {
    this.dtype = e == null ? "float32" : e, this.shape = t.shape, this.id = II(), s = s == null ? P0 : s, this.originalName = vI(s), this.name = CI(this.originalName), this.trainable_ = r, this.constraint = o, this.val = Lg(t, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(t) {
    return this.assertNotDisposed(), Z3(this.val, t), this.val.id !== t.id && (this.val.assign(t), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.trainable_ = t, this.val.trainable = t;
  }
}
function Z3(n, t) {
  if (n.shape.toString() !== t.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(t.shape));
}
function Gf(n) {
  return n.map((t) => t.read());
}
function Ey(n) {
  n.forEach((t) => {
    t[0].write(t[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ee {
  constructor(t) {
    this.dtype = t.dtype, this.shape = t.shape, t.shape != null ? this.ndim = t.shape.length : this.ndim = t.ndim, this.maxNDim = t.maxNDim, this.minNDim = t.minNDim, this.axes = t.axes || {};
  }
}
class ms {
  constructor(t, e, s, r, o, i, a) {
    this.dtype = t, this.shape = e, this.sourceLayer = s, this.inputs = r, this.callArgs = o, this.outputTensorIndex = a, this.id = II(), i != null && (this.originalName = vI(i), this.name = CI(this.originalName)), this.rank = e.length;
  }
}
let B3 = 0;
class cp {
  constructor(t, e) {
    this.callArgs = e, this.id = B3++, this.outboundLayer = t.outboundLayer, this.inboundLayers = t.inboundLayers, this.nodeIndices = t.nodeIndices, this.tensorIndices = t.tensorIndices, this.inputTensors = t.inputTensors, this.outputTensors = t.outputTensors, this.inputMasks = t.inputMasks, this.outputMasks = t.outputMasks, this.inputShapes = t.inputShapes, this.outputShapes = t.outputShapes;
    for (const s of t.inboundLayers)
      s != null && s.outboundNodes.push(this);
    t.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const t = [];
    for (const e of this.inboundLayers)
      e != null ? t.push(e.name) : t.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: t,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let H3 = 0;
class _t extends yo {
  constructor(t = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = H3++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let e = t.name;
    if (!e) {
      const s = this.getClassName();
      e = Ms(s) + "_" + tp(s);
    }
    if (this.name = e, this.trainable_ = t.trainable == null ? !0 : t.trainable, t.inputShape != null || t.batchInputShape != null) {
      let s;
      if (t.batchInputShape != null)
        s = t.batchInputShape;
      else if (t.inputShape != null) {
        let o = null;
        t.batchSize != null && (o = t.batchSize), s = [o].concat(t.inputShape);
      }
      this.batchInputShape = s;
      let r = t.dtype;
      r == null && (r = t.inputDType), r == null && (r = "float32"), this.dtype = r;
    }
    t.weights != null ? this.initialWeights = t.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  static nodeKey(t, e) {
    return t.name + "_ib-" + e.toString();
  }
  getNodeAtIndex(t, e) {
    if (this.inboundNodes.length === 0)
      throw new ss(`The layer has never been called and thus has no defined ${e}.`);
    if (this.inboundNodes.length <= t)
      throw new P(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[t];
  }
  getInputAt(t) {
    return fn(this.getNodeAtIndex(t, "input").inputTensors);
  }
  getOutputAt(t) {
    return fn(this.getNodeAtIndex(t, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1)
      throw new Ts(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new Ts(`Layer ${this.name} is not connected, no input to return.`);
    return fn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0)
      throw new Ts(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new Ts(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return fn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((t) => t());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(t) {
    this._built = t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this._trainableWeights.forEach((e) => e.trainable = t), this.trainable_ = t;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((t) => t.trainable) : [];
  }
  set trainableWeights(t) {
    this._trainableWeights = t;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((t) => !t.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(t) {
    this._nonTrainableWeights = t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(t) {
    if (t = ie(t), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const e = ie(this.inputSpec);
    if (t.length !== e.length)
      throw new P(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);
    for (let s = 0; s < t.length; s++) {
      const r = t[s], o = e[s];
      if (o == null)
        continue;
      const i = r.rank;
      if (o.ndim != null && i !== o.ndim)
        throw new P(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${i}`);
      if (o.maxNDim != null && i > o.maxNDim)
        throw new P(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${i}`);
      if (o.minNDim != null && i < o.minNDim)
        throw new P(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${i}.`);
      if (o.dtype != null && r.dtype !== o.dtype)
        throw new P(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);
      if (o.axes) {
        const a = r.shape;
        for (const l in o.axes) {
          const c = Number(l), u = o.axes[l], h = c >= 0 ? a[c] : a[a.length + c];
          if (u != null && [u, null].indexOf(h) === -1)
            throw new P(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${a}.`);
        }
      }
      if (o.shape != null)
        for (let a = 0; a < o.shape.length; ++a) {
          const l = o.shape[a], c = r.shape[a];
          if (l != null && c != null && l !== c)
            throw new P(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`);
        }
    }
  }
  call(t, e) {
    return t;
  }
  invokeCallHook(t, e) {
    this._callHook != null && this._callHook(t, e);
  }
  setCallHook(t) {
    this._callHook = t;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(t, e) {
    e = e || {}, this.assertNotDisposed();
    const s = ie(t);
    let r = !0;
    for (const i of s)
      if (!(i instanceof ms)) {
        r = !1;
        break;
      }
    let o = !0;
    for (const i of s)
      if (i instanceof ms) {
        o = !1;
        break;
      }
    if (r === o)
      throw new P("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return Qr(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(t);
        const i = [];
        for (const a of ie(t))
          i.push(a.shape);
        this.build(fn(i)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && o && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(t), o) {
        let i = this.call(t, e);
        const a = ie(i), l = [];
        for (let c of a)
          s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
        if (i = fn(l), this.activityRegularizer != null)
          throw new Gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return i;
      } else {
        const i = U3(t), a = this.computeOutputShape(i);
        let l;
        const c = Y3(t);
        if (this.warnOnIncompatibleInputShape(Array.isArray(t) ? i[0] : i), a != null && a.length > 0 && Array.isArray(a[0]) ? l = a.map((u, h) => new ms(c, u, this, ie(t), e, this.name, h)) : l = new ms(c, a, this, ie(t), e, this.name), this.addInboundNode(t, l, null, null, i, a, e), this._refCount++, this.activityRegularizer != null)
          throw new Gt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  warnOnIncompatibleInputShape(t) {
    if (this.batchInputShape != null)
      if (t.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let e = !1;
        this.batchInputShape.forEach((s, r) => {
          s != null && t[r] != null && t[r] !== s && (e = !0);
        }), e && console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new Ts(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const t = [];
    for (const e of this.inboundNodes) {
      const s = JSON.stringify(e.outputShapes);
      t.indexOf(s) === -1 && t.push(s);
    }
    if (t.length === 1) {
      const e = this.inboundNodes[0].outputShapes;
      return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1 ? e[0] : e;
    } else
      throw new Ts(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built)
      throw new ss(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Lu(this.weights);
  }
  build(t) {
    this.built = !0;
  }
  getWeights(t = !1) {
    return Gf(t ? this.trainableWeights : this.weights);
  }
  setWeights(t) {
    M(() => {
      const e = this.weights;
      if (e.length !== t.length)
        throw new P(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);
      if (e.length === 0)
        return;
      const s = [], r = Gf(e);
      for (let o = 0; o < r.length; ++o) {
        const i = r[o], a = e[o], l = t[o];
        if (!Vt(i.shape, l.shape))
          throw new P(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);
        s.push([a, l]);
      }
      Ey(s);
    });
  }
  addWeight(t, e, s, r, o, i, a, l) {
    if (this._addedWeightNames.indexOf(t) !== -1)
      throw new P(`Duplicate weight name ${t} for layer ${this.name}`);
    this._addedWeightNames.push(t), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (r = l != null ? l() : de("zeros"));
    const c = r.apply(e, s), u = new $I(c, s, t, i, a);
    return c.dispose(), o != null && this.addLoss(() => o.apply(u.read())), i == null && (i = !0), i ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  setFastWeightInitDuringBuild(t) {
    this.fastWeightInitDuringBuild = t;
  }
  addLoss(t) {
    t == null || Array.isArray(t) && t.length === 0 || (t = ie(t), this._losses !== void 0 && this._losses !== null && this.losses.push(...t));
  }
  computeOutputShape(t) {
    return t;
  }
  computeMask(t, e) {
    if (!this.supportsMasking) {
      if (e != null)
        if (Array.isArray(e))
          e.forEach((s) => {
            if (s != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return e;
  }
  addInboundNode(t, e, s, r, o, i, a = null) {
    const l = ie(t);
    e = ie(e), s = ie(s), r = ie(r), o = Eu(o), i = Eu(i);
    const c = [], u = [], h = [];
    for (const d of l)
      c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
    new cp({
      outboundLayer: this,
      inboundLayers: c,
      nodeIndices: u,
      tensorIndices: h,
      inputTensors: l,
      outputTensors: e,
      inputMasks: s,
      outputMasks: r,
      inputShapes: o,
      outputShapes: i
    }, a);
    for (let d = 0; d < e.length; d++)
      e[d].sourceLayer = this, e[d].nodeIndex = this.inboundNodes.length - 1, e[d].tensorIndex = d;
  }
  getConfig() {
    const t = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (t.batchInputShape = this.batchInputShape), this.dtype != null && (t.dtype = this.dtype), t;
  }
  disposeWeights() {
    return this.weights.forEach((t) => t.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let t = 0;
    return --this._refCount === 0 && (t = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: t };
  }
}
function U3(n) {
  n = ie(n);
  const t = [];
  for (const e of n)
    t.push(e.shape);
  return fn(t);
}
function Y3(n) {
  return "float32";
}
function RI(n, t, e) {
  if ((t == null || e != null && e > 0) && (t = n.sourceLayer, e = n.nodeIndex), t.inboundNodes.length === 0)
    return [n];
  {
    const s = t.inboundNodes[e];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      const r = [];
      for (let o = 0; o < s.inboundLayers.length; o++) {
        const i = s.inputTensors[o], a = s.inboundLayers[o], l = s.nodeIndices[o], c = RI(i, a, l);
        for (const u of c)
          r.indexOf(u) === -1 && r.push(u);
      }
      return r;
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class la extends _t {
  constructor(t) {
    if (super({
      dtype: t.dtype,
      name: t.name != null ? t.name : tp("input").toString()
    }), t.batchSize == null && (t.batchSize = null), t.sparse == null && (t.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = t.sparse, t.inputShape != null && t.batchInputShape != null)
      throw new P("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let e = t.batchInputShape;
    if (e == null) {
      if (t.inputShape == null)
        throw new P("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      e = [t.batchSize].concat(t.inputShape);
    } else if (t.batchSize != null)
      throw new P("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = t.dtype || "float32";
    this.batchInputShape = e, this.dtype = s, this.inputSpec = [{ shape: e }];
    const r = new ms(this.dtype, this.batchInputShape, this, [], {}, this.name);
    r.nodeIndex = 0, r.tensorIndex = 0, new cp({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [r],
      outputTensors: [r],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [e],
      outputShapes: [e]
    });
  }
  apply(t, e) {
    throw new P(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
la.className = "InputLayer";
st(la);
function EI(n) {
  if (n.batchShape == null && n.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null)
    throw new P("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = n.batchShape;
  n.shape != null && t == null && (t = [null].concat(n.shape));
  let e = n.dtype;
  return e == null && (e = "float32"), new la({
    batchInputShape: t,
    name: n.name,
    dtype: e,
    sparse: n.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function j3(n, t) {
  if (n.dtype == null || n.dtype === t.dtype)
    return t;
  try {
    return ut(t, n.dtype);
  } catch {
    throw new P(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class pr {
  constructor(t) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof pr)
      for (const e in t.id2Value)
        this.id2Value[e] = t.id2Value[e], e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
    else {
      if (t == null)
        return;
      for (const e of t)
        this.add(e.key, e.value);
    }
  }
  add(t, e, s) {
    if (this.id2Value[t.id] == null)
      this.id2Value[t.id] = j3(t, e), this.name2Id[t.name] = t.id, s != null && (this.id2Mask[t.id] = s);
    else
      throw new P(`Duplicate key: name=${t.name}, id=${t.id}`);
    return this;
  }
  addFeed(t) {
    this.add(t.key, t.value);
  }
  hasKey(t) {
    return this.id2Value[t.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(t) {
    if (t instanceof ms) {
      if (this.id2Value[t.id] == null)
        throw new P(`Nonexistent key: ${t.name}`);
      return this.id2Value[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new P(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Value[e];
    }
  }
  getMask(t) {
    if (t instanceof ms) {
      if (this.id2Value[t.id] == null)
        throw new P(`Nonexistent key: ${t.name}`);
      return this.id2Mask[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new P(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Mask[e];
    }
  }
  disposeMasks() {
    this.id2Mask != null && Dt(this.id2Mask);
  }
}
const Du = new bI(), Gu = new bI();
function J3(n) {
  Du != null && Du.setMaxEntries(n), Gu != null && Gu.setMaxEntries(n);
}
function La(n, t, e, s) {
  const r = e == null ? !1 : e.training, o = Array.isArray(n), i = o ? n : [n], a = i.map((f) => f.name), l = [], c = t.names();
  for (const f of a)
    c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
  s != null && (s.maxNumTensors = -1 / 0, s.minNumTensors = 1 / 0);
  const u = a.join(",") + "|" + t.names().sort().join(",");
  let h = Du.get(u), d;
  if (h == null) {
    const f = Q3(i, t);
    h = f.sorted, d = f.recipientCounts, Du.put(u, h), Gu.put(u, d);
  }
  d = {}, r || Object.assign(d, Gu.get(u));
  const p = new pr(t);
  for (let f = 0; f < h.length; ++f) {
    if (s != null) {
      const R = Za().numTensors;
      R > s.maxNumTensors && (s.maxNumTensors = R), R < s.minNumTensors && (s.minNumTensors = R);
    }
    const m = h[f], g = m.sourceLayer;
    if (g instanceof la)
      continue;
    const y = [], b = [], w = [];
    let x = !1;
    for (const R of m.inputs) {
      const E = p.getValue(R), V = p.getMask(R);
      y.push(E), b.push(V), V != null && (x = !0), r || (d[R.name]--, d[R.name] === 0 && !t.hasKey(R) && a.indexOf(R.name) === -1 && !E.isDisposed && R.sourceLayer.stateful !== !0 && w.push(E));
    }
    x && (e = e || {}, e.mask = b[0]);
    const S = ie(g.apply(y, e));
    let v = null;
    g.supportsMasking && (v = g.computeMask(y, b));
    const T = tG(m), $ = Array.isArray(T) ? T : [T];
    for (let R = 0; R < $.length; ++R) {
      p.hasKey($[R]) || p.add($[R], S[R], Array.isArray(v) ? v[0] : v);
      const E = a.indexOf($[R].name);
      E !== -1 && (l[E] = S[R]);
    }
    r || Dt(w);
  }
  return p.disposeMasks(), o ? l : l[0];
}
function Q3(n, t) {
  k(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let e = [], s = {};
  if (n.length === 1) {
    const r = M0(n[0], t);
    e = r.sorted, s = r.recipientMap;
  } else {
    const r = /* @__PURE__ */ new Set();
    for (const o of n) {
      const { sorted: i, recipientMap: a } = M0(o, t);
      for (const l of i)
        r.has(l.name) || (e.push(l), r.add(l.name));
      for (const l in a)
        s[l] == null && (s[l] = /* @__PURE__ */ new Set()), a[l].forEach((c) => s[l].add(c));
    }
  }
  return {
    sorted: e,
    recipientCounts: q3(s)
  };
}
function q3(n) {
  const t = {};
  for (const e in n)
    t[e] = n[e].size;
  return t;
}
function M0(n, t) {
  const e = /* @__PURE__ */ new Set(), s = [], r = {};
  for (const a of t.names())
    e.add(a);
  const o = [], i = [];
  for (o.push(n); o.length > 0; ) {
    const a = o[o.length - 1];
    if (e.has(a.name)) {
      o.pop();
      continue;
    }
    const l = i[i.length - 1] === o.length - 1;
    if (a.inputs.length === 0 || l)
      o.pop(), s.push(a), e.add(a.name), l && i.pop();
    else {
      i.push(o.length - 1);
      for (const c of a.inputs)
        r[c.name] == null && (r[c.name] = /* @__PURE__ */ new Set()), r[c.name].add(a.name), !e.has(c.name) && o.push(c);
    }
  }
  return { sorted: s, recipientMap: r };
}
function tG(n) {
  let t;
  if (n.sourceLayer.inboundNodes.length === 1)
    t = n.sourceLayer.output;
  else {
    let e = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
      for (const r of n.sourceLayer.inboundNodes[s].outputTensors)
        if (r.id === n.id) {
          e = s;
          break;
        }
    t = n.sourceLayer.getOutputAt(e);
  }
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eG = K();
eG.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, J3);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ly(n, t) {
  return M(() => Ue(yt(A(n, n), t, !0)));
}
class Gc extends yo {
  getConfig() {
    return {};
  }
}
class Dy extends Gc {
  constructor(t) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return M(() => {
      const e = Ly(t, this.axis), s = gn(e, 0, this.maxValue);
      return A(t, St(s, nt(Fe(), e)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
Dy.className = "MaxNorm";
st(Dy);
class Gy extends Gc {
  constructor(t) {
    super(), this.defaultAxis = 0, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return M(() => St(t, nt(Fe(), Ly(t, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
Gy.className = "UnitNorm";
st(Gy);
class Fy extends Gc {
  apply(t) {
    return vs(t);
  }
}
Fy.className = "NonNeg";
st(Fy);
class Oy extends Gc {
  constructor(t) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = t.minValue != null ? t.minValue : this.defaultMinValue, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.rate = t.rate != null ? t.rate : this.defaultRate, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return M(() => {
      const e = Ly(t, this.axis), s = nt(A(this.rate, gn(e, this.minValue, this.maxValue)), A(1 - this.rate, e));
      return A(t, St(s, nt(Fe(), e)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
Oy.className = "MinMaxNorm";
st(Oy);
const X0 = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function Oe(n) {
  return wy(n);
}
function _0(n, t = {}) {
  return $c(n, Pn.getMap().classNameMap, t, "constraint");
}
function Ae(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in X0 ? X0[n] : n, config: {} };
    return _0(e);
  } else
    return n instanceof Gc ? n : _0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function nG(n) {
  return new Dy(n);
}
function sG(n) {
  return new Gy(n);
}
function rG() {
  return new Fy();
}
function oG(n) {
  return new Oy(n);
}
const iG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  maxNorm: nG,
  unitNorm: sG,
  nonNeg: rG,
  minMaxNorm: oG
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function aG() {
  return new vy();
}
function lG() {
  return new np();
}
function cG(n) {
  return new Cy(n);
}
function uG(n) {
  return new ky(n);
}
function hG(n) {
  return new Ny(n);
}
function dG(n) {
  return new Ty(n);
}
function pG(n) {
  return new $y(n);
}
function fG(n) {
  return new bn(n);
}
function mG(n) {
  return new sp(n);
}
function gG(n) {
  return new rp(n);
}
function yG(n) {
  return new op(n);
}
function bG(n) {
  return new ip(n);
}
function xG(n) {
  return new ap(n);
}
function wG(n) {
  return new lp(n);
}
function IG(n) {
  return new Ry(n);
}
const SG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  zeros: aG,
  ones: lG,
  constant: cG,
  randomUniform: uG,
  randomNormal: hG,
  truncatedNormal: dG,
  identity: pG,
  varianceScaling: fG,
  glorotUniform: mG,
  glorotNormal: gG,
  heNormal: yG,
  heUniform: bG,
  leCunNormal: xG,
  leCunUniform: wG,
  orthogonal: IG
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function hr(n) {
  if (n == null)
    return;
  const t = [], e = [], s = [];
  for (const r in n) {
    const o = n[r];
    if (typeof o != "number") {
      const i = o;
      t.push(i.data()), e.push(r), s.push(i);
    }
  }
  if (t.length > 0) {
    const r = await Promise.all(t);
    for (let o = 0; o < r.length; ++o)
      n[e[o]] = r[o][0];
    Dt(s);
  }
}
function LI(n) {
  if (n != null)
    for (const t in n) {
      const e = n[t];
      typeof e != "number" && e.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var K0;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(K0 || (K0 = {}));
const vG = 125;
class Ho {
  constructor() {
    this.validationData = null;
  }
  setParams(t) {
    this.params = t;
  }
  async onEpochBegin(t, e) {
  }
  async onEpochEnd(t, e) {
  }
  async onBatchBegin(t, e) {
  }
  async onBatchEnd(t, e) {
  }
  async onTrainBegin(t) {
  }
  async onTrainEnd(t) {
  }
  setModel(t) {
  }
}
class DI {
  constructor(t, e = 10) {
    t == null && (t = []), this.callbacks = t, this.queueLength = e;
  }
  append(t) {
    this.callbacks.push(t);
  }
  setParams(t) {
    for (const e of this.callbacks)
      e.setParams(t);
  }
  setModel(t) {
    for (const e of this.callbacks)
      e.setModel(t);
  }
  async onEpochBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochBegin(t, e);
  }
  async onEpochEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochEnd(t, e);
  }
  async onBatchBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchBegin(t, e);
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchEnd(t, e);
  }
  async onTrainBegin(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainBegin(t);
  }
  async onTrainEnd(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainEnd(t);
  }
}
class CG extends Ho {
  constructor() {
    super();
  }
  async onEpochBegin(t) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    const s = e.size == null ? 0 : e.size;
    this.seen += s;
    for (const r in e) {
      const o = e[r];
      if (typeof o == "number")
        this.totals.hasOwnProperty(r) || (this.totals[r] = 0), this.totals[r] = this.totals[r] + o * s;
      else {
        let i;
        r in this.totals ? i = this.totals[r] : this.totals[r] = 0;
        const a = M(() => nt(this.totals[r], A(o, s)));
        this.totals[r] = a, i != null && i.dispose();
      }
    }
  }
  async onEpochEnd(t, e) {
    if (e != null)
      for (const s of this.params.metrics)
        this.totals[s] != null && (typeof this.totals[s] == "number" ? e[s] = this.totals[s] / this.seen : M(() => {
          const r = A(St(1, this.seen), this.totals[s]);
          e[s] = r, this.totals[s].dispose(), Se(e[s]);
        }));
  }
}
class GI extends Ho {
  async onTrainBegin(t) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(t, e) {
    e == null && (e = {}), this.epoch.push(t);
    for (const s in e)
      this.history[s] == null && (this.history[s] = []), this.history[s].push(e[s]);
  }
  async syncData() {
    const t = [], e = [], s = [];
    for (const o in this.history) {
      const i = this.history[o];
      for (let a = 0; a < i.length; ++a)
        if (typeof i[a] != "number") {
          const l = i[a];
          t.push(l.data()), e.push(o), s.push(a);
        }
    }
    const r = await Promise.all(t);
    for (let o = 0; o < r.length; ++o)
      this.history[e[o]][s[o]].dispose(), this.history[e[o]][s[o]] = r[o][0];
  }
}
class FI extends Ho {
  constructor(t, e) {
    if (super(), this.currentEpoch = 0, this.nowFunc = t.nowFunc, this.nextFrameFunc = t.nextFrameFunc || Cc, this.yieldEvery = e || "auto", this.yieldEvery === "auto" && (this.yieldEvery = vG), this.yieldEvery === "never" && t.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    xu(this.yieldEvery) && (this.maybeWait = v3(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = t.onTrainBegin, this.trainEnd = t.onTrainEnd, this.epochBegin = t.onEpochBegin, this.epochEnd = t.onEpochEnd, this.batchBegin = t.onBatchBegin, this.batchEnd = t.onBatchEnd, this.yield = t.onYield;
  }
  async maybeWait(t, e, s) {
    const r = [];
    this.yield != null && (await hr(s), r.push(this.yield(t, e, s))), r.push(this.nextFrameFunc()), await Promise.all(r);
  }
  async onEpochBegin(t, e) {
    this.currentEpoch = t, this.epochBegin != null && (await hr(e), await this.epochBegin(t, e));
  }
  async onEpochEnd(t, e) {
    const s = [];
    this.epochEnd != null && (await hr(e), s.push(this.epochEnd(t, e))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(t, e) {
    this.batchBegin != null && (await hr(e), await this.batchBegin(t, e));
  }
  async onBatchEnd(t, e) {
    const s = [];
    this.batchEnd != null && (await hr(e), s.push(this.batchEnd(t, e))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : xu(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, t, e)), await Promise.all(s);
  }
  async onTrainBegin(t) {
    this.trainBegin != null && (await hr(t), await this.trainBegin(t));
  }
  async onTrainEnd(t) {
    this.trainEnd != null && (await hr(t), await this.trainEnd(t));
  }
}
function OI(n, t) {
  return n == null && (n = {}), n instanceof Ho ? [n] : Array.isArray(n) && n[0] instanceof Ho ? n : ie(n).map((s) => new FI(s, t));
}
class Wn {
  constructor() {
  }
  static registerCallbackConstructor(t, e) {
    k(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), Wn.checkForDuplicate(e), Wn.constructors[t] == null && (Wn.constructors[t] = []), Wn.constructors[t].push(e);
  }
  static checkForDuplicate(t) {
    for (const e in Wn.constructors)
      Wn.constructors[+e].forEach((r) => {
        if (r === t)
          throw new P("Duplicate callback constructor.");
      });
  }
  static clear() {
    Wn.constructors = {};
  }
  static createCallbacks(t) {
    const e = [];
    for (const s in Wn.constructors) {
      const r = +s;
      t >= r && e.push(...Wn.constructors[r]);
    }
    return e.map((s) => new s());
  }
}
Wn.constructors = {};
function AI(n, t, e, s, r, o, i, a, l) {
  const c = new GI(), u = [
    new CG(),
    ...Wn.createCallbacks(t)
  ];
  n != null && u.push(...n), u.push(c);
  const h = new DI(u);
  return h.setParams({
    epochs: e,
    initialEpoch: s,
    samples: r,
    steps: o,
    batchSize: i,
    verbose: t,
    doValidation: a,
    metrics: l
  }), { callbackList: h, history: c };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ys(n, t = {}, e = !1) {
  return $c(n, Pn.getMap().classNameMap, t, "layer", e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Fu(n, t) {
  return M(() => {
    n.dtype !== "float32" && (n = ut(n, "float32"));
    const e = yt(Lc(n), t, !0), s = bo(e.shape, Fe()), r = Ue(Ps(e, s));
    return St(n, r);
  });
}
function vo(n, t) {
  return M(() => ye(Lc(mt(t, n)), -1));
}
function up(n, t) {
  return M(() => ye($e(mt(t, n)), -1));
}
function ca(n, t) {
  return M(() => {
    const e = mt(n, t), s = gn($e(n), Fe(), Number.MAX_VALUE), r = $e(St(e, s));
    return A(100, ye(r, -1));
  });
}
function kG(n, t) {
  return M(() => {
    const e = gn(t, Fe(), Number.MAX_VALUE), s = Gn(nt(1, e)), r = gn(n, Fe(), Number.MAX_VALUE), o = Gn(nt(1, r));
    return ye(Lc(mt(s, o)), -1);
  });
}
function NG(n, t) {
  return M(() => {
    const e = Ps(0, mt(1, A(n, t)));
    return ye(Lc(e), -1);
  });
}
function TG(n, t) {
  return M(() => {
    const e = Ps(0, mt(1, A(n, t)));
    return ye(e, -1);
  });
}
function $G(n, t) {
  return M(() => {
    const e = yt(A(n, t), -1), s = os(A(mt(1, n), t), -1);
    return Ps(0, nt(1, mt(s, e)));
  });
}
function RG(n, t) {
  return M(() => {
    const e = Math.log(2), s = mt(t, n), r = mt(nt(s, xo(A(-2, s))), e);
    return ye(r, -1);
  });
}
function ja(n, t, e = !1) {
  return M(() => {
    if (e)
      t = wc(t);
    else {
      const s = yt(t, t.shape.length - 1, !0);
      t = St(t, s);
    }
    return t = gn(t, Fe(), 1 - Fe()), ce(yt(A(ut(n, "float32"), Gn(t)), t.shape.length - 1));
  });
}
function Ou(n, t, e = !1) {
  return M(() => {
    const s = ut(na(O3(n)), "int32");
    t = gn(t, Fe(), 1 - Fe());
    const r = t.shape, o = W(Mo(s, r[r.length - 1]), r);
    return ja(o, t, e);
  });
}
function EG(n, t) {
  if (!Vt(n.shape, t.shape))
    throw new P(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);
  return M(() => {
    const e = vs(t), s = ce($e(t));
    return nt(mt(e, A(t, n)), dc(Dn(s)));
  });
}
function hp(n, t) {
  return M(() => {
    let e;
    return e = gn(t, Fe(), 1 - Fe()), e = Gn(St(e, mt(1, e))), ye(EG(n, e), -1);
  });
}
function LG(n, t) {
  return M(() => {
    const e = gn(n, Fe(), 1), s = gn(t, Fe(), 1);
    return yt(A(n, Gn(St(e, s))), -1);
  });
}
function DG(n, t) {
  return M(() => {
    const e = Gn(nt(Fe(), t));
    return ye(mt(t, A(n, e)), -1);
  });
}
function Ay(n, t) {
  return M(() => {
    const e = Fu(n, -1), s = Fu(t, -1), r = A(e, s);
    return ce(yt(r, -1));
  });
}
const Au = {
  meanSquaredError: vo,
  meanAbsoluteError: up,
  meanAbsolutePercentageError: ca,
  meanSquaredLogarithmicError: kG,
  squaredHinge: NG,
  hinge: TG,
  categoricalHinge: $G,
  logcosh: RG,
  categoricalCrossentropy: ja,
  sparseCategoricalCrossentropy: Ou,
  binaryCrossentropy: hp,
  kullbackLeiblerDivergence: LG,
  poisson: DG,
  cosineProximity: Ay
};
function Ap(n) {
  if (typeof n == "string") {
    if (n in Au)
      return Au[n];
    let t = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new P(t);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function zy(n, t) {
  return M(() => {
    const e = A(0.5, Fn(t)), s = Rc(In(t, e), n.dtype);
    return ye(Ln(n, s), -1);
  });
}
function Wy(n, t) {
  return M(() => Rc(Ln(ro(n, -1), ro(t, -1)), "float32"));
}
function zI(n, t) {
  return M(() => ut(yt(is(Ln(n, 1), Ln(t, 1))), "float32"));
}
function GG(n, t) {
  return M(() => ut(yt(is(Ln(n, 1), Ln(t, 0))), "float32"));
}
function FG(n, t) {
  return M(() => ut(yt(is(Ln(n, 0), Ln(t, 1))), "float32"));
}
function WI(n, t) {
  return M(() => {
    const e = zI(n, t), s = FG(n, t), r = nt(e, s);
    return ut(tn(In(r, 0), St(e, r), 0), "float32");
  });
}
function OG(n, t) {
  return M(() => {
    const e = zI(n, t), s = GG(n, t), r = nt(e, s);
    return ut(tn(In(r, 0), St(e, r), 0), "float32");
  });
}
function VI(n, t) {
  return hp(n, t);
}
function PI(n, t) {
  return n.rank === t.rank && (n = Or(n, [n.rank - 1])), t = ro(t, -1), t.dtype !== n.dtype && (t = ut(t, n.dtype)), ut(Ln(n, t), "float32");
}
const AG = vo, zG = vo, WG = up, VG = up, PG = ca, MG = ca, Vy = ja, XG = Ay, MI = Ou, zu = {
  binaryAccuracy: zy,
  categoricalAccuracy: Wy,
  precision: WI,
  categoricalCrossentropy: Vy,
  sparseCategoricalCrossentropy: MI,
  mse: AG,
  MSE: zG,
  mae: WG,
  MAE: VG,
  mape: PG,
  MAPE: MG,
  cosine: XG
};
function _G(n) {
  if (typeof n == "string" && n in zu)
    return zu[n];
  if (typeof n != "string" && n != null)
    return n;
  throw new P(`Unknown metric ${n}`);
}
function Qc(n) {
  if ($s(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string")
    return n;
  {
    let t;
    for (const e of Object.keys(Au))
      if (Au[e] === n) {
        t = e;
        break;
      }
    if (t !== void 0)
      return t;
    for (const e of Object.keys(zu))
      if (zu[e] === n) {
        t = e;
        break;
      }
    return t !== void 0 ? t : n.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function KG(n) {
  const t = {
    Adagrad: () => Mr.adagrad(0.01),
    Adadelta: () => Mr.adadelta(1, 0.95, Fe()),
    Adam: () => Mr.adam(1e-3, 0.9, 0.999, Fe()),
    Adamax: () => Mr.adamax(2e-3, 0.9, 0.999, Fe(), 0),
    RMSProp: () => Mr.rmsprop(1e-3, 0.9, 0, Fe()),
    SGD: () => Mr.sgd(0.01)
  };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, n in t)
    return t[n]();
  throw new P(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Z0 = 1 * 1024 * 1024;
function B0(n, t, e = !1) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !Ff(n))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (e) {
    const s = JSON.stringify(n);
    s.length > Z0 && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${Z0}.`);
  }
}
function Ff(n) {
  if (n === null)
    return !0;
  if (typeof n == "object")
    if (Object.getPrototypeOf(n) === Object.prototype) {
      const t = Object.keys(n);
      for (const e of t)
        if (typeof e != "string" || !Ff(n[e]))
          return !1;
      return !0;
    } else if (Array.isArray(n)) {
      for (const t of n)
        if (!Ff(t))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const t = typeof n;
    return t === "string" || t === "number" || t === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ZG(n, t, e, s = console.log) {
  const r = HG(n), o = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (t = t || 90, e = e || [0.32, 0.61, 0.89, 1]) : (t = t || 115, e = e || [0.24, 0.48, 0.7, 0.8, 1]), e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
  let i;
  if (!r) {
    o.push("Receives inputs"), i = [];
    for (const u in n.nodesByDepth)
      i.push(...n.nodesByDepth[u]);
  }
  s("_".repeat(t)), Wu(o, e, s), s("=".repeat(t));
  const a = n.layers;
  for (let u = 0; u < a.length; ++u)
    r ? UG(a[u], e, s) : YG(a[u], e, i, s), s((u === a.length - 1 ? "=" : "_").repeat(t));
  n.checkTrainableWeightsConsistency();
  const l = BG(n), c = Lu(n.nonTrainableWeights);
  s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(t));
}
function BG(n) {
  let t;
  return n.collectedTrainableWeights != null ? t = Lu(n.collectedTrainableWeights) : t = Lu(n.trainableWeights), t;
}
function HG(n) {
  let t = !0;
  const e = [], s = [];
  for (const r in n.nodesByDepth)
    e.push(n.nodesByDepth[r]);
  for (const r of e) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      t = !1;
      break;
    }
    s.push(...r);
  }
  if (t)
    for (const r of n.layers) {
      let o = !1;
      for (const i of r.inboundNodes)
        if (s.indexOf(i) !== -1)
          if (o) {
            t = !1;
            break;
          } else
            o = !0;
      if (!t)
        break;
    }
  return t;
}
function Wu(n, t, e = console.log) {
  let s = "";
  for (let r = 0; r < n.length; ++r)
    r > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[r], s = s.slice(0, t[r]), s += " ".repeat(t[r] - s.length);
  e(s);
}
function UG(n, t, e) {
  let s, r;
  try {
    r = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const o = n.name, i = n.getClassName(), a = [
    `${o} (${i})`,
    r,
    s,
    n.countParams().toString()
  ];
  Wu(a, t, e);
}
function YG(n, t, e, s) {
  let r, o;
  try {
    o = n.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
  } catch {
    o = "multiple";
  }
  try {
    r = JSON.stringify(n.outputShape);
  } catch {
    r = "multiple";
  }
  const i = [];
  for (const h of n.inboundNodes)
    if (!(e != null && e.length > 0 && e.indexOf(h) === -1))
      for (let d = 0; d < h.inboundLayers.length; ++d) {
        const p = h.inboundLayers[d].name, f = h.nodeIndices[d], m = h.tensorIndices[d];
        i.push(`${p}[${f}][${m}]`);
      }
  const a = n.name, l = n.getClassName(), c = i.length === 0 ? "" : i[0], u = [
    `${a} (${l})`,
    o,
    r,
    n.countParams().toString(),
    c
  ];
  Wu(u, t, s);
  for (let h = 1; h < i.length; ++h)
    Wu(["", "", "", "", i[h]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function XI(n, t, e) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && t === 0 && typeof e == "string";
}
function Ja(n, t) {
  if (n === null)
    return null;
  if (typeof n == "string")
    return _r(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      XI(t, r, o) ? e.push(o) : e.push(Ja(o, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const r = n[s];
      if (s === "name" && typeof r == "string")
        e[s] = r;
      else {
        const o = _r(s);
        e[o] = Ja(r, o);
      }
    }
    return e;
  }
}
function Of(n, t) {
  if (n == null)
    return null;
  if (typeof n == "string")
    return Ms(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      XI(t, r, o) ? e.push(o) : e.push(Of(o, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const r = n[s], o = Ms(s);
      (s === "name" || s === "className") && typeof r == "string" ? e[o] = r : e[o] = Of(r, s);
    }
    return e;
  }
}
/** @license See the LICENSE file. */
const dp = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ds extends _t {
  constructor(t) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = t.name, this.name == null) {
      const b = this.getClassName().toLowerCase();
      this.name = tp(b);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], br(this.inputs).length !== this.inputs.length)
      throw new P(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
    br(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const b of this.outputs) {
      const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
      this.outputLayers.push(w), this.outputLayersNodeIndices.push(x), this.outputLayersTensorIndices.push(S);
    }
    for (const b of this.inputs) {
      const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
      $s(x === 0, "input layer has >1 nodes"), $s(S === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(x), this.inputLayersTensorIndices.push(S);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let b = 0; b < this.inputLayers.length; b++) {
      const w = this.inputLayers[b];
      if (!(w instanceof la))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);
      this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
    }
    for (const b of this.outputLayers)
      this.outputNames.push(b.name);
    this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
    const e = {}, s = {}, r = {}, o = {}, i = {}, a = [], l = (b, w, x, S, v, T) => {
      (S == null || v == null || T == null) && (S = b.sourceLayer, v = b.nodeIndex, T = b.tensorIndex);
      const $ = S.inboundNodes[v];
      if (x.indexOf($) !== -1)
        throw new ss(`The tensor ${b.name} at layer "${S.name}" is part of a cycle.`);
      if (w.indexOf($) !== -1)
        return;
      this.containerNodes.add(ds.nodeKey(S, v)), S.id in i || (i[S.id] = Object.keys(i).length), x.indexOf($) === -1 && x.push($);
      const R = $.inboundLayers.length;
      for (let E = 0; E < R; E++) {
        const V = $.inputTensors[E], X = $.inboundLayers[E], _ = $.nodeIndices[E], B = $.tensorIndices[E];
        l(V, w, x, X, _, B);
      }
      for (w.push($); x.indexOf($) >= 0; )
        x.splice(x.indexOf($), 1);
      a.push($);
    }, c = [], u = [];
    for (const b of this.outputs)
      l(b, c, u);
    const h = a.slice().reverse();
    for (const b of h) {
      s[b.id] = b, b.id in e || (e[b.id] = 0);
      let w = e[b.id];
      const x = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
      w = Math.max(w, x), r[b.outboundLayer.id] = w, o[b.outboundLayer.id] = b.outboundLayer, e[b.id] = w;
      for (let S = 0; S < b.inboundLayers.length; S++) {
        const v = b.inboundLayers[S], T = b.nodeIndices[S], $ = v.inboundNodes[T], R = e[$.id] == null ? 0 : e[$.id];
        e[$.id] = Math.max(w + 1, R), s[$.id] = $;
      }
    }
    const d = {};
    for (const b in e) {
      const w = e[b];
      w in d || (d[w] = []), d[w].push(s[b]);
    }
    const p = {};
    for (const b in r) {
      const w = r[b];
      w in p || (p[w] = []), p[w].push(o[b]);
    }
    let f = Object.keys(p).map((b) => parseInt(b, 10)).sort(Yc);
    this.layers = [];
    for (const b of f) {
      const w = p[b];
      w.sort((x, S) => {
        const v = i[x.id], T = i[S.id];
        return v < T ? -1 : v > T ? 1 : 0;
      });
      for (const x of w)
        x instanceof ds && this.internalContainerRefs.push(x), this.layers.push(x);
    }
    this.layersByDepth = p, f = Object.keys(d).map((b) => parseInt(b, 10)).sort(Yc);
    const m = this.inputs.slice(), g = [];
    for (const b of f)
      for (const w of d[b]) {
        const x = w.outboundLayer;
        if (x != null) {
          for (const S of w.inputTensors)
            if (m.indexOf(S) === -1)
              throw new ss(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${x.name}". The following previous layers were accessed without issue: ${g}`);
          for (const S of w.outputTensors)
            m.push(S);
          g.push(x.name);
        }
      }
    this.nodesByDepth = d;
    const y = this.layers.map((b) => b.name);
    for (const b of y) {
      const w = y.filter((x) => x === b).length;
      if (w !== 1)
        throw new ss(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
    }
    this.outboundNodes = [], this.inboundNodes = [], new cp({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((b) => null),
      outputMasks: this.outputs.map((b) => null),
      inputShapes: this.inputs.map((b) => b.shape),
      outputShapes: this.outputs.map((b) => b.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const e of this.layers)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
      for (const e of this.internalContainerRefs)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
    }
    return t.refCountAfterDispose = this._refCount, t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.layers.forEach((e) => {
      e._trainableWeights.forEach((s) => s.trainable = t);
    }), this.trainable_ = t;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new P("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let t = [];
    for (const e of this.layers)
      t = t.concat(e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.layers)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.layers)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(t, e = !0) {
    const s = {};
    let r = 0;
    for (const i of this.layers)
      for (const a of i.weights) {
        if (s[a.originalName] != null)
          throw new P(`Duplicate weight name: ${a.originalName}`);
        s[a.originalName] = a, r++;
      }
    const o = [];
    for (const i in t) {
      let a = i;
      if (s[i] == null) {
        const l = i.split("/");
        a = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (s[a] != null)
        o.push([s[a], t[i]]);
      else if (e)
        throw new P(`Provided weight data has no target variable: ${i}`);
      delete s[a];
    }
    if (e) {
      const i = [];
      for (const a in s)
        i.push(a);
      if (i.length > 0)
        throw new P(`${i.length} of ${r} weights are not set: ${i}`);
    }
    Ey(o);
  }
  updatedConfig() {
    const t = this.getConfig(), e = {};
    return e.className = this.getClassName(), e.config = t, e.kerasVersion = `tfjs-layers ${dp}`, e.backend = "TensorFlow.js", e;
  }
  toJSON(t, e = !0) {
    const s = Of(this.updatedConfig());
    return e ? JSON.stringify(s) : s;
  }
  call(t, e) {
    return M(() => {
      t = ie(t);
      const s = new pr();
      for (let r = 0; r < this.inputs.length; ++r)
        s.add(this.inputs[r], t[r]);
      return La(this.outputs, s, e);
    });
  }
  computeMask(t, e) {
    return M(() => {
      t = ie(t);
      let s;
      return e == null ? s = ao(null, t.length) : s = ie(e), this.runInternalGraph(t, s)[1];
    });
  }
  computeOutputShape(t) {
    const e = Eu(t);
    if (e.length !== this.inputLayers.length)
      throw new P(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let a = 0; a < e.length; a++) {
      const l = this.inputLayers[a], c = e[a], u = l.name + "_0_0";
      s[u] = c;
    }
    const r = Object.keys(this.nodesByDepth).map((a) => parseInt(a, 10)).sort(Yc);
    if (r.length > 1)
      for (const a of r) {
        const l = this.nodesByDepth[a];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
            continue;
          const h = [];
          for (let m = 0; m < c.inboundLayers.length; m++) {
            const g = c.inboundLayers[m], y = c.nodeIndices[m], b = c.tensorIndices[m], w = `${g.name}_${y}_${b}`, x = s[w];
            h.push(x);
          }
          const d = u.computeOutputShape(fn(h)), p = Eu(d), f = u.inboundNodes.indexOf(c);
          for (let m = 0; m < p.length; m++) {
            const g = `${u.name}_${f}_${m}`;
            s[g] = p[m];
          }
        }
      }
    const o = [], i = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      const l = this.outputLayers[a], c = this.outputLayersNodeIndices[a], u = this.outputLayersTensorIndices[a], h = `${l.name}_${c}_${u}`;
      i.push(h);
    }
    for (let a = 0; a < i.length; a++) {
      const l = i[a];
      $s(l in s), o.push(s[l]);
    }
    return fn(o);
  }
  runInternalGraph(t, e) {
    e == null && (e = ao(null, t.length));
    const s = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const c = this.inputs[l], u = t[l], h = e[l];
      s[c.id] = [u, h];
    }
    const r = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Yc);
    for (const l of r) {
      const c = this.nodesByDepth[l];
      for (const u of c) {
        const h = u.outboundLayer, d = u.inputTensors, p = u.outputTensors, f = new Array();
        for (const m of d)
          m.id in s && f.push(s[m.id]);
        if (f.length === d.length) {
          let m = {}, g, y, b, w;
          if (u.callArgs != null && (m = u.callArgs), f.length === 1) {
            const [x, S] = f[0];
            m.mask == null && (m.mask = S), b = ie(h.call(x, m)), w = ie(h.computeMask(x, S)), g = [x], y = [S];
          } else
            g = f.map((x) => x[0]), y = f.map((x) => x[1]), m.mask == null && (m.mask = y), b = ie(h.call(g, m)), w = ie(h.computeMask(g, y));
          if (h.activityRegularizer)
            throw new Gt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let x = 0; x < p.length; ++x) {
            const S = p[x], v = b[x], T = w[x];
            s[S.id] = [v, T];
          }
        }
      }
    }
    const o = [], i = [], a = [];
    for (const l of this.outputs) {
      $s(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
      const [c, u] = s[l.id];
      a.push(c.shape), o.push(c), i.push(u);
    }
    return [o, i, a];
  }
  buildNodeConversionMap(t) {
    const e = {};
    let s;
    for (const r of this.layers) {
      s = r instanceof ds ? 1 : 0;
      for (let o = 0; o < r.inboundNodes.length; o++) {
        const i = ds.nodeKey(r, o);
        this.containerNodes.has(i) && (e[i] = s, s += 1);
      }
    }
    return e;
  }
  getLayer(t, e) {
    if (e != null) {
      if (this.layers.length <= e)
        throw new P(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[e];
    } else if (t == null)
      throw new P("Provide either a layer name or layer index");
    for (const s of this.layers)
      if (s.name === t)
        return s;
    throw new P(`No such layer: ${t}`);
  }
  calculateLosses() {
    return M(() => {
      const t = [];
      for (const e of this.layers)
        for (let s = 0; s < e.inboundNodes.length; ++s) {
          const r = ds.nodeKey(e, s);
          this.containerNodes.has(r) && t.push(...e.calculateLosses());
        }
      return t;
    });
  }
  getConfig() {
    const t = { name: this.name }, e = this.buildNodeConversionMap(this.layers), s = [];
    for (const i of this.layers) {
      const a = i.getClassName(), l = i.getConfig(), c = [];
      for (let h = 0; h < i.inboundNodes.length; h++) {
        const d = i.inboundNodes[h], p = ds.nodeKey(i, h);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (d.callArgs)
            try {
              JSON.stringify(d.callArgs), f = d.callArgs;
            } catch {
              console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
          if (d.inboundLayers.length > 0) {
            const m = [];
            for (let g = 0; g < d.inboundLayers.length; g++) {
              const y = d.inboundLayers[g], b = d.nodeIndices[g], w = d.tensorIndices[g], x = ds.nodeKey(y, b);
              let S = e[x];
              S == null && (S = 0), m.push([y.name, S, w, f]);
            }
            c.push(m);
          }
        }
      }
      const u = {};
      u.name = i.name, u.className = a, u.config = l, u.inboundNodes = c, s.push(u);
    }
    t.layers = s;
    const r = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const a = this.inputLayers[i], l = this.inputLayersNodeIndices[i], c = ds.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.inputLayersTensorIndices[i];
      r.push([a.name, u, h]);
    }
    t.inputLayers = r;
    const o = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const a = this.outputLayers[i], l = this.outputLayersNodeIndices[i], c = ds.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.outputLayersTensorIndices[i];
      o.push([a.name, u, h]);
    }
    return t.outputLayers = o, t;
  }
  static fromConfig(t, e, s = {}, r = !1) {
    const o = {}, i = {};
    function a(g, y) {
      g.name in i ? i[g.name].push(y) : i[g.name] = [y];
    }
    function l(g, y) {
      const b = [];
      let w;
      for (const x of y) {
        const S = x[0], v = x[1], T = x[2];
        if (w = x[3] == null ? {} : x[3], !(S in o)) {
          a(g, y);
          return;
        }
        const $ = o[S];
        if ($.inboundNodes.length <= v) {
          a(g, y);
          return;
        }
        const R = $.inboundNodes[v];
        b.push(R.outputTensors[T]);
      }
      b.length > 0 && g.apply(fn(b), w);
    }
    function c(g) {
      const y = g.name, b = ys(g, e.customObjects != null ? e.customObjects : {});
      b.setFastWeightInitDuringBuild(r), o[y] = b, g.inboundNodes.forEach((x) => {
        if (!(x instanceof Array))
          throw new P(`Corrupted configuration, expected array for nodeData: ${x}`);
        a(b, x);
      });
    }
    const u = e.name, h = e.layers;
    for (const g of h)
      c(g);
    for (; !S3(i); )
      for (const g of h) {
        const y = o[g.name];
        if (y.name in i) {
          const b = i[y.name];
          delete i[y.name];
          for (const w of b)
            l(y, w);
        }
      }
    const d = [], p = [], f = e.inputLayers;
    for (const g of f) {
      const y = g[0], b = g[1], w = g[2];
      $s(y in o);
      const S = o[y].inboundNodes[b].outputTensors;
      d.push(S[w]);
    }
    const m = e.outputLayers;
    for (const g of m) {
      const y = g[0], b = g[1], w = g[2];
      $s(y in o);
      const S = o[y].inboundNodes[b].outputTensors;
      p.push(S[w]);
    }
    return new t({ inputs: d, outputs: p, name: u });
  }
  get stateful() {
    if (this._stateful)
      throw new P("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const t of this.layers)
      if (t.stateful)
        return !0;
    return !1;
  }
  resetStates() {
    M(() => {
      this.layers.forEach((t) => {
        t.stateful && t.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function jG(n, t, e) {
  const s = t.length;
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((r) => null);
  if (s === 1)
    return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && t[0] in n ? [n[t[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s)
      throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const r = [];
    return t.forEach((o) => {
      o in n ? r.push(n[o]) : r.push(null);
    }), r;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`);
}
function _I(n, t) {
  return jG(n, t, "classWeight");
}
async function KI(n, t, e, s) {
  if (t != null || s != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (e != null) {
    const r = M(() => {
      if (n.shape.length === 1)
        return Ds(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1)
          return ro(n, 1);
        if (n.shape[1] === 1)
          return W(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), o = Array.from(await r.data());
    Dt(r);
    const i = [];
    return o.forEach((a) => {
      if (e[a] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);
      i.push(e[a]);
    }), qe(i, "float32");
  } else
    return null;
}
function JG(n, t) {
  return A(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const QG = 32;
function ZI(n, t) {
  let e, s;
  const r = t;
  e = r.xs, s = r.ys, k(e != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  const o = H0("input", n.inputNames, e), i = H0("output", n.outputNames, s), a = o[0].shape[0];
  k(o.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), k(i.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let l = 0; l < o.length; l++)
    k(o[l].shape[0] === a, () => `Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  for (let l = 0; l < i.length; l++)
    k(i[l].shape[0] === a, () => `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  return { xs: o, ys: i };
}
function H0(n, t, e) {
  if (e instanceof Kt)
    return [e];
  if (Array.isArray(e))
    return k(e.length === t.length, () => `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`), e;
  {
    const s = [];
    for (const r of t) {
      if (e[r] == null)
        throw new P(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);
      s.push(e[r]);
    }
    return s;
  }
}
function qG(n) {
  if (n.length === 3)
    throw new Gt("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function tF(n, t, e) {
  const s = e.batchesPerEpoch != null;
  if (k(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), k(e != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), k(e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`), k(!s || e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`), k(
    e.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  try {
    const r = e.validationData != null;
    let o, i;
    if (r)
      if (U0(e.validationData))
        k(e.validationBatches == null || e.validationBatches > 0 && Number.isInteger(e.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);
      else {
        const g = qG(e.validationData);
        o = g.xs, i = g.ys;
      }
    const a = n.makeTrainFunction(), l = n.getDedupedMetricsNames();
    let c;
    r ? c = l.slice().concat(l.map((g) => "val_" + g)) : c = l.slice();
    const u = OI(e.callbacks, e.yieldEvery), h = e.verbose == null ? 1 : e.verbose, { callbackList: d, history: p } = AI(
      u,
      h,
      e.epochs,
      null,
      null,
      eF(t, e),
      null,
      r,
      c
    );
    d.setModel(n), n.history = p, await d.onTrainBegin(), n.stopTraining_ = !1;
    let f = e.initialEpoch == null ? 0 : e.initialEpoch, m = await t.iterator();
    for (; f < e.epochs; ) {
      const g = {};
      await d.onEpochBegin(f);
      let y = 0, b = 0;
      for (s || (m = await t.iterator()); !s || y < e.batchesPerEpoch; ) {
        const w = await m.next();
        if (s && w.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch * e.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (w.value != null) {
          const { xs: x, ys: S } = ZI(n, w.value), v = {};
          v.batch = b, v.size = x[0].shape[0], await d.onBatchBegin(b, v);
          const T = [];
          if (e.classWeight != null) {
            const E = _I(e.classWeight, n.outputNames);
            for (let V = 0; V < E.length; ++V)
              T.push(await KI(S[V], null, E[V]));
          }
          const $ = x.concat(S).concat(T), R = a($);
          Dt($);
          for (let E = 0; E < l.length; ++E) {
            const V = l[E], X = R[E];
            v[V] = X, Se(X);
          }
          await d.onBatchEnd(b, v), LI(v), b++, y++;
        }
        if (s ? y >= e.batchesPerEpoch : w.done) {
          if (r) {
            let x;
            U0(e.validationData) ? x = ie(await n.evaluateDataset(e.validationData, { batches: e.validationBatches })) : x = ie(n.evaluate(o, i, {
              batchSize: e.validationBatchSize == null ? QG : e.validationBatchSize,
              verbose: 0
            }));
            for (let S = 0; S < n.metricsNames.length; ++S)
              g[`val_${n.metricsNames[S]}`] = x[S];
          }
          break;
        }
        if (n.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(f, g), f++, n.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = !1;
  }
}
function eF(n, t) {
  let e = null;
  return t.batchesPerEpoch != null ? e = t.batchesPerEpoch : Number.isFinite(n.size) && (e = n.size), e;
}
function U0(n) {
  return typeof n.iterator == "function";
}
function nF(n) {
  return typeof n.next == "function";
}
async function sF(n, t, e) {
  e = e || {};
  const s = e.batches != null, r = n.testFunction;
  let o = [];
  if (e.verbose > 0)
    throw new Gt("Verbose mode is not implemented yet.");
  k(!s || e.batches > 0 && Number.isInteger(e.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);
  const i = nF(t) ? t : await t.iterator();
  let a = 0, l = 0;
  for (; !s || l < e.batches; ) {
    const c = await i.next();
    if (o = M(() => {
      if (c.value) {
        const { xs: u, ys: h } = ZI(n, c.value), d = u.concat(h), p = M(() => r(d));
        if (Dt(d), l === 0)
          for (let m = 0; m < p.length; ++m)
            o.push(Nt(0));
        const f = d[0].shape[0];
        for (let m = 0; m < p.length; ++m) {
          const g = p[m], y = o[m];
          o[m] = M(() => nt(o[m], A(f, g))), l > 0 && Dt(y);
        }
        Dt(p), a += f, ++l;
      }
      return o;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < o.length; ++c) {
    const u = o[c];
    o[c] = St(o[c], a), Dt(u);
  }
  return fn(o);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Af(n) {
  k(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function Da(n, t, e) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => qr(s, t, e - t)) : qr(n, t, e - t);
}
function Py(n, t) {
  return M(() => n == null ? null : Array.isArray(n) ? n.map((e) => Py(e, t)) : NI(n, t.dtype === "int32" ? t : ut(t, "int32")));
}
function zf(n, t) {
  const e = [];
  let s = 0, r = null;
  for (; s < n; )
    r = s + t, r >= n && (r = n), e.push([s, r]), s = r;
  return e;
}
async function rF(n, t, e, s, r, o, i, a, l, c, u, h, d, p, f) {
  r == null && (r = 32), o == null && (o = 1), u == null && (u = !0), d == null && (d = 0);
  let m = !1;
  if (l != null && c != null && (m = !0), f != null && (m = !0, p == null))
    throw new P("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
  const g = n.checkNumSamples(e, r, p, "steps_per_epoch");
  let y;
  g != null && (y = xs(0, g)), i == null && (i = 1);
  const { callbackList: b, history: w } = AI(a, i, o, d, g, p, r, m, h);
  b.setModel(n), n.history = w, await b.onTrainBegin(), n.stopTraining_ = !1;
  for (let x = d; x < o; ++x) {
    await b.onEpochBegin(x);
    const S = {};
    if (p != null)
      throw new Gt("stepsPerEpoch mode is not implemented yet.");
    {
      if (u === "batch")
        throw new Gt("batch shuffling is not implemneted yet");
      u && om(y);
      const v = qe(y), T = zf(g, r);
      for (let $ = 0; $ < T.length; ++$) {
        const R = {};
        if (await b.onBatchBegin($, R), M(() => {
          const E = T[$][0], V = T[$][1], X = qr(v, E, V - E);
          R.batch = $, R.size = V - E;
          const _ = Py(e, X), B = t(_);
          for (let U = 0; U < s.length; ++U) {
            const Y = s[U], tt = B[U];
            R[Y] = tt, Se(tt);
          }
          if ($ === T.length - 1 && m) {
            const U = n.testLoop(l, c, r);
            for (let Y = 0; Y < s.length; ++Y) {
              const tt = s[Y], J = U[Y];
              Se(J), S["val_" + tt] = J;
            }
          }
        }), await b.onBatchEnd($, R), LI(R), n.stopTraining_)
          break;
      }
      v.dispose();
    }
    if (await b.onEpochEnd(x, S), n.stopTraining_)
      break;
  }
  return await b.onTrainEnd(), await n.history.syncData(), n.history;
}
async function oF(n, t, e, s = {}) {
  if (n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  let r, o, i, a, l, c, u, h, d;
  try {
    const p = s.batchSize == null ? 32 : s.batchSize;
    Af(p);
    const f = !1, m = await n.standardizeUserData(t, e, s.sampleWeight, s.classWeight, f, p);
    r = m[0], o = m[1], d = m[2];
    let g = !1, y;
    if (s.validationData != null && s.validationData.length > 0) {
      if (g = !0, s.validationData.length === 2)
        l = s.validationData[0], c = s.validationData[1];
      else
        throw s.validationData.length === 3 ? new Gt("validationData including sample weights is not supported yet.") : new P(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
      const R = !0, E = await n.standardizeUserData(l, c, null, null, R, p);
      u = E[0], h = E[1], y = u.concat(h);
    } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
      g = !0;
      const R = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), E = r[0].shape[0];
      u = Da(r, R, E), i = r, r = Da(r, 0, R), h = Da(o, R, E), a = o, o = Da(o, 0, R), y = u.concat(h);
    } else
      s.validationSteps != null && (g = !0);
    const b = r.concat(o).concat(d);
    n.checkTrainableWeightsConsistency();
    const w = n.makeTrainFunction(), x = n.getDedupedMetricsNames();
    let S, v;
    g ? (n.makeTestFunction(), S = n.testFunction, v = x.slice().concat(x.map((R) => "val_" + R))) : (S = null, y = [], v = x.slice());
    const T = OI(s.callbacks, s.yieldEvery);
    return await rF(n, w, b, x, p, s.epochs, s.verbose, T, S, y, s.shuffle, v, s.initialEpoch, null, null);
  } finally {
    n.isTraining = !1, fs(r, t), fs(o, e), fs(i, t), fs(a, e), fs(u, l), fs(h, c), d != null && Dt(d);
  }
}
function BI(n) {
  const t = [];
  n instanceof Kt && (n = [n]);
  for (let e = 0; e < n.length; ++e) {
    const s = n[e];
    if (s.rank === 1)
      t.push(Ec(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(s);
    }
  }
  return t;
}
function fs(n, t) {
  if (n == null)
    return;
  const e = [];
  if (t instanceof Kt)
    e.push(t.id);
  else if (Array.isArray(t))
    t.forEach((r) => e.push(r.id));
  else if (t != null)
    for (const r in t) {
      const o = t[r];
      e.push(o.id);
    }
  const s = [];
  if (n instanceof Kt)
    e.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n))
    n.forEach((r) => {
      e.indexOf(r.id) === -1 && s.push(r);
    });
  else if (n != null)
    for (const r in n) {
      const o = n[r];
      e.indexOf(o.id) === -1 && s.push(o);
    }
  s.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function iF(n) {
  return n instanceof Kt;
}
function Wf(n) {
  return Array.isArray(n);
}
function Y0(n) {
  return !iF(n) && !Wf(n);
}
function j0(n, t, e, s = !0, r = "") {
  if (t == null || t.length === 0) {
    if (n != null) {
      let i = !1;
      if (Wf(n) && n.length > 0)
        i = !0;
      else if (Y0(n)) {
        for (const a in n)
          if (n.hasOwnProperty(a)) {
            i = !0;
            break;
          }
      } else
        i = !0;
      if (i)
        throw new P(`Error when checking model ${r} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null)
    return t.map((i) => null);
  let o;
  if (Y0(n)) {
    n = n, o = [];
    for (const i of t) {
      if (n[i] == null)
        throw new P(`No data provided for "${i}". Need data for each key in: ${t}`);
      o.push(n[i]);
    }
  } else if (Wf(n)) {
    if (n = n, n.length !== t.length)
      throw new P(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    o = n;
  } else {
    if (n = n, t.length > 1)
      throw new P(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    o = [n];
  }
  if (o = BI(o), e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = o[i];
      if (a.shape.length !== e[i].length)
        throw new P(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u >= 0 && c !== u)
          throw new P(`${r} expected a batch of elements where each example has shape [${e[i].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1, e[i].length)}]) but the ${r} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1, a.shape.length)}] (tensor shape [${a.shape}])`);
      }
    }
  return o;
}
function aF(n, t, e) {
  const s = br(n.map((o) => o.shape[0]));
  s.sort();
  const r = br(t.map((o) => o.shape[0]));
  if (r.sort(), s.length > 1)
    throw new P(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((o) => o.shape))}`);
  if (r.length > 1)
    throw new P(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((o) => o.shape))}`);
  if (s.length > 0 && r.length > 0 && !Vt(s, r))
    throw new P(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function lF(n, t, e) {
  const s = [
    vo,
    hp,
    ja
  ];
  for (let r = 0; r < n.length; ++r) {
    const o = n[r], i = t[r], a = e[r];
    if (i != null) {
      if (i === ja && o.shape[o.shape.length - 1] === 1)
        throw new P(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(i) !== -1) {
        const l = o.shape.slice(1), c = a.slice(1);
        for (let u = 0; u < l.length; ++u) {
          const h = l[u], d = c[u];
          if (d != null && h !== d)
            throw new P(`A target Tensor with shape ${o.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function J0(n, t, e, s = !0, r = "") {
  let o;
  if (Array.isArray(n)) {
    if (n.length !== t.length)
      throw new P(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    o = n;
  } else {
    if (t.length > 1)
      throw new P(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    o = [n];
  }
  if (e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = o[i];
      if (a.shape.length !== e[i].length)
        throw new P(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u !== c)
          throw new P(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`);
      }
    }
}
function cF(n, t) {
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((s) => []);
  let e;
  if (typeof n == "string" || typeof n == "function")
    e = [n];
  else if (Array.isArray(n) || typeof n == "object")
    e = n;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(e))
    return t.map((s) => e);
  {
    const s = [];
    for (const r of t) {
      let o = e.hasOwnProperty(r) ? e[r] : [];
      Array.isArray(o) || (o = [o]), s.push(o);
    }
    return s;
  }
}
const uF = "layers-model";
class Bs extends ds {
  constructor(t) {
    super(t), this.isTraining = !1;
  }
  summary(t, e, s = console.log) {
    if (!this.built)
      throw new P("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    ZG(this, t, e, s);
  }
  compile(t) {
    if (t.loss == null && (t.loss = []), this.loss = t.loss, typeof t.optimizer == "string")
      this.optimizer_ = KG(t.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(t.optimizer instanceof lr))
        throw new P("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = t.optimizer, this.isOptimizerOwned = !1;
    }
    let e = [];
    if (!Array.isArray(t.loss) && typeof t.loss != "string" && typeof t.loss != "function") {
      t.loss = t.loss;
      for (const i in t.loss)
        if (this.outputNames.indexOf(i) === -1)
          throw new P(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);
      for (const i of this.outputNames)
        t.loss[i] == null && console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`), e.push(Ap(t.loss[i]));
    } else if (Array.isArray(t.loss)) {
      if (t.loss.length !== this.outputs.length)
        throw new P(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);
      e = t.loss.map((a) => Ap(a));
    } else {
      const i = Ap(t.loss);
      this.outputs.forEach((a) => {
        e.push(i);
      });
    }
    this.lossFunctions = e, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let i = 0; i < this.outputs.length; ++i) {
      const a = this.internalOutputShapes[i], l = this.outputNames[i];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(a), this.feedLossFns.push(this.lossFunctions[i]);
    }
    const s = [];
    this.metrics = t.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], Qr("loss", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = this.lossFunctions[i];
        this.outputs.length > 1 && (this.metricsTensors.push([a, i]), this.metricsNames.push(this.outputNames[i] + "_loss"));
      }
    });
    const r = cF(t.metrics, this.outputNames), o = (i, a, l) => {
      this.outputNames.length > 1 && (a = this.outputNames[i] + "_" + a), this.metricsNames.push(a), this.metricsTensors.push([l, i]);
    };
    Qr("metric", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = r[i];
        ((c) => {
          const u = "";
          let h, d, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const g = this.internalOutputShapes[i];
              g[g.length - 1] === 1 || this.lossFunctions[i] === hp ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = zy : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = VI) : this.lossFunctions[i] === Ou ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = PI : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = MI) : ["accuracy", "acc"].indexOf(f) !== -1 ? d = Wy : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = Vy);
              let y;
              ["accuracy", "acc"].indexOf(f) !== -1 ? y = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (y = "ce"), p = d, h = u + y;
            } else
              p = _G(f), h = u + Qc(f);
            let m;
            Qr(h, () => {
              m = p;
            }), o(i, h, m);
          }
        })(a);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(t, e, s = {}) {
    const r = s.batchSize == null ? 32 : s.batchSize;
    Af(r);
    const o = !0, i = this.standardizeUserDataXY(t, e, o, r);
    try {
      const a = i[0].concat(i[1]);
      this.makeTestFunction();
      const l = this.testFunction, c = this.testLoop(l, a, r, s.verbose, s.steps);
      return fn(c);
    } finally {
      fs(i[0], t), fs(i[1], e);
    }
  }
  async evaluateDataset(t, e) {
    return this.makeTestFunction(), sF(this, t, e);
  }
  checkNumSamples(t, e, s, r = "steps") {
    let o;
    if (s != null) {
      if (o = null, e != null)
        throw new P(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`);
    } else if (t != null)
      Array.isArray(t) ? o = t[0].shape[0] : o = t.shape[0];
    else
      throw new P(`Either the input data should have a defined shape, or ${r} shoud be specified.`);
    return o;
  }
  execute(t, e) {
    if (Array.isArray(e) && e.length === 0)
      throw new P("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(e), r = s ? e : [e], o = this.retrieveSymbolicTensors(r), i = new pr();
    if (t instanceof Kt && (t = [t]), Array.isArray(t)) {
      if (t.length !== this.inputs.length)
        throw new P(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        i.add(this.inputs[l], t[l]);
    } else
      for (const l of this.inputs) {
        const c = t[l.name];
        if (c == null)
          throw new P(`No value is provided for the model's input ${l.name}`);
        i.add(l, c);
      }
    const a = La(o, i);
    return s ? a : a[0];
  }
  retrieveSymbolicTensors(t) {
    const e = ao(null, t.length);
    let s = t.length;
    for (const r of this.layers) {
      const o = Array.isArray(r.output) ? r.output : [r.output], i = o.map((a) => a.name);
      for (let a = 0; a < t.length; ++a) {
        const l = i.indexOf(t[a]);
        if (l !== -1 && (e[a] = o[l], s--), s === 0)
          break;
      }
      if (s === 0)
        break;
    }
    if (s > 0) {
      const r = [];
      throw e.forEach((o, i) => {
        o == null && r.push(t[i]);
      }), new P(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`);
    }
    return e;
  }
  predictLoop(t, e = 32, s = !1) {
    return M(() => {
      const r = this.checkNumSamples(t);
      if (s)
        throw new Gt("Verbose predictLoop() is not implemented yet.");
      const o = zf(r, e), i = this.outputs.map((a) => []);
      for (let a = 0; a < o.length; ++a)
        M(() => {
          const c = o[a][0], u = o[a][1], h = Da(t, c, u), d = [];
          if (Array.isArray(h))
            for (let f = 0; f < h.length; ++f)
              d.push({ key: this.inputs[f], value: h[f] });
          else
            d.push({ key: this.inputs[0], value: h });
          const p = new pr(d);
          return La(this.outputs, p);
        }).forEach((c, u) => i[u].push(c));
      return fn(i.map((a) => Ce(a, 0)));
    });
  }
  predict(t, e = {}) {
    const s = BI(t);
    J0(s, this.inputNames, this.feedInputShapes, !1);
    try {
      const r = e.batchSize == null ? 32 : e.batchSize;
      return Af(r), this.predictLoop(s, r);
    } finally {
      fs(s, t);
    }
  }
  predictOnBatch(t) {
    J0(t, this.inputNames, this.feedInputShapes, !0);
    const e = (Array.isArray(t) ? t[0] : t).shape[0];
    return this.predictLoop(t, e);
  }
  standardizeUserDataXY(t, e, s = !0, r) {
    if (this.optimizer_ == null)
      throw new ss("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const o = [];
    for (let i = 0; i < this.feedOutputShapes.length; ++i) {
      const a = this.feedOutputShapes[i];
      this.feedLossFns[i] === Ou ? o.push(a.slice(0, a.length - 1).concat([1])) : o.push(a);
    }
    if (t = j0(t, this.feedInputNames, this.feedInputShapes, !1, "input"), e = j0(e, this.feedOutputNames, o, !1, "target"), aF(t, e), lF(e, this.feedLossFns, this.feedOutputShapes), this.stateful && r != null && r > 0 && t[0].shape[0] % r !== 0)
      throw new P(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);
    return [t, e];
  }
  async standardizeUserData(t, e, s, r, o = !0, i) {
    const [a, l] = this.standardizeUserDataXY(t, e, o, i);
    if (s != null)
      throw new Error("sample weight is not supported yet.");
    let c = null;
    if (r != null) {
      const u = _I(r, this.outputNames);
      c = [];
      for (let h = 0; h < u.length; ++h)
        c.push(await KI(l[h], null, u[h]));
    }
    return [a, l, c];
  }
  testLoop(t, e, s, r = 0, o) {
    return M(() => {
      const i = this.checkNumSamples(e, s, o, "steps"), a = [];
      if (r > 0)
        throw new Gt("Verbose mode is not implemented yet.");
      if (o != null)
        throw new Gt("steps mode in testLoop() is not implemented yet");
      {
        const l = zf(i, s), c = qe(xs(0, i));
        for (let u = 0; u < l.length; ++u) {
          const h = l[u][0], d = l[u][1], p = qr(c, h, d - h), f = Py(e, p), m = t(f);
          if (u === 0)
            for (let g = 0; g < m.length; ++g)
              a.push(Nt(0));
          for (let g = 0; g < m.length; ++g) {
            const y = m[g];
            a[g] = nt(a[g], A(d - h, y));
          }
        }
        for (let u = 0; u < a.length; ++u)
          a[u] = St(a[u], i);
      }
      return a;
    });
  }
  getDedupedMetricsNames() {
    const t = this.metricsNames, e = [];
    for (let s = 0; s < t.length; ++s) {
      const r = t[s];
      let o = r;
      if (O0(t, r) > 1) {
        const i = O0(t.slice(0, s), r);
        o += `_${i}`;
      }
      e.push(o);
    }
    return e;
  }
  makeTrainFunction() {
    return (t) => {
      const e = [], s = t.slice(0, this.inputs.length), r = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = t.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), i = [], a = () => {
        const h = [];
        for (let m = 0; m < this.inputs.length; ++m)
          h.push({ key: this.inputs[m], value: s[m] });
        const d = new pr(h), p = La(this.outputs, d, { training: !0 });
        let f;
        for (let m = 0; m < this.lossFunctions.length; ++m) {
          const g = this.lossFunctions[m];
          let y = g(r[m], p[m]);
          o[m] != null && (y = JG(y, o[m]));
          const b = ye(y);
          e.push(b), m === 0 ? f = y : f = nt(f, y);
        }
        for (let m = 0; m < this.metricsTensors.length; ++m) {
          let g;
          if (this.outputs.length > 1 && m < this.outputs.length)
            g = e[m];
          else {
            const y = this.metricsTensors[m][0], b = this.metricsTensors[m][1];
            g = ye(y(r[b], p[b]));
          }
          Se(g), i.push(g);
        }
        return f = ye(f), this.calculateLosses().forEach((m) => {
          f = nt(f, m);
        }), f;
      }, l = this.collectedTrainableWeights.map((h) => h.read()), c = !0;
      return [this.optimizer_.minimize(a, c, l)].concat(i);
    };
  }
  makeTestFunction() {
    this.testFunction = (t) => M(() => {
      const e = [];
      let s;
      const r = t.slice(0, this.inputs.length), o = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), i = [];
      for (let c = 0; c < this.inputs.length; ++c)
        i.push({ key: this.inputs[c], value: r[c] });
      const a = new pr(i), l = La(this.outputs, a);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const u = this.lossFunctions[c], h = ye(u(o[c], l[c]));
        c === 0 ? s = h : s = nt(s, h), e.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const u = this.metricsTensors[c][0], h = this.metricsTensors[c][1], d = ye(u(o[h], l[h]));
        e.push(d);
      }
      return e;
    });
  }
  async fit(t, e, s = {}) {
    return oF(this, t, e, s);
  }
  async fitDataset(t, e) {
    return tF(this, t, e);
  }
  async trainOnBatch(t, e) {
    const s = await this.standardizeUserData(t, e), r = s[0], o = s[1], a = this.makeTrainFunction()(r.concat(o)), l = [];
    for (const c of a) {
      const u = await c.data();
      l.push(u[0]);
    }
    return Dt(a), fs(s[0], t), fs(s[1], e), fn(l);
  }
  getNamedWeights(t) {
    const e = [], s = t != null && t.trainableOnly, r = s ? this.trainableWeights : this.weights, o = this.getWeights(s);
    for (let i = 0; i < r.length; ++i)
      s && !r[i].trainable || e.push({ name: r[i].originalName, tensor: o[i] });
    return e;
  }
  set stopTraining(t) {
    this.stopTraining_ = t;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(t) {
    this.optimizer_ !== t && (this.optimizer_ = t, this.isOptimizerOwned = !1);
  }
  dispose() {
    const t = super.dispose();
    if (t.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const e = Za().numTensors;
      this.optimizer_.dispose(), t.numDisposedVariables += e - Za().numTensors;
    }
    return t;
  }
  getLossIdentifiers() {
    let t;
    if (typeof this.loss == "string")
      t = Ms(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const e of this.loss)
        if (typeof e != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      t = this.loss.map((e) => Ms(e));
    } else {
      const e = Object.keys(this.loss);
      t = {};
      const s = this.loss;
      for (const r of e)
        if (typeof s[r] == "string")
          t[r] = Ms(s[r]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return t;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Ms(Qc(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((t) => Ms(Qc(t)));
    {
      const t = {};
      for (const e in this.metrics)
        t[e] = Ms(Qc(this.metrics[e]));
      return t;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(t) {
    if (t.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (t.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (t.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const e = Ja(t.optimizer_config), s = ys(e);
    let r;
    if (typeof t.loss == "string")
      r = _r(t.loss);
    else if (Array.isArray(t.loss))
      r = t.loss.map((i) => _r(i));
    else if (t.loss != null) {
      r = {};
      for (const i in t.loss)
        r[i] = _r(t.loss[i]);
    }
    let o;
    if (Array.isArray(t.metrics))
      o = t.metrics.map((i) => _r(i));
    else if (t.metrics != null) {
      o = {};
      for (const i in t.metrics)
        o[i] = _r(t.metrics[i]);
    }
    this.compile({ loss: r, metrics: o, optimizer: s });
  }
  async save(t, e) {
    if (typeof t == "string") {
      const c = N1(t);
      if (c.length === 0)
        throw new P(`Cannot find any save handlers for URL '${t}'`);
      if (c.length > 1)
        throw new P(`Found more than one (${c.length}) save handlers for URL '${t}'`);
      t = c[0];
    }
    if (t.save == null)
      throw new P("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await wf(this.getNamedWeights(e)), r = !1, o = null, a = {
      modelTopology: this.toJSON(o, r),
      format: uF,
      generatedBy: `TensorFlow.js tfjs-layers v${dp}`,
      convertedBy: null
    };
    if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
      a.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: u, specs: h } = await wf(await this.optimizer.getWeights(), c);
      s.specs.push(...h), s.data = od([s.data, u]);
    }
    return this.userDefinedMetadata != null && (B0(this.userDefinedMetadata, this.name, !0), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = s.data, a.weightSpecs = s.specs, t.save(a);
  }
  setUserDefinedMetadata(t) {
    B0(t, this.name), this.userDefinedMetadata = t;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
Bs.className = "Model";
st(Bs);
class HI extends Bs {
}
HI.className = "Functional";
st(HI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function hF(n, t) {
  "modelTopology" in n || (n = { modelTopology: n }), n = n;
  let e = n.modelTopology;
  e.model_config != null && (e = e.model_config);
  const s = Ja(e), r = ys(s, t);
  if (n.weightsManifest != null) {
    const o = await A1(n.weightsManifest, n.pathPrefix, r.weights.map((a) => a.originalName)), i = {};
    for (const a of r.weights)
      i[a.originalName] = o[a.originalName];
    r.loadWeights(i), Dt(o);
  }
  return r;
}
async function dF(n, t) {
  if (t == null && (t = {}), typeof n == "string") {
    const e = T1(n, t);
    if (e.length === 0)
      e.push(V1(n, t));
    else if (e.length > 1)
      throw new P(`Found more than one (${e.length}) load handlers for URL '${n}'`);
    n = e[0];
  }
  return pF(n, void 0, t);
}
async function pF(n, t, e) {
  if (e == null && (e = {}), n.load == null)
    throw new P("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const s = await n.load();
  let r = s.modelTopology;
  r.model_config != null && (r = r.model_config);
  const o = e.strict == null ? !0 : e.strict, i = s.weightData != null && s.weightSpecs != null && o, a = ys(Ja(r), t, i), l = s.trainingConfig;
  if (l != null && a.loadTrainingConfig(l), s.userDefinedMetadata != null && a.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null)
      throw new P("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: c, optimizerWeights: u } = fF(s.weightData, s.weightSpecs);
    a.loadWeights(c, o), a.optimizer != null && u.length > 0 && await a.optimizer.setWeights(u), Dt(c), Dt(u.map((h) => h.tensor));
  }
  return a;
}
function fF(n, t) {
  const e = bm(n, t), s = {}, r = [];
  return t.forEach((o) => {
    o.group === "optimizer" ? r.push({ name: o.name, tensor: e[o.name] }) : s[o.name] = e[o.name];
  }), { modelWeights: s, optimizerWeights: r };
}
class lo extends Bs {
  constructor(t) {
    if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = !0, this.built = !1, this.name = t.name != null ? t.name : tp("sequential_"), t.layers != null)
      for (const e of t.layers)
        this.add(e);
  }
  checkShape(t) {
    if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
      throw new P(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(t) {
    const e = t instanceof lo || t instanceof Bs;
    let s;
    if (e) {
      if (s = t, s.outputs.length !== 1)
        throw new P("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1)
        throw new P("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (t.inboundNodes.length === 0) {
        if (t.batchInputShape == null)
          throw new P("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const r = EI({
          batchShape: t.batchInputShape,
          dtype: t.dtype,
          name: t.name + "_input"
        });
        t.apply(r);
      }
      if (e)
        this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (t.inboundNodes.length !== 1)
          throw new P(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);
        if (t.inboundNodes[0].outputTensors.length !== 1)
          throw new P("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = RI(this.outputs[0]);
      }
      this.inboundNodes = [], new cp({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        inputMasks: ao(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((r) => r.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const r = t.apply(this.outputs[0]);
      if (Array.isArray(r))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(t), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(t), this.built = !1;
  }
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const t = this.layers.length - 1;
      this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(t, e) {
    return this.model == null && this.build(), this.model.call(t, e);
  }
  build(t) {
    if (jt(t), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Bs({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(t, e, s = console.log) {
    this.built || this.build(), super.summary(t, e, s);
  }
  setWeights(t) {
    this.model == null && this.build(), this.model.setWeights(t);
  }
  evaluate(t, e, s = {}) {
    if (!this.built)
      throw new ss("The model needs to be compiled before being used.");
    return this.model.evaluate(t, e, s);
  }
  async evaluateDataset(t, e) {
    if (!this.built)
      throw new ss("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(t, e);
  }
  predict(t, e = {}) {
    return this.model == null && this.build(), this.model.predict(t, e);
  }
  predictOnBatch(t) {
    return this.model == null && this.build(), this.model.predictOnBatch(t);
  }
  compile(t) {
    this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(t) {
    this.model.optimizer = t;
  }
  async fit(t, e, s = {}) {
    if (!this.built)
      throw new ss("The model needs to be compiled before being used.");
    return this.model.fit(t, e, s);
  }
  async fitDataset(t, e) {
    if (!this.built)
      throw new ss("The model needs to be compiled before being used.");
    return this.model.fitDataset(t, e);
  }
  async trainOnBatch(t, e) {
    return this.model.trainOnBatch(t, e);
  }
  static fromConfig(t, e, s = {}, r = !1) {
    let o, i = {};
    if (e instanceof Array) {
      if (e[0].className == null || e[0].className === "Merge")
        throw new P("Legacy serialization format not supported yet.");
      o = e;
    } else
      k(e.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), o = e.layers, delete e.layers, i = e;
    const a = new t(i);
    if (!(a instanceof lo))
      throw new Gt(`Sequential.fromConfig called on non-Sequential input: ${a}`);
    for (const l of o) {
      const u = ys(l, void 0, r);
      r && u.setFastWeightInitDuringBuild(!0), a.add(u);
    }
    return a;
  }
  set stopTraining(t) {
    if (this.model == null)
      throw new P("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = t;
  }
  get stopTraining() {
    if (this.model == null)
      throw new P("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    const t = [];
    for (const e of this.layers) {
      const s = {};
      s.className = e.getClassName(), s.config = e.getConfig(), t.push(s);
    }
    return { name: this.name, layers: t };
  }
}
lo.className = "Sequential";
st(lo);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function mF(n) {
  return new Bs(n);
}
function gF(n) {
  return new lo(n);
}
function yF(n, t) {
  return t == null && (t = {}), dF(n, t);
}
function UI(n) {
  return EI(n);
}
function bF(n, t) {
  Wn.registerCallbackConstructor(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Sn extends yo {
  getConfig() {
    return {};
  }
}
class YI extends Sn {
  apply(t, e = 1) {
    return z3(t, e);
  }
}
YI.className = "elu";
st(YI);
class jI extends Sn {
  apply(t) {
    return Td(t);
  }
}
jI.className = "selu";
st(jI);
class JI extends Sn {
  apply(t) {
    return vs(t);
  }
}
JI.className = "relu";
st(JI);
class QI extends Sn {
  apply(t) {
    return M(() => ra(6, vs(t)));
  }
}
QI.className = "relu6";
st(QI);
class qI extends Sn {
  apply(t) {
    return t;
  }
}
qI.className = "linear";
st(qI);
class tS extends Sn {
  apply(t) {
    return gs(t);
  }
}
tS.className = "sigmoid";
st(tS);
class eS extends Sn {
  apply(t) {
    return V3(t);
  }
}
eS.className = "hardSigmoid";
st(eS);
class nS extends Sn {
  apply(t) {
    return xo(t);
  }
}
nS.className = "softplus";
st(nS);
class sS extends Sn {
  apply(t) {
    return W3(t);
  }
}
sS.className = "softsign";
st(sS);
class rS extends Sn {
  apply(t) {
    return oo(t);
  }
}
rS.className = "tanh";
st(rS);
class My extends Sn {
  apply(t, e = -1) {
    return wc(t, e);
  }
}
My.className = "softmax";
st(My);
class oS extends Sn {
  apply(t, e = -1) {
    return xd(t, e);
  }
}
oS.className = "logSoftmax";
st(oS);
class iS extends Sn {
  apply(t, e = 1) {
    return M(() => A(gs(A(t, e)), t));
  }
}
iS.className = "swish";
st(iS);
class aS extends Sn {
  apply(t) {
    return M(() => A(t, oo(xo(t))));
  }
}
aS.className = "mish";
st(aS);
function kr(n) {
  return n.getClassName();
}
function zp(n, t = {}) {
  return $c(n, Pn.getMap().classNameMap, t, "activation");
}
function Nr(n) {
  if (n == null) {
    const t = {};
    return t.className = "linear", t.config = {}, zp(t);
  }
  if (typeof n == "string") {
    const t = {};
    return t.className = n, t.config = {}, zp(t);
  } else
    return n instanceof Sn ? n : zp(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Xy(n) {
  if (n != null && typeof n != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class lS extends yo {
}
class Fc extends lS {
  constructor(t) {
    super(), Xy(t), this.l1 = t == null || t.l1 == null ? 0.01 : t.l1, this.l2 = t == null || t.l2 == null ? 0.01 : t.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(t) {
    return M(() => {
      let e = Re([1]);
      return this.hasL1 && (e = nt(e, yt(A(this.l1, $e(t))))), this.hasL2 && (e = nt(e, yt(A(this.l2, Lc(t))))), W(e, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(t, e) {
    return new t({ l1: e.l1, l2: e.l2 });
  }
}
Fc.className = "L1L2";
st(Fc);
function xF(n) {
  return Xy(n), new Fc({ l1: n != null ? n.l1 : null, l2: 0 });
}
function wF(n) {
  return Xy(n), new Fc({ l2: n != null ? n.l2 : null, l1: 0 });
}
const Q0 = {
  l1l2: "L1L2"
};
function te(n) {
  return wy(n);
}
function q0(n, t = {}) {
  return $c(n, Pn.getMap().classNameMap, t, "regularizer");
}
function pe(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in Q0 ? Q0[n] : n, config: {} };
    return q0(e);
  } else
    return n instanceof lS ? n : q0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class _y extends _t {
  constructor(t) {
    super(t == null ? {} : t), this.supportsMasking = !0, t != null && (this.maxValue = t.maxValue);
  }
  call(t, e) {
    t = Ot(t);
    let s = vs(t);
    return this.maxValue != null && (s = gn(s, 0, this.maxValue)), s;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { maxValue: this.maxValue }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
_y.className = "ReLU";
st(_y);
class Ky extends _t {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_ALPHA = 0.3, t == null && (t = {}), this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = Ot(t);
    return hc(s, this.alpha);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Ky.className = "LeakyReLU";
st(Ky);
class Zy extends _t {
  constructor(t) {
    if (super(t == null ? {} : t), this.DEFAULT_ALPHA_INITIALIZER = "zeros", t == null && (t = {}), this.supportsMasking = !0, this.alphaInitializer = de(t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = pe(t.alphaRegularizer), this.alphaConstraint = Ae(t.alphaConstraint), t.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(t.sharedAxes))
      this.sharedAxes = t.sharedAxes;
    else if (typeof t.sharedAxes == "number")
      this.sharedAxes = [t.sharedAxes];
    else
      throw new P(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);
  }
  build(t) {
    t = jt(t);
    const e = t.slice(1);
    if (this.sharedAxes != null)
      for (const r of this.sharedAxes)
        e[r - 1] = 1;
    this.alpha = this.addWeight("alpha", e, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null)
      for (let r = 1; r < t.length; ++r)
        s[r] = t[r];
    this.inputSpec = [new Ee({
      ndim: t.length,
      axes: s
    })], this.built = !0;
  }
  call(t, e) {
    return t = Ot(t), yc(t, this.alpha.read());
  }
  getConfig() {
    const t = {
      alphaInitializer: be(this.alphaInitializer),
      alphaRegularizer: te(this.alphaRegularizer),
      alphaConstraint: Oe(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Zy.className = "PReLU";
st(Zy);
class By extends _t {
  constructor(t) {
    if (super(t == null ? {} : t), this.DEFAULT_ALPHA = 1, t == null && (t = {}), t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
      throw new Gt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = Ot(t);
    return ta(s);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
By.className = "ELU";
st(By);
class Hy extends _t {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_THETA = 1, t == null && (t = {}), this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta;
  }
  call(t, e) {
    const s = Ot(t);
    return A(s, ut(In(s, this.theta), "float32"));
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { theta: this.theta }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Hy.className = "ThresholdedReLU";
st(Hy);
class Uy extends _t {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_AXIS = 1, t == null && (t = {}), this.softmax = new My().apply, this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis;
  }
  call(t, e) {
    const s = Ot(t);
    return this.softmax(s, this.axis);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { axis: this.axis }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Uy.className = "Softmax";
st(Uy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function zo(n, t, e) {
  if (typeof n == "number")
    return ao(n, t);
  if (n.length !== t)
    throw new P(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < t; ++s) {
    const r = n[s];
    if (!G3(r))
      throw new P(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`);
  }
  return n;
}
function bs(n, t, e, s, r = 1) {
  if (n == null)
    return n;
  const o = t + (t - 1) * (r - 1);
  let i;
  return e === "same" ? i = n : i = n - o + 1, Math.floor((i + s - 1) / s);
}
function Rs(n, t, e, s) {
  if (n == null)
    return null;
  if (s === "valid")
    n = n * t + Cr([e - t, 0]);
  else if (s === "same")
    n = n * t;
  else
    throw new P(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Yy(n, t) {
  return M(() => (Te(t), t === "channelsFirst" ? Wt(n, [0, 2, 3, 1]) : n));
}
function cS(n, t) {
  return M(() => (Te(t), t === "channelsFirst" ? Wt(n, [0, 2, 3, 4, 1]) : n));
}
function IF(n, t, e, s = 1, r = "valid", o, i = 1) {
  return M(() => {
    if (o == null && (o = ws()), Te(o), n.shape.length !== 3)
      throw new P(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (t.shape.length !== 3)
      throw new P(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (e != null && e.shape.length !== 1)
      throw new P(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (o === "channelsFirst" && (n = Wt(n, [0, 2, 1])), r === "causal")
      throw new Gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let a = dd(n, t, s, r === "same" ? "same" : "valid", "NWC", i);
    return e != null && (a = Cs(a, e)), a;
  });
}
function tx(n, t, e, s = [1, 1], r = "valid", o, i, a = null) {
  return M(() => {
    if (o == null && (o = ws()), Te(o), n.rank !== 3 && n.rank !== 4)
      throw new P(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (t.rank !== 3 && t.rank !== 4)
      throw new P(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let l = Yy(n, o);
    if (r === "causal")
      throw new Gt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = Uw({
      x: l,
      filter: t,
      strides: s,
      pad: r === "same" ? "same" : "valid",
      dilations: i,
      dataFormat: "NHWC",
      bias: e,
      activation: a
    }), o === "channelsFirst" && (l = Wt(l, [0, 3, 1, 2])), l;
  });
}
function SF(n, t, e, s = [1, 1, 1], r = "valid", o, i) {
  return M(() => {
    if (o == null && (o = ws()), Te(o), n.rank !== 4 && n.rank !== 5)
      throw new P(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (t.rank !== 4 && t.rank !== 5)
      throw new P(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let a = cS(n, o);
    if (r === "causal")
      throw new Gt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return a = sg(a, t, s, r === "same" ? "same" : "valid", "NDHWC", i), e != null && (a = Cs(a, e)), o === "channelsFirst" && (a = Wt(a, [0, 4, 1, 2, 3])), a;
  });
}
class pp extends _t {
  constructor(t, e) {
    if (super(e), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", pp.verifyArgs(e), this.rank = t, Me(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new Gt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = zo(e.kernelSize, t, "kernelSize"), this.strides = zo(e.strides == null ? 1 : e.strides, t, "strides"), this.padding = e.padding == null ? "valid" : e.padding, Bn(this.padding), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Te(this.dataFormat), this.activation = Nr(e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.biasInitializer = de(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Ae(e.biasConstraint), this.biasRegularizer = pe(e.biasRegularizer), this.activityRegularizer = pe(e.activityRegularizer), this.dilationRate = zo(e.dilationRate == null ? 1 : e.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new P(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new P(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new P(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(t) {
    if ($s("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !Iy(t.kernelSize, "number", 1, 3))
      throw new P(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`);
  }
  getConfig() {
    const t = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: kr(this.activation),
      useBias: this.useBias,
      biasInitializer: be(this.biasInitializer),
      biasRegularizer: te(this.biasRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      biasConstraint: Oe(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class ua extends pp {
  constructor(t, e) {
    super(t, e), this.kernel = null, ua.verifyArgs(e), this.filters = e.filters, Me(this.filters, "filters"), this.kernelInitializer = de(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Ae(e.kernelConstraint), this.kernelRegularizer = pe(e.kernelRegularizer);
  }
  build(t) {
    t = jt(t);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new P(`The channel dimension of the input should be defined. Found ${t[e]}`);
    const s = t[e], r = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }], this.built = !0;
  }
  call(t, e) {
    return M(() => {
      t = Ot(t);
      let s;
      const r = this.bias == null ? null : this.bias.read(), o = wI(this.activation.getClassName());
      if (o != null && this.rank === 2)
        s = tx(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, o);
      else {
        if (this.rank === 1)
          s = IF(t, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          s = tx(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          s = SF(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new Gt("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = [], s = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2);
    for (let o = 0; o < s.length; ++o) {
      const i = bs(s[o], this.kernelSize[o], this.padding, this.strides[o], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[o]);
      e.push(i);
    }
    let r = [t[0]];
    return this.dataFormat === "channelsLast" ? (r = r.concat(e), r.push(this.filters)) : (r.push(this.filters), r = r.concat(e)), r;
  }
  getConfig() {
    const t = {
      filters: this.filters,
      kernelInitializer: be(this.kernelInitializer),
      kernelRegularizer: te(this.kernelRegularizer),
      kernelConstraint: Oe(this.kernelConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static verifyArgs(t) {
    if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1)
      throw new P(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`);
  }
}
class ha extends ua {
  constructor(t) {
    super(2, t), ha.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Iy(t.kernelSize, "number", 1, 2))
      throw new P(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
ha.className = "Conv2D";
st(ha);
class da extends ua {
  constructor(t) {
    super(3, t), da.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3)))
      throw new P(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
da.className = "Conv3D";
st(da);
class jy extends ha {
  constructor(t) {
    if (super(t), this.inputSpec = [new Ee({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new P(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = jt(t), t.length !== 4)
      throw new P("Input should have rank 4; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new P("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new Ee({ ndim: 4, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return M(() => {
      let s = Ot(t);
      if (s.shape.length !== 4)
        throw new P(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let i, a;
      this.dataFormat === "channelsFirst" ? (i = 2, a = 3) : (i = 1, a = 2);
      const l = r[i], c = r[a], u = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], p = this.strides[1], f = Rs(l, d, u, this.padding), m = Rs(c, p, h, this.padding), g = [o, f, m, this.filters];
      this.dataFormat !== "channelsLast" && (s = Wt(s, [0, 2, 3, 1]));
      let y = pd(s, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (y = Wt(y, [0, 3, 1, 2])), this.bias != null && (y = Cs(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
    });
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = t.slice();
    let s, r, o;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3) : (s = 3, r = 1, o = 2);
    const i = this.kernelSize[0], a = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
    return e[s] = this.filters, e[r] = Rs(e[r], l, i, this.padding), e[o] = Rs(e[o], c, a, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
jy.className = "Conv2DTranspose";
st(jy);
class Jy extends da {
  constructor(t) {
    if (super(t), this.inputSpec = [new Ee({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new P(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = jt(t), t.length !== 5)
      throw new P("Input should have rank 5; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new P("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new Ee({ ndim: 5, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return M(() => {
      let s = Ot(t);
      if (s.shape.length !== 5)
        throw new P(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let i, a, l;
      this.dataFormat === "channelsFirst" ? (l = 2, i = 3, a = 4) : (l = 1, i = 2, a = 3);
      const c = r[l], u = r[i], h = r[a], d = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], y = this.strides[2], b = Rs(c, m, d, this.padding), w = Rs(u, g, p, this.padding), x = Rs(h, y, f, this.padding), S = [o, b, w, x, this.filters];
      this.dataFormat !== "channelsLast" && (s = Wt(s, [0, 2, 3, 4, 1]));
      let v = rg(s, this.kernel.read(), S, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (v = Wt(v, [0, 4, 1, 2, 3])), this.bias !== null && (v = Cs(v, this.bias.read(), this.dataFormat)), this.activation !== null && (v = this.activation.apply(v)), v;
    });
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = t.slice();
    let s, r, o, i;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3, i = 4) : (s = 4, r = 1, o = 2, i = 3);
    const a = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], h = this.strides[1], d = this.strides[2];
    return e[s] = this.filters, e[r] = Rs(e[r], u, a, this.padding), e[o] = Rs(e[o], h, l, this.padding), e[i] = Rs(e[i], d, c, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
Jy.className = "Conv3DTranspose";
st(Jy);
class uS extends ua {
  constructor(t, e) {
    if (super(t, e), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, e.filters == null)
      throw new P("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (e.kernelInitializer != null || e.kernelRegularizer != null || e.kernelConstraint != null)
      throw new P("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (e.padding != null && e.padding !== "same" && e.padding !== "valid")
      throw new P(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);
    this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = de(e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = pe(e.depthwiseRegularizer), this.depthwiseConstraint = Ae(e.depthwiseConstraint), this.pointwiseInitializer = de(e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = pe(e.pointwiseRegularizer), this.pointwiseConstraint = Ae(e.pointwiseConstraint);
  }
  build(t) {
    if (t = jt(t), t.length < this.rank + 2)
      throw new P(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(t)}`);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null || t[e] < 0)
      throw new P(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);
    const s = t[e], r = this.kernelSize.concat([s, this.depthMultiplier]), o = [];
    for (let a = 0; a < this.rank; ++a)
      o.push(1);
    o.push(s * this.depthMultiplier, this.filters);
    const i = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, i, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", o, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, i, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, i, this.biasConstraint) : this.bias = null, this.inputSpec = [new Ee({ ndim: this.rank + 2, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return M(() => {
      t = Ot(t);
      let s;
      if (this.rank === 1)
        throw new Gt("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (t = Wt(t, [0, 2, 3, 1])), s = $d(t, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = Cs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = Wt(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = be(this.depthwiseInitializer), t.pointwiseInitializer = be(this.pointwiseInitializer), t.depthwiseRegularizer = te(this.depthwiseRegularizer), t.pointwiseRegularizer = te(this.pointwiseRegularizer), t.depthwiseConstraint = Oe(this.depthwiseConstraint), t.pointwiseConstraint = Oe(this.pointwiseConstraint), t;
  }
}
uS.className = "SeparableConv";
class Qy extends uS {
  constructor(t) {
    super(2, t);
  }
}
Qy.className = "SeparableConv2D";
st(Qy);
class Oc extends ua {
  constructor(t) {
    super(1, t), Oc.verifyArgs(t), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.dataFormat, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Iy(t.kernelSize, "number", 1, 1))
      throw new P(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
Oc.className = "Conv1D";
st(Oc);
class qy extends _t {
  constructor(t) {
    super(t), typeof t.cropping == "number" ? this.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : typeof t.cropping[0] == "number" ? this.cropping = [
      [t.cropping[0], t.cropping[0]],
      [t.cropping[1], t.cropping[1]]
    ] : this.cropping = t.cropping, this.dataFormat = t.dataFormat === void 0 ? "channelsLast" : t.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(t) {
    return this.dataFormat === "channelsFirst" ? [
      t[0],
      t[1],
      t[2] - this.cropping[0][0] - this.cropping[0][1],
      t[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      t[0],
      t[1] - this.cropping[0][0] - this.cropping[0][1],
      t[2] - this.cropping[1][0] - this.cropping[1][1],
      t[3]
    ];
  }
  call(t, e) {
    return M(() => {
      if (t = Ot(t), this.dataFormat === "channelsLast") {
        const s = Jc(t, this.cropping[0][0], t.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Jc(s, this.cropping[1][0], t.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = Jc(t, this.cropping[0][0], t.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Jc(s, this.cropping[1][0], t.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const t = { cropping: this.cropping, dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
qy.className = "Cropping2D";
st(qy);
class tb extends _t {
  constructor(t) {
    super(t), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = t.size == null ? this.DEFAULT_SIZE : t.size, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Te(this.dataFormat), this.interpolation = t.interpolation == null ? "nearest" : t.interpolation, E3(this.interpolation);
  }
  computeOutputShape(t) {
    if (this.dataFormat === "channelsFirst") {
      const e = t[2] == null ? null : this.size[0] * t[2], s = t[3] == null ? null : this.size[1] * t[3];
      return [t[0], t[1], e, s];
    } else {
      const e = t[1] == null ? null : this.size[0] * t[1], s = t[2] == null ? null : this.size[1] * t[2];
      return [t[0], e, s, t[3]];
    }
  }
  call(t, e) {
    return M(() => {
      let s = Ot(t);
      const r = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = Wt(s, [0, 2, 3, 1]);
        const o = this.size[0] * r[2], i = this.size[1] * r[3], a = this.interpolation === "nearest" ? Hr.resizeNearestNeighbor(s, [o, i]) : Hr.resizeBilinear(s, [o, i]);
        return Wt(a, [0, 3, 1, 2]);
      } else {
        const o = this.size[0] * r[1], i = this.size[1] * r[2];
        return this.interpolation === "nearest" ? Hr.resizeNearestNeighbor(s, [o, i]) : Hr.resizeBilinear(s, [o, i]);
      }
    });
  }
  getConfig() {
    const t = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
tb.className = "UpSampling2D";
st(tb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function vF(n, t, e = [1, 1], s = "valid", r, o) {
  return M(() => {
    r == null && (r = ws()), Te(r);
    let i = Yy(n, r);
    if (n.rank !== 4)
      throw new P(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (t.rank !== 4)
      throw new P(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = qi(i, t, e, s === "same" ? "same" : "valid", "NHWC", o), r === "channelsFirst" && (i = Wt(i, [0, 3, 1, 2])), i;
  });
}
class eb extends pp {
  constructor(t) {
    super(2, t), this.depthwiseKernel = null, this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = de(t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Ae(t.depthwiseConstraint), this.depthwiseRegularizer = pe(t.depthwiseRegularizer);
  }
  build(t) {
    if (t = jt(t), t.length < 4)
      throw new P(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);
    const e = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (t[e] == null || t[e] < 0)
      throw new P(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);
    const s = t[e], r = [
      this.kernelSize[0],
      this.kernelSize[1],
      s,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return M(() => {
      t = Ot(t);
      let s = vF(t, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = Cs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], r = this.dataFormat === "channelsFirst" ? t[1] * this.depthMultiplier : t[3] * this.depthMultiplier, o = bs(e, this.kernelSize[0], this.padding, this.strides[0]), i = bs(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [t[0], r, o, i] : [t[0], o, i, r];
  }
  getConfig() {
    const t = super.getConfig();
    return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = be(this.depthwiseInitializer), t.depthwiseRegularizer = te(this.depthwiseRegularizer), t.depthwiseConstraint = Oe(this.depthwiseRegularizer), t;
  }
}
eb.className = "DepthwiseConv2D";
st(eb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function hS(n, t, e, s) {
  if (Array.isArray(n)) {
    if (t != null || e != null)
      throw new P("When inputs is an array, neither initialState or constants should be provided");
    s != null && (e = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (t = n.slice(1, n.length)), n = n[0];
  }
  function r(o) {
    return o == null || Array.isArray(o) ? o : [o];
  }
  return t = r(t), e = r(e), { inputs: n, initialState: t, constants: e };
}
function dS(n, t, e, s = !1, r, o, i = !1, a = !1) {
  return M(() => {
    const l = t.shape.length;
    if (l < 3)
      throw new P(`Input should be at least 3D, but is ${l}D.`);
    const c = [1, 0].concat(xs(2, l));
    if (t = Wt(t, c), o != null)
      throw new Gt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = ut(ut(r, "bool"), "float32"), r.rank === l - 1 && (r = pn(r, -1)), r = Wt(r, c)), s && (t = Zn(t, 0), r != null && (r = Zn(r, 0)));
    const u = [];
    let h, d = e;
    const p = t.shape[0], f = as(t);
    let m;
    r != null && (m = as(r));
    for (let y = 0; y < p; ++y) {
      const b = f[y], w = M(() => n(b, d));
      if (r == null)
        h = w[0], d = w[1];
      else {
        const x = M(() => {
          const S = m[y], v = mt(Fn(S), S), T = nt(A(w[0], S), A(d[0], v)), $ = d.map((R, E) => nt(A(w[1][E], S), A(R, v)));
          return { output: T, newStates: $ };
        });
        h = x.output, d = x.newStates;
      }
      a && u.push(h);
    }
    let g;
    return a && (g = yn(u, 1)), [h, g, d];
  });
}
class ks extends _t {
  constructor(t) {
    super(t);
    let e;
    if (t.cell == null)
      throw new P("cell property is missing for the constructor of RNN.");
    if (Array.isArray(t.cell) ? e = new gp({ cells: t.cell }) : e = t.cell, e.stateSize == null)
      throw new P("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = e, this.returnSequences = t.returnSequences == null ? !1 : t.returnSequences, this.returnState = t.returnState == null ? !1 : t.returnState, this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards, this._stateful = t.stateful == null ? !1 : t.stateful, this.unroll = t.unroll == null ? !1 : t.unroll, this.supportsMasking = !0, this.inputSpec = [new Ee({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return xs(0, t).map((e) => null);
    } else
      return this.states_;
  }
  setStates(t) {
    this.states_ = t;
  }
  computeOutputShape(t) {
    Df(t) && (t = t[0]), t = t;
    let e = this.cell.stateSize;
    Array.isArray(e) || (e = [e]);
    const s = e[0];
    let r;
    if (this.returnSequences ? r = [t[0], t[1], s] : r = [t[0], s], this.returnState) {
      const o = [];
      for (const i of e)
        o.push([t[0], i]);
      return [r].concat(o);
    } else
      return r;
  }
  computeMask(t, e) {
    return M(() => {
      Array.isArray(e) && (e = e[0]);
      const s = this.returnSequences ? e : null;
      if (this.returnState) {
        const r = this.states.map((o) => null);
        return [s].concat(r);
      } else
        return s;
    });
  }
  get states() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, e = [];
      for (let s = 0; s < t; ++s)
        e.push(null);
      return e;
    } else
      return this.states_;
  }
  set states(t) {
    this.states_ = t;
  }
  build(t) {
    if (this.numConstants != null)
      throw new Gt("Constants support is not implemented in RNN yet.");
    Df(t) && (t = t[0]), t = t;
    const e = this.stateful ? t[0] : null, s = t.slice(2);
    this.inputSpec[0] = new Ee({ shape: [e, null, ...s] });
    const r = [t[0]].concat(t.slice(2));
    this.cell.build(r);
    let o;
    if (Array.isArray(this.cell.stateSize) ? o = this.cell.stateSize : o = [this.cell.stateSize], this.stateSpec != null) {
      if (!Vt(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), o))
        throw new P(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = o.map((i) => new Ee({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  resetStates(t, e = !1) {
    M(() => {
      if (!this.stateful)
        throw new Ts("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null)
        throw new P("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Re([s, r])) : this.states_ = [Re([s, this.cell.stateSize])];
      else if (t == null)
        Dt(this.states_), this.keptStates != null && (Dt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Re([s, r])) : this.states_[0] = Re([s, this.cell.stateSize]);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new P(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e === !0 ? this.keptStates.push(this.states_.slice()) : Dt(this.states_);
        for (let r = 0; r < this.states_.length; ++r) {
          const o = t[r], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, a = [s, i];
          if (!Vt(o.shape, a))
            throw new P(`State ${r} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${o.shape}`);
          this.states_[r] = o;
        }
      }
      this.states_ = this.states_.map((r) => Se(r.clone()));
    });
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, r = e == null ? null : e.constants;
    e == null && (e = {});
    const o = hS(t, s, r, this.numConstants);
    t = o.inputs, s = o.initialState, r = o.constants;
    let i = [], a = [];
    if (s != null) {
      e.initialState = s, i = i.concat(s), this.stateSpec = [];
      for (const c of s)
        this.stateSpec.push(new Ee({ shape: c.shape }));
      a = a.concat(this.stateSpec);
    }
    if (r != null && (e.constants = r, i = i.concat(r), this.numConstants = r.length), i[0] instanceof ms) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return M(() => {
      const s = e == null ? null : e.mask, r = e == null ? null : e.training;
      let o = e == null ? null : e.initialState;
      t = Ot(t), o == null && (this.stateful ? o = this.states_ : o = this.getInitialState(t));
      const i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (o.length !== i)
        throw new P(`RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const a = { training: r }, c = dS((f, m) => {
        const g = this.cell.call([f].concat(m), a);
        return [g[0], g.slice(1)];
      }, t, o, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], h = c[1], d = c[2];
      this.stateful && this.resetStates(d, r);
      const p = this.returnSequences ? h : u;
      return this.returnState ? [p].concat(d) : p;
    });
  }
  getInitialState(t) {
    return M(() => {
      let e = Re(t.shape);
      return e = yt(e, [1, 2]), e = Ec(e), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? Ef(e, [1, s]) : e) : this.cell.stateSize > 1 ? [Ef(e, [1, this.cell.stateSize])] : [e];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = super.getConfig(), e = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (e.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === ks.className && (e.cell = {
      className: this.cell.getClassName(),
      config: s
    }), Object.assign({}, s, t, e);
  }
  static fromConfig(t, e, s = {}) {
    const r = e.cell, o = ys(r, s);
    return new t(Object.assign(e, { cell: o }));
  }
}
ks.className = "RNN";
st(ks);
class Ac extends _t {
}
class fp extends Ac {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, Me(this.units, "units"), this.activation = Nr(t.activation == null ? this.DEFAULT_ACTIVATION : t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = de(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = de(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = de(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = pe(t.kernelRegularizer), this.recurrentRegularizer = pe(t.recurrentRegularizer), this.biasRegularizer = pe(t.biasRegularizer), this.kernelConstraint = Ae(t.kernelConstraint), this.recurrentConstraint = Ae(t.recurrentConstraint), this.biasConstraint = Ae(t.biasConstraint), this.dropout = Bo([1, Cr([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = Bo([
      1,
      Cr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = jt(t), this.kernel = this.addWeight("kernel", [t[t.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return M(() => {
      if (t = t, t.length !== 2)
        throw new P(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);
      let s = t[1];
      t = t[0];
      const r = e.training == null ? !1 : e.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Tr({
        ones: () => Fn(t),
        rate: this.dropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Tr({
        ones: () => Fn(s),
        rate: this.recurrentDropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      }));
      let o;
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      i != null ? o = Fs(A(t, i), this.kernel.read()) : o = Fs(t, this.kernel.read()), this.bias != null && (o = Cs(o, this.bias.read())), a != null && (s = A(s, a));
      let l = nt(o, Fs(s, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: kr(this.activation),
      useBias: this.useBias,
      kernelInitializer: be(this.kernelInitializer),
      recurrentInitializer: be(this.recurrentInitializer),
      biasInitializer: be(this.biasInitializer),
      kernelRegularizer: te(this.kernelRegularizer),
      recurrentRegularizer: te(this.recurrentRegularizer),
      biasRegularizer: te(this.biasRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      kernelConstraint: Oe(this.kernelConstraint),
      recurrentConstraint: Oe(this.recurrentConstraint),
      biasConstraint: Oe(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign({}, t, e);
  }
}
fp.className = "SimpleRNNCell";
st(fp);
class nb extends ks {
  constructor(t) {
    t.cell = new fp(t), super(t);
  }
  call(t, e) {
    return M(() => {
      this.cell.dropoutMask != null && (Dt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Dt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
nb.className = "SimpleRNN";
st(nb);
class mp extends Ac {
  constructor(t) {
    if (super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.resetAfter)
      throw new P("GRUCell does not support reset_after parameter set to true.");
    this.units = t.units, Me(this.units, "units"), this.activation = Nr(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = Nr(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = de(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = de(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = de(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = pe(t.kernelRegularizer), this.recurrentRegularizer = pe(t.recurrentRegularizer), this.biasRegularizer = pe(t.biasRegularizer), this.kernelConstraint = Ae(t.kernelConstraint), this.recurrentConstraint = Ae(t.recurrentConstraint), this.biasConstraint = Ae(t.biasConstraint), this.dropout = Bo([1, Cr([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = Bo([
      1,
      Cr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = jt(t);
    const e = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [e, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return M(() => {
      if (t = t, t.length !== 2)
        throw new P(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training == null ? !1 : e.training;
      let r = t[1];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Tr({
        ones: () => Fn(t),
        rate: this.dropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Tr({
        ones: () => Fn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const o = this.dropoutMask, i = this.recurrentDropoutMask;
      let a, l, c;
      0 < this.dropout && this.dropout < 1 && (t = A(t, o[0]));
      let u = Fs(t, this.kernel.read());
      this.useBias && (u = Cs(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = A(r, i[0]));
      const h = this.recurrentKernel.read(), [d, p] = mn(h, [2 * this.units, this.units], h.rank - 1), f = Fs(r, d), [m, g, y] = mn(u, 3, u.rank - 1), [b, w] = mn(f, 2, f.rank - 1);
      a = this.recurrentActivation.apply(nt(m, b)), l = this.recurrentActivation.apply(nt(g, w));
      const x = Fs(A(l, r), p);
      c = this.activation.apply(nt(y, x));
      const S = nt(A(a, r), A(nt(1, ce(a)), c));
      return [S, S];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: kr(this.activation),
      recurrentActivation: kr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: be(this.kernelInitializer),
      recurrentInitializer: be(this.recurrentInitializer),
      biasInitializer: be(this.biasInitializer),
      kernelRegularizer: te(this.kernelRegularizer),
      recurrentRegularizer: te(this.recurrentRegularizer),
      biasRegularizer: te(this.biasRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      kernelConstraint: Oe(this.kernelConstraint),
      recurrentConstraint: Oe(this.recurrentConstraint),
      biasConstraint: Oe(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign({}, t, e);
  }
}
mp.className = "GRUCell";
st(mp);
class sb extends ks {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new mp(t), super(t);
  }
  call(t, e) {
    return M(() => {
      this.cell.dropoutMask != null && (Dt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Dt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
sb.className = "GRU";
st(sb);
class zc extends Ac {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, Me(this.units, "units"), this.activation = Nr(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = Nr(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = de(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = de(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = de(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = t.unitForgetBias, this.kernelRegularizer = pe(t.kernelRegularizer), this.recurrentRegularizer = pe(t.recurrentRegularizer), this.biasRegularizer = pe(t.biasRegularizer), this.kernelConstraint = Ae(t.kernelConstraint), this.recurrentConstraint = Ae(t.recurrentConstraint), this.biasConstraint = Ae(t.biasConstraint), this.dropout = Bo([1, Cr([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = Bo([
      1,
      Cr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    var e;
    t = jt(t);
    const s = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let r;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const o = this.biasInitializer, i = this.units;
        r = new (e = class extends cs {
          apply(l, c) {
            const u = o.apply([i]), h = new np().apply([i]), d = o.apply([i * 2]);
            return z0(z0(u, h), d);
          }
        }, e.className = "CustomInit", e)();
      } else
        r = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, r, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(t, e) {
    return M(() => {
      const s = e.training == null ? !1 : e.training;
      if (t = t, t.length !== 3)
        throw new P(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      let r = t[1];
      const o = t[2];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Tr({
        ones: () => Fn(t),
        rate: this.dropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Tr({
        ones: () => Fn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      let l, c, u, h;
      0 < this.dropout && this.dropout < 1 && (t = A(t, i[0]));
      let d = Fs(t, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = A(r, a[0])), d = nt(d, Fs(r, this.recurrentKernel.read())), this.useBias && (d = Cs(d, this.bias.read()));
      const [p, f, m, g] = mn(d, 4, d.rank - 1);
      l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = nt(A(c, o), A(l, this.activation.apply(m))), h = this.recurrentActivation.apply(g);
      const y = A(h, this.activation.apply(u));
      return [y, y, u];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: kr(this.activation),
      recurrentActivation: kr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: be(this.kernelInitializer),
      recurrentInitializer: be(this.recurrentInitializer),
      biasInitializer: be(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: te(this.kernelRegularizer),
      recurrentRegularizer: te(this.recurrentRegularizer),
      biasRegularizer: te(this.biasRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      kernelConstraint: Oe(this.kernelConstraint),
      recurrentConstraint: Oe(this.recurrentConstraint),
      biasConstraint: Oe(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign({}, t, e);
  }
}
zc.className = "LSTMCell";
st(zc);
class rb extends ks {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new zc(t), super(t);
  }
  call(t, e) {
    return M(() => {
      this.cell.dropoutMask != null && (Dt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Dt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
rb.className = "LSTM";
st(rb);
class gp extends Ac {
  constructor(t) {
    super(t), this.cells = t.cells;
  }
  get stateSize() {
    const t = [];
    for (const e of this.cells.slice().reverse())
      Array.isArray(e.stateSize) ? t.push(...e.stateSize) : t.push(e.stateSize);
    return t;
  }
  call(t, e) {
    return M(() => {
      t = t;
      let s = t.slice(1);
      const r = [];
      for (const a of this.cells.slice().reverse())
        Array.isArray(a.stateSize) ? r.push(s.splice(0, a.stateSize.length)) : r.push(s.splice(0, 1));
      r.reverse();
      const o = [];
      let i;
      for (let a = 0; a < this.cells.length; ++a) {
        const l = this.cells[a];
        s = r[a], a === 0 ? i = [t[0]].concat(s) : i = [i[0]].concat(s), i = l.call(i, e), o.push(i.slice(1));
      }
      s = [];
      for (const a of o.slice().reverse())
        s.push(...a);
      return [i[0]].concat(s);
    });
  }
  build(t) {
    Df(t) && (t = t[0]), t = t;
    let e;
    this.cells.forEach((s, r) => {
      Qr(`RNNCell_${r}`, () => {
        s.build(t), Array.isArray(s.stateSize) ? e = s.stateSize[0] : e = s.stateSize, t = [t[0], e];
      });
    }), this.built = !0;
  }
  getConfig() {
    const t = super.getConfig(), e = (o) => ({
      className: o.getClassName(),
      config: o.getConfig()
    }), r = { cells: this.cells.map(e) };
    return Object.assign({}, t, r);
  }
  static fromConfig(t, e, s = {}) {
    const r = [];
    for (const o of e.cells)
      r.push(ys(o, s));
    return new t({ cells: r });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const t = [];
    for (const e of this.cells)
      t.push(...e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.cells)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  getWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.weights);
    return Gf(t);
  }
  setWeights(t) {
    const e = [];
    for (const s of this.cells) {
      const r = s.weights.length, o = t.splice(r);
      for (let i = 0; i < s.weights.length; ++i)
        e.push([s.weights[i], o[i]]);
    }
    Ey(e);
  }
}
gp.className = "StackedRNNCells";
st(gp);
function Tr(n) {
  const { ones: t, rate: e, training: s = !1, count: r = 1, dropoutFunc: o } = n, i = () => o != null ? o(t(), e) : TI(t(), e), a = () => Dc(i, t, s);
  return !r || r <= 1 ? Se(a().clone()) : Array(r).fill(void 0).map(a).map((c) => Se(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var CF = globalThis && globalThis.__rest || function(n, t) {
  var e = {};
  for (var s in n)
    Object.prototype.hasOwnProperty.call(n, s) && t.indexOf(s) < 0 && (e[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var r = 0, s = Object.getOwnPropertySymbols(n); r < s.length; r++)
      t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[r]) && (e[s[r]] = n[s[r]]);
  return e;
};
class pS extends ks {
  constructor(t) {
    if (t.unroll)
      throw new Gt("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(t.cell))
      throw new Gt("It is not possible at the moment to stack convolutional cells.");
    super(t), this.inputSpec = [new Ee({ ndim: 5 })];
  }
  call(t, e) {
    return M(() => {
      if (this.cell.dropoutMask != null && (Dt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Dt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), e && e.constants)
        throw new P("ConvRNN2D cell does not support constants");
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  computeOutputShape(t) {
    let e = this.computeSingleOutputShape(t);
    return this.returnSequences || (e = [e[0], ...e.slice(2)]), this.returnState && (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]), e;
  }
  getInitialState(t) {
    return M(() => {
      const { stateSize: e } = this.cell, s = t.shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)], i = Re(o);
      return Array.isArray(e) ? Array(e.length).fill(i) : [i];
    });
  }
  resetStates(t, e = !1) {
    M(() => {
      if (!this.stateful)
        throw new Ts("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)];
      if (s[0] == null)
        throw new P("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Re(o)) : this.states_ = [Re(o)];
      else if (t == null)
        Dt(this.states_), this.keptStates != null && (Dt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Re(o)) : this.states_[0] = Re(o);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new P(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e ? this.keptStates.push(this.states_.slice()) : Dt(this.states_);
        for (let a = 0; a < this.states_.length; ++a) {
          const l = t[a], c = o;
          if (!Vt(l.shape, c))
            throw new P(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
          this.states_[a] = l;
        }
      }
      this.states_ = this.states_.map((a) => Se(a.clone()));
    });
  }
  computeSingleOutputShape(t) {
    const { dataFormat: e, filters: s, kernelSize: r, padding: o, strides: i, dilationRate: a } = this.cell, l = e === "channelsFirst", c = t[l ? 3 : 2], u = t[l ? 4 : 3], h = bs(c, r[0], o, i[0], a[0]), d = bs(u, r[1], o, i[1], a[1]);
    return [
      ...t.slice(0, 2),
      ...l ? [s, h, d] : [h, d, s]
    ];
  }
}
pS.className = "ConvRNN2D";
class yp extends zc {
  constructor(t) {
    const { filters: e, kernelSize: s, strides: r, padding: o, dataFormat: i, dilationRate: a } = t;
    super(Object.assign({}, t, { units: e })), this.filters = e, Me(this.filters, "filters"), this.kernelSize = zo(s, 2, "kernelSize"), this.kernelSize.forEach((l) => Me(l, "kernelSize")), this.strides = zo(r || 1, 2, "strides"), this.strides.forEach((l) => Me(l, "strides")), this.padding = o || "valid", Bn(this.padding), this.dataFormat = i || "channelsLast", Te(this.dataFormat), this.dilationRate = zo(a || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => Me(l, "dilationRate"));
  }
  build(t) {
    var e;
    t = jt(t);
    const s = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[s] == null)
      throw new P(`The channel dimension of the input should be defined. Found ${t[s]}`);
    const r = t[s], o = 4, i = this.kernelSize.concat([r, this.filters * o]);
    this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const a = this.kernelSize.concat([this.filters, this.filters * o]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", a, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, u = this.filters;
        l = new (e = class extends cs {
          apply(d, p) {
            const f = c.apply([u]), m = $n([u]), g = c.apply([u * 2]);
            return Sy([f, m, g]);
          }
        }, e.className = "CustomInit", e)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * o], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(t, e) {
    return M(() => {
      if (t.length !== 3)
        throw new P(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training || !1, r = t[0], o = t[1], i = t[2], a = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Tr({
        ones: () => Fn(r),
        rate: this.dropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, c = (rt, ot, lt) => !ot || !ot[lt] ? rt : A(ot[lt], rt);
      let u = c(r, l, 0), h = c(r, l, 1), d = c(r, l, 2), p = c(r, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Tr({
        ones: () => Fn(o),
        rate: this.recurrentDropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const f = this.recurrentDropoutMask;
      let m = c(o, f, 0), g = c(o, f, 1), y = c(o, f, 2), b = c(o, f, 3);
      const w = 3, [x, S, v, T] = mn(this.kernel.read(), a, w), [$, R, E, V] = this.useBias ? mn(this.bias.read(), a) : [null, null, null, null];
      u = this.inputConv(u, x, $, this.padding), h = this.inputConv(h, S, R, this.padding), d = this.inputConv(d, v, E, this.padding), p = this.inputConv(p, T, V, this.padding);
      const [X, _, B, U] = mn(this.recurrentKernel.read(), a, w);
      m = this.recurrentConv(m, X), g = this.recurrentConv(g, _), y = this.recurrentConv(y, B), b = this.recurrentConv(b, U);
      const Y = this.recurrentActivation.apply(nt(u, m)), tt = this.recurrentActivation.apply(nt(h, g)), J = nt(A(tt, i), A(Y, this.activation.apply(nt(d, y)))), et = A(this.recurrentActivation.apply(nt(p, b)), this.activation.apply(J));
      return [et, et, J];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = CF(t, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign({}, e, s);
  }
  inputConv(t, e, s, r) {
    const o = Qs(t, e, this.strides, r || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? Cs(o, s, this.dataFormat) : o;
  }
  recurrentConv(t, e) {
    return Qs(t, e, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
yp.className = "ConvLSTM2DCell";
st(yp);
class ob extends pS {
  constructor(t) {
    const e = new yp(t);
    super(Object.assign({}, t, { cell: e }));
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
ob.className = "ConvLSTM2D";
st(ob);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class bp extends _t {
  constructor(t) {
    super(t), this.rate = Math.max(Math.min(t.rate, 1), 0), this.noiseShape = t.noiseShape, this.seed = t.seed, this.supportsMasking = !0;
  }
  getNoiseShape(t) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const e = t.shape, s = [];
    for (let r = 0; r < this.noiseShape.length; ++r)
      s.push(this.noiseShape[r] == null ? e[r] : this.noiseShape[r]);
    return s;
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t);
      if (0 < this.rate && this.rate < 1) {
        const r = e.training == null ? !1 : e.training, o = this.getNoiseShape(s);
        return Dc(() => TI(s, this.rate, o, this.seed), () => s, r);
      }
      return t;
    });
  }
  getConfig() {
    const t = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  dispose() {
    return super.dispose();
  }
}
bp.className = "Dropout";
st(bp);
class ib extends bp {
  constructor(t) {
    super(t), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(t) {
    const e = t.shape;
    return [e[0], 1, e[2]];
  }
}
ib.className = "SpatialDropout1D";
st(ib);
class ab extends _t {
  constructor(t) {
    if (super(t), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.batchInputShape == null && t.inputShape == null && t.inputDim != null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), this.batchInputShape = [e, t.inputDim];
    }
    this.units = t.units, Me(this.units, "units"), this.activation = Nr(t.activation), t.useBias != null && (this.useBias = t.useBias), this.kernelInitializer = de(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = de(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Ae(t.kernelConstraint), this.biasConstraint = Ae(t.biasConstraint), this.kernelRegularizer = pe(t.kernelRegularizer), this.biasRegularizer = pe(t.biasRegularizer), this.activityRegularizer = pe(t.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(t) {
    t = jt(t);
    const e = t[t.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [e, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }], this.built = !0;
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = t.slice();
    return e[e.length - 1] = this.units, e;
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t), r = wI(this.activation.getClassName());
      let o;
      return r != null ? o = Fs(s, this.kernel.read(), r, this.bias ? this.bias.read() : null) : (o = Fs(s, this.kernel.read()), this.bias != null && (o = Cs(o, this.bias.read())), this.activation != null && (o = this.activation.apply(o))), o;
    });
  }
  getConfig() {
    const t = {
      units: this.units,
      activation: kr(this.activation),
      useBias: this.useBias,
      kernelInitializer: be(this.kernelInitializer),
      biasInitializer: be(this.biasInitializer),
      kernelRegularizer: te(this.kernelRegularizer),
      biasRegularizer: te(this.biasRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      kernelConstraint: Oe(this.kernelConstraint),
      biasConstraint: Oe(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ab.className = "Dense";
st(ab);
class lb extends _t {
  constructor(t) {
    t = t || {}, super(t), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = t.dataFormat;
  }
  computeOutputShape(t) {
    t = jt(t);
    for (const e of t.slice(1))
      if (e == null)
        throw new P(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [t[0], xr(t, 1)];
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      let s = Ot(t);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const r = [0];
        for (let o = 2; o < s.rank; ++o)
          r.push(o);
        r.push(1), s = Wt(s, r);
      }
      return A3(s);
    });
  }
  getConfig() {
    const t = {};
    this.dataFormat != null && (t.dataFormat = this.dataFormat);
    const e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
lb.className = "Flatten";
st(lb);
class cb extends _t {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.activation = Nr(t.activation);
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const t = { activation: kr(this.activation) }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
cb.className = "Activation";
st(cb);
class ub extends _t {
  constructor(t) {
    super(t), this.n = t.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(t) {
    return [t[0], this.n, t[1]];
  }
  call(t, e) {
    return M(() => (t = Ot(t), F3(t, this.n)));
  }
  getConfig() {
    const t = {
      n: this.n
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ub.className = "RepeatVector";
st(ub);
class hb extends _t {
  constructor(t) {
    super(t), this.targetShape = t.targetShape;
    for (let e = 0; e < this.targetShape.length; ++e)
      this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
  }
  isUnknown(t) {
    return t < 0 || t == null;
  }
  fixUnknownDimension(t, e) {
    const s = "Total size of new array must be unchanged.", r = e.slice();
    let o = 1, i = null;
    for (let l = 0; l < r.length; ++l) {
      const c = r[l];
      if (this.isUnknown(c))
        if (i === null)
          i = l;
        else
          throw new P("Can only specifiy one unknown dimension.");
      else
        o *= c;
    }
    const a = xr(t);
    if (i !== null) {
      if (o === 0 || a % o !== 0)
        throw new P(s);
      r[i] = a / o;
    } else if (a !== o)
      throw new P(s);
    return r;
  }
  computeOutputShape(t) {
    let e = !1;
    for (let s = 0; s < t.length; ++s)
      if (this.isUnknown(t[s])) {
        e = !0;
        break;
      }
    return e ? t.slice(0, 1).concat(this.targetShape) : t.slice(0, 1).concat(this.fixUnknownDimension(t.slice(1), this.targetShape));
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t), r = s.shape, o = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
      return W(s, o);
    });
  }
  getConfig() {
    const t = {
      targetShape: this.targetShape
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
hb.className = "Reshape";
st(hb);
class db extends _t {
  constructor(t) {
    if (super(t), t.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(t.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);
    const e = xs(1, t.dims.length + 1);
    if (!Vt(t.dims.slice().sort(), e))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = t.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new Ee({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = t.slice();
    return this.dims.forEach((s, r) => {
      e[r + 1] = t[s];
    }), e;
  }
  call(t, e) {
    return Wt(Ot(t), this.dimsIncludingBatch);
  }
  getConfig() {
    const t = {
      dims: this.dims
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
db.className = "Permute";
st(db);
class pb extends _t {
  constructor(t) {
    super(t == null ? {} : t), this.supportsMasking = !0, t != null ? this.maskValue = t.maskValue == null ? 0 : t.maskValue : this.maskValue = 0;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { maskValue: this.maskValue };
    return Object.assign(e, t), e;
  }
  computeMask(t, e) {
    const s = Ot(t), r = -1;
    return Ba(io(s, this.maskValue), r);
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t), r = -1, o = !0, i = Ba(io(s, this.maskValue), r, o);
      return A(s, ut(i, s.dtype));
    });
  }
}
pb.className = "Masking";
st(pb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class fb extends _t {
  constructor(t) {
    if (super(t), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", t.batchInputShape == null && t.inputShape == null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), t.inputLength == null ? this.batchInputShape = [e, null] : this.batchInputShape = [e].concat(ie(t.inputLength));
    }
    this.inputDim = t.inputDim, Me(this.inputDim, "inputDim"), this.outputDim = t.outputDim, Me(this.outputDim, "outputDim"), this.embeddingsInitializer = de(t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = pe(t.embeddingsRegularizer), this.activityRegularizer = pe(t.activityRegularizer), this.embeddingsConstraint = Ae(t.embeddingsConstraint), this.maskZero = t.maskZero, this.supportsMasking = t.maskZero, this.inputLength = t.inputLength;
  }
  build(t) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  warnOnIncompatibleInputShape(t) {
  }
  computeMask(t, e) {
    return M(() => this.maskZero ? (t = Ot(t), io(t, Xt(t))) : null);
  }
  computeOutputShape(t) {
    if (t = jt(t), this.inputLength == null)
      return [...t, this.outputDim];
    const e = ie(this.inputLength);
    if (e.length !== t.length - 1)
      throw new P(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
    {
      let s = 0;
      for (let r = 0; r < e.length; ++r) {
        const o = e[r], i = t[r + 1];
        if (o != null && i != null && o !== i)
          throw new P(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
        o == null && (e[s] = i), s++;
      }
    }
    return [t[0], ...e, this.outputDim];
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      let s = Ot(t);
      s.dtype !== "int32" && (s = Rc(s, "int32"));
      const r = NI(this.embeddings.read(), W(s, [s.size]));
      return W(r, jt(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const t = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: be(this.embeddingsInitializer),
      embeddingsRegularizer: te(this.embeddingsRegularizer),
      activityRegularizer: te(this.activityRegularizer),
      embeddingsConstraint: Oe(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
fb.className = "Embedding";
st(fb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Co extends _t {
  constructor(t) {
    super(t || {}), this.supportsMasking = !0;
  }
  mergeFunction(t) {
    throw new Gt();
  }
  computeElementwiseOpOutputShape(t, e) {
    if (t == null || e == null)
      return null;
    if (t.length < e.length)
      return this.computeElementwiseOpOutputShape(e, t);
    if (e.length === 0)
      return t;
    const s = t.slice(0, t.length - e.length);
    for (let r = 0; r < e.length; ++r) {
      const o = t[t.length - e.length + r], i = e[r];
      if (o == null || i == null || o < 0 || i < 0)
        s.push(null);
      else if (o === 1)
        s.push(i);
      else if (i === 1)
        s.push(o);
      else {
        if (o !== i)
          throw new P("Operands could not be broadcast together with shapes " + JSON.stringify(t) + " " + JSON.stringify(e));
        s.push(o);
      }
    }
    return s;
  }
  build(t) {
    if (Array.isArray(t) && !Array.isArray(t[0]) && (t = [jt(t)]), t = t, t.length < 2)
      throw new P(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);
    let e = [];
    for (const o of t)
      o != null && o[0] !== null && e.push(o[0]);
    if (e = br(e), e.length > 1)
      throw new P(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);
    let s = t[0] == null ? null : t[0].slice(1);
    for (let o = 1; o < t.length; ++o) {
      const i = t[o] == null ? null : t[o].slice(1);
      s = this.computeElementwiseOpOutputShape(s, i);
    }
    const r = t.map((o) => o.length);
    t.indexOf(null) === -1 && br(r).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(t, e) {
    return M(() => {
      if (t = t, this.reshapeRequired) {
        const s = [], r = t.map((o) => o.rank);
        if (r.indexOf(null) === -1) {
          const o = Cr(r);
          for (let i of t) {
            const a = i.rank;
            for (let l = 0; l < o - a; ++l)
              i = Ec(i, 1);
            s.push(i);
          }
          return this.mergeFunction(s);
        } else {
          let o = !1;
          for (const l of t) {
            const c = l.rank;
            if (c == null) {
              const u = l.shape, h = u[0], d = u.slice(1).concat([h]);
              let p = W(l, [h].concat(xr(u.slice(1))));
              p = Wt(p, [1, 0]), p = W(p, d), s.push(p), o = !0;
            } else if (c > 1) {
              const u = xs(1, c).concat([0]);
              s.push(Wt(l, u)), o = !0;
            } else
              s.push(l);
          }
          let i = this.mergeFunction(s);
          const a = i.rank;
          if (o) {
            if (a == null) {
              const l = i.shape, c = l.length, u = l[c - 1], h = [u].concat(l.slice(0, l.length - 1));
              i = W(Wt(W(i, [-1, u]), [1, 0]), h);
            } else if (a > 1) {
              const l = [a - 1].concat(xs(0, a - 1));
              i = Wt(i, l);
            }
          }
          return i;
        }
      } else
        return this.mergeFunction(t);
    });
  }
  computeOutputShape(t) {
    t = t;
    let e;
    t[0] == null ? e = null : e = t[0].slice(1);
    for (let r = 1; r < t.length; ++r) {
      const o = t[r] == null ? null : t[r].slice(1);
      e = this.computeElementwiseOpOutputShape(e, o);
    }
    let s = [];
    for (const r of t)
      r != null && r[0] !== null && s.push(r[0]);
    return s = br(s), s.length === 1 ? e = s.concat(e) : e = [null].concat(e), e;
  }
  computeMask(t, e) {
    return M(() => {
      if (e == null)
        return null;
      if (!Array.isArray(e))
        throw new P("`mask` should be an Array");
      if (!Array.isArray(t))
        throw new P("`inputs` should be an Array");
      if (e.length !== t.length)
        throw new P(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);
      if (e.every((r) => r == null))
        return null;
      e = e.map((r) => r == null ? r : pn(r, 0));
      let s = e[0];
      for (let r = 1; r < e.length - 1; ++r)
        s = is(s, e[r]);
      return s;
    });
  }
}
class mb extends Co {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return M(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = nt(e, t[s]);
      return e;
    });
  }
}
mb.className = "Add";
st(mb);
class gb extends Co {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return M(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = A(e, t[s]);
      return e;
    });
  }
}
gb.className = "Multiply";
st(gb);
class yb extends Co {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return M(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = nt(e, t[s]);
      return A(1 / t.length, e);
    });
  }
}
yb.className = "Average";
st(yb);
class bb extends Co {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return M(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = Ps(e, t[s]);
      return e;
    });
  }
}
bb.className = "Maximum";
st(bb);
class xb extends Co {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return M(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = ra(e, t[s]);
      return e;
    });
  }
}
xb.className = "Minimum";
st(xb);
class wb extends Co {
  constructor(t) {
    super(t), this.DEFAULT_AXIS = -1, t == null && (t = {}), this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
      throw new P("A `Concatenate` layer should be called on a list of at least 2 inputs");
    t = t;
    let e = !0;
    for (const r of t)
      if (r != null) {
        e = !1;
        break;
      }
    if (e)
      return;
    const s = [];
    for (let r = 0; r < t.length; ++r) {
      const o = t[r].slice();
      o.splice(this.axis, 1);
      let i = !1;
      for (const a of s)
        if (Vt(a, o)) {
          i = !0;
          break;
        }
      i || s.push(o);
    }
    if (s.length > 1)
      throw new P("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(t));
  }
  mergeFunction(t) {
    return M(() => Sy(t, this.axis));
  }
  computeOutputShape(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])))
      throw new P("A `Concatenate` layer should be called on a list of inputs.");
    const e = t, s = e[0].slice(), r = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const o of e.slice(1)) {
      if (s[r] == null || o[r] == null) {
        s[r] = null;
        break;
      }
      s[r] += o[r];
    }
    return s;
  }
  computeMask(t, e) {
    if (e == null)
      return null;
    if (!Array.isArray(e))
      throw new P("`mask` should be an array for Concatenate");
    if (!Array.isArray(t))
      throw new P("`inputs` should be an array for Concatenate");
    if (e.length !== t.length)
      throw new P(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);
    return M(() => {
      let s = !0;
      if (e.forEach((i) => {
        if (i != null) {
          s = !1;
          return;
        }
      }), s)
        return null;
      const r = [];
      for (let i = 0; i < t.length; ++i)
        e[i] == null ? r.push(ut(Fn(t[i]), "bool")) : e[i].rank < t[i].rank ? r.push(pn(e[i], -1)) : r.push(e[i]);
      const o = Ce(r, this.axis);
      return hd(o, -1, !1);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
wb.className = "Concatenate";
st(wb);
function Ca(n, t) {
  for (; n < 0; )
    n += t;
  return n;
}
function kF(n, t, e) {
  if (n.shape.length > 3 || t.shape.length > 3)
    throw new Gt("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (k(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), k(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof e == "number" && (e = [e, e]), n.dtype === "complex64" || t.dtype === "complex64")
    throw new Gt("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, r = t.shape.length;
  e == null && (e = [s - 1, r - 2]);
  const o = e;
  return M(() => {
    let i;
    if (s > r) {
      i = s - r;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      t = W(t, t.shape.concat(l));
    } else if (r > s) {
      i = r - s;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      n = W(n, n.shape.concat(l));
    } else
      i = 0;
    let a;
    if (n.shape.length === 2 && t.shape.length === 2)
      o[0] === o[1] ? a = yt(A(n, t), o[0]) : a = yt(A(Wt(n, [1, 0]), t), o[1]);
    else {
      const l = o[0] !== n.shape.length - 1, c = o[1] === t.shape.length - 1;
      a = zt(n, t, l, c);
    }
    if (i > 0) {
      let l;
      s > r ? l = s + r - 3 : l = s - 1;
      const c = [];
      for (let u = l; u < l + i; ++u)
        c.push(u);
      a = Or(a, c);
    }
    return a.shape.length === 1 && (a = pn(a, 1)), a;
  });
}
class Ib extends Co {
  constructor(t) {
    super(t), this.axes = t.axes, this.normalize = t.normalize == null ? !1 : t.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    k(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0], s = t[1];
    if (e.length > 3 || s.length > 3)
      throw new Gt("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(e, s);
    if (e[r[0]] !== s[r[1]])
      throw new P(`Dimension incompatibility: ${e[r[0]]} !== ${s[r[1]]}`);
  }
  mergeFunction(t) {
    if (t.length !== 2)
      throw new P(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);
    let e = t[0], s = t[1], r;
    return Array.isArray(this.axes) ? r = this.axes.map((o, i) => Ca(o, t[i].shape.length)) : r = [
      Ca(this.axes, e.shape.length),
      Ca(this.axes, s.shape.length)
    ], this.normalize && (e = Fu(e, r[0]), s = Fu(s, r[1])), kF(e, s, r);
  }
  interpretAxes(t, e) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [
      Ca(this.axes, t.length),
      Ca(this.axes, e.length)
    ], s;
  }
  computeOutputShape(t) {
    k(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0].slice(), s = t[1].slice();
    if (e.length > 3 || s.length > 3)
      throw new Gt("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(e, s);
    e.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
    const o = e.concat(s);
    return o.length === 1 && o.push(1), o;
  }
  computeMask(t, e) {
    return null;
  }
  getConfig() {
    const t = {
      axes: this.axes,
      normalize: this.normalize
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Ib.className = "Dot";
st(Ib);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Sb extends _t {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.stddev = t.stddev;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { stddev: this.stddev };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t);
      return Dc(() => nt(ep(s.shape, 0, this.stddev), s), () => s, e.training || !1);
    });
  }
}
Sb.className = "GaussianNoise";
st(Sb);
class vb extends _t {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e);
      const s = Ot(t);
      return this.rate > 0 && this.rate < 1 ? Dc(() => {
        const o = Math.sqrt(this.rate / (1 - this.rate));
        return A(s, ep(s.shape, 1, o));
      }, () => s, e.training || !1) : s;
    });
  }
}
vb.className = "GaussianDropout";
st(vb);
class Cb extends _t {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate, this.noiseShape = t.noiseShape;
  }
  _getNoiseShape(t) {
    return this.noiseShape || Ot(t).shape;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return M(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(t);
        return Dc(() => {
          const o = Ot(t), i = 1.6732632423543772, a = 1.0507009873554805, l = -i * a;
          let c = Gr(ia(s), this.rate);
          c = Rc(c, "float32");
          const u = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, h = -u * l * this.rate, d = nt(A(o, c), A(nt(c, -1), l));
          return nt(A(d, u), h);
        }, () => Ot(t), e.training || !1);
      }
      return t;
    });
  }
}
Cb.className = "AlphaDropout";
st(Cb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Qa(n, t, e, s, r, o = 1e-3) {
  let i;
  if (n.rank === 2)
    i = Hm(n, t, e, s, r, o);
  else if (n.rank === 3)
    i = Um(n, t, e, s, r, o);
  else if (n.rank === 4)
    i = Ym(n, t, e, s, r, o);
  else
    throw new Gt(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return i;
}
function NF(n, t, e, s, r = 1e-3) {
  return M(() => {
    const o = mc(n, s), i = o.mean, a = o.variance;
    return [Qa(n, i, a, e, t, r), i, a];
  });
}
function TF(n, t, e, s, r = 1e-3) {
  return M(() => {
    const o = mc(n, s), i = o.mean, a = o.variance, l = [];
    for (const f of xs(0, n.rank))
      s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
    const c = W(i, l), u = W(a, l), h = t == null ? null : W(t, l), d = e == null ? null : W(e, l);
    return [Qa(n, c, u, d, h, r), i, a];
  });
}
function $F(n, t, e, s, r = 1e-3) {
  return Vt(s.slice().sort(), xs(0, n.rank - 1)) ? NF(n, t, e, s, r) : TF(n, t, e, s, r);
}
class kb extends _t {
  constructor(t) {
    t == null && (t = {}), super(t), this.supportsMasking = !0, this.axis = t.axis == null ? -1 : t.axis, this.momentum = t.momentum == null ? 0.99 : t.momentum, this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = de(t.betaInitializer || "zeros"), this.gammaInitializer = de(t.gammaInitializer || "ones"), this.movingMeanInitializer = de(t.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = de(t.movingVarianceInitializer || "ones"), this.betaConstraint = Ae(t.betaConstraint), this.gammaConstraint = Ae(t.gammaConstraint), this.betaRegularizer = pe(t.betaRegularizer), this.gammaRegularizer = pe(t.gammaRegularizer);
  }
  build(t) {
    t = jt(t);
    const e = this.axis >= 0 ? this.axis : this.axis + t.length, s = t[e];
    if (s == null)
      throw new P(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);
    this.inputSpec = [new Ee({ ndim: t.length, axes: { [e]: s } })];
    const r = [s];
    this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(t, e) {
    return M(() => {
      const s = e.training == null ? !1 : e.training, r = Ot(t), o = r.shape, i = o.length, a = xs(0, i), l = this.axis >= 0 ? this.axis : this.axis + i;
      a.splice(l, 1);
      const c = ao(1, i);
      c[l] = o[l];
      const u = a.slice();
      u.sort();
      const h = !Vt(u, xs(0, i).slice(0, i - 1)), d = () => {
        if (h) {
          const b = W(this.movingMean.read(), c), w = W(this.movingVariance.read(), c), x = this.center ? W(this.beta.read(), c) : null, S = this.scale ? W(this.gamma.read(), c) : null;
          return Qa(r, b, w, x, S, this.epsilon);
        } else
          return Qa(r, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s)
        return d();
      const [p, f, m] = $F(r, this.gamma.read(), this.beta.read(), a, this.epsilon), g = (b, w, x) => {
        M(() => {
          const S = 1 - x, v = b.read(), T = A(mt(v, w), S);
          b.write(mt(v, T));
        });
      };
      return (() => {
        g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: be(this.betaInitializer),
      gammaInitializer: be(this.gammaInitializer),
      movingMeanInitializer: be(this.movingMeanInitializer),
      movingVarianceInitializer: be(this.movingVarianceInitializer),
      betaRegularizer: te(this.betaRegularizer),
      gammaRegularizer: te(this.gammaRegularizer),
      betaConstraint: Oe(this.betaConstraint),
      gammaConstraint: Oe(this.gammaConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
kb.className = "BatchNormalization";
st(kb);
class Nb extends _t {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.axis = t.axis == null ? -1 : t.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const e of this.axis)
        if (!Number.isInteger(e))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = de(t.betaInitializer || "zeros"), this.gammaInitializer = de(t.gammaInitializer || "ones"), this.betaRegularizer = pe(t.betaRegularizer), this.gammaRegularizer = pe(t.gammaRegularizer), this.supportsMasking = !0;
  }
  build(t) {
    t = jt(t);
    const e = t.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let o = 0; o < this.axis.length; ++o)
      this.axis[o] < 0 && (this.axis[o] += e);
    for (const o of this.axis)
      if (o < 0 || o >= e)
        throw new Error(`Invalid axis: ${o}`);
    if (this.axis.length !== br(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((o) => t[o]), r = !0;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, r) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, r) : this.beta = null, this.built = !0;
  }
  call(t, e) {
    const s = Ot(t), r = s.shape, o = r.length;
    return M(() => {
      let { mean: a, variance: l } = mc(s, this.axis, !0);
      const c = ao(1, o);
      for (const m of this.axis)
        c[m] = r[m];
      const u = (m) => m != null && m.shape.length !== o ? W(m, c) : m;
      let h = this.scale ? u(this.gamma.read()) : null, d = this.center ? u(this.beta.read()) : null;
      const p = [], f = [];
      for (let m = 0; m < o; ++m)
        this.axis.indexOf(m) !== -1 ? (p.push(r[m]), f.push(1)) : (p.push(1), f.push(r[m]));
      return a = Mn(a, p), l = Mn(l, p), h != null && (h = Mn(h, f)), d != null && (d = Mn(d, f)), Qa(s, a, l, d, h, this.epsilon);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: be(this.betaInitializer),
      gammaInitializer: be(this.gammaInitializer),
      betaRegularizer: te(this.betaRegularizer),
      gammaRegularizer: te(this.gammaRegularizer)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Nb.className = "LayerNormalization";
st(Nb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function RF(n, t, e) {
  return M(() => {
    if (n.rank !== 4)
      throw new P(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
      throw new P("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (e == null && (e = ws()), e !== "channelsLast" && e !== "channelsFirst")
      throw new P(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return e === "channelsFirst" ? s = [[0, 0], [0, 0], t[0], t[1]] : s = [[0, 0], t[0], t[1], [0, 0]], ir(n, s);
  });
}
class Tb extends _t {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.dataFormat = t.dataFormat == null ? ws() : t.dataFormat, t.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof t.padding == "number")
      this.padding = [[t.padding, t.padding], [t.padding, t.padding]];
    else {
      if (t.padding = t.padding, t.padding.length !== 2)
        throw new P(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);
      let e, s;
      if (typeof t.padding[0] == "number")
        e = [t.padding[0], t.padding[0]], s = [t.padding[1], t.padding[1]];
      else {
        if (t.padding = t.padding, t.padding[0].length !== 2)
          throw new P(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);
        if (e = t.padding[0], t.padding[1].length !== 2)
          throw new P(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);
        s = t.padding[1];
      }
      this.padding = [e, s];
    }
    this.inputSpec = [new Ee({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = jt(t);
    let e, s;
    return this.dataFormat === "channelsFirst" ? (t[2] != null && t[2] >= 0 ? e = t[2] + this.padding[0][0] + this.padding[0][1] : e = null, t[3] != null && t[3] >= 0 ? s = t[3] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], t[1], e, s]) : (t[1] != null && t[1] >= 0 ? e = t[1] + this.padding[0][0] + this.padding[0][1] : e = null, t[2] != null && t[2] >= 0 ? s = t[2] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], e, s, t[3]]);
  }
  call(t, e) {
    return M(() => RF(Ot(t), this.padding, this.dataFormat));
  }
  getConfig() {
    const t = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Tb.className = "ZeroPadding2D";
st(Tb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function xp(n, t, e, s, r, o) {
  return M(() => {
    Te(r), SI(o), Bn(s), e == null && (e = [1, 1]), s == null && (s = "valid"), r == null && (r = ws()), o == null && (o = "max"), n = Yy(n, r);
    let i;
    const a = s === "same" ? "same" : "valid";
    return o === "max" ? i = fc(n, t, e, a) : i = lc(
      n,
      t,
      e,
      a
    ), r === "channelsFirst" && (i = Wt(i, [0, 3, 1, 2])), i;
  });
}
function fS(n, t, e, s, r, o) {
  return M(() => {
    Te(r), SI(o), Bn(s), e == null && (e = [1, 1, 1]), s == null && (s = "valid"), r == null && (r = ws()), o == null && (o = "max"), n = cS(n, r);
    let i;
    const a = s === "same" ? "same" : "valid";
    return o === "max" ? i = xg(n, t, e, a) : i = Bm(n, t, e, a), r === "channelsFirst" && (i = Wt(i, [0, 4, 1, 2, 3])), i;
  });
}
class mS extends _t {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = 2), super(t), typeof t.poolSize == "number")
      this.poolSize = [t.poolSize];
    else if (Array.isArray(t.poolSize) && t.poolSize.length === 1 && typeof t.poolSize[0] == "number")
      this.poolSize = t.poolSize;
    else
      throw new P(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);
    if (Me(this.poolSize, "poolSize"), t.strides == null)
      this.strides = this.poolSize;
    else if (typeof t.strides == "number")
      this.strides = [t.strides];
    else if (Array.isArray(t.strides) && t.strides.length === 1 && typeof t.strides[0] == "number")
      this.strides = t.strides;
    else
      throw new P(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);
    Me(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, Bn(this.padding), this.inputSpec = [new Ee({ ndim: 3 })];
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = bs(t[1], this.poolSize[0], this.padding, this.strides[0]);
    return [t[0], e, t[2]];
  }
  call(t, e) {
    return M(() => {
      this.invokeCallHook(t, e), t = Ec(Ot(t), 2);
      const s = this.poolingFunction(Ot(t), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return Or(s, [2]);
    });
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class $b extends mS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), xp(t, e, s, r, o, "max");
  }
}
$b.className = "MaxPooling1D";
st($b);
class Rb extends mS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), xp(t, e, s, r, o, "avg");
  }
}
Rb.className = "AveragePooling1D";
st(Rb);
class gS extends _t {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 2)
        throw new P(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides];
    Me(this.poolSize, "poolSize"), Me(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Te(this.dataFormat), Bn(this.padding), this.inputSpec = [new Ee({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = jt(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2];
    return e = bs(e, this.poolSize[0], this.padding, this.strides[0]), s = bs(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s] : [t[0], e, s, t[3]];
  }
  call(t, e) {
    return M(() => (this.invokeCallHook(t, e), this.poolingFunction(Ot(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Eb extends gS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), xp(t, e, s, r, o, "max");
  }
}
Eb.className = "MaxPooling2D";
st(Eb);
class Lb extends gS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), xp(t, e, s, r, o, "avg");
  }
}
Lb.className = "AveragePooling2D";
st(Lb);
class yS extends _t {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 3)
        throw new P(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides, t.strides];
    Me(this.poolSize, "poolSize"), Me(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Te(this.dataFormat), Bn(this.padding), this.inputSpec = [new Ee({ ndim: 5 })];
  }
  computeOutputShape(t) {
    t = jt(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], r = this.dataFormat === "channelsFirst" ? t[4] : t[3];
    return e = bs(e, this.poolSize[0], this.padding, this.strides[0]), s = bs(s, this.poolSize[1], this.padding, this.strides[1]), r = bs(r, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s, r] : [t[0], e, s, r, t[4]];
  }
  call(t, e) {
    return M(() => (this.invokeCallHook(t, e), this.poolingFunction(Ot(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Db extends yS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), fS(t, e, s, r, o, "max");
  }
}
Db.className = "MaxPooling3D";
st(Db);
class Gb extends yS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return Te(o), Bn(r), fS(t, e, s, r, o, "avg");
  }
}
Gb.className = "AveragePooling3D";
st(Gb);
class bS extends _t {
  constructor(t) {
    super(t), this.inputSpec = [new Ee({ ndim: 3 })];
  }
  computeOutputShape(t) {
    return [t[0], t[2]];
  }
  call(t, e) {
    throw new Gt();
  }
}
class Fb extends bS {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return M(() => {
      const s = Ot(t);
      return ye(s, 1);
    });
  }
}
Fb.className = "GlobalAveragePooling1D";
st(Fb);
class Ob extends bS {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return M(() => {
      const s = Ot(t);
      return os(s, 1);
    });
  }
}
Ob.className = "GlobalMaxPooling1D";
st(Ob);
class xS extends _t {
  constructor(t) {
    super(t), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Te(this.dataFormat), this.inputSpec = [new Ee({ ndim: 4 })];
  }
  computeOutputShape(t) {
    return t = t, this.dataFormat === "channelsLast" ? [t[0], t[3]] : [t[0], t[1]];
  }
  call(t, e) {
    throw new Gt();
  }
  getConfig() {
    const t = { dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Ab extends xS {
  call(t, e) {
    return M(() => {
      const s = Ot(t);
      return this.dataFormat === "channelsLast" ? ye(s, [1, 2]) : ye(s, [2, 3]);
    });
  }
}
Ab.className = "GlobalAveragePooling2D";
st(Ab);
class zb extends xS {
  call(t, e) {
    return M(() => {
      const s = Ot(t);
      return this.dataFormat === "channelsLast" ? os(s, [1, 2]) : os(s, [2, 3]);
    });
  }
}
zb.className = "GlobalMaxPooling2D";
st(zb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class wS extends _t {
  constructor(t) {
    super(t), this.layer = t.layer;
  }
  build(t) {
    this.built = !0;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(t) {
    this.layer != null && (this.layer.trainable = t);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(t) {
    this.layer.setWeights(t);
  }
  getConfig() {
    const t = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
  }
  static fromConfig(t, e, s = {}) {
    const r = e.layer, o = ys(r, s);
    delete e.layer;
    const i = { layer: o };
    return Object.assign(i, e), new t(i);
  }
}
class Wb extends wS {
  constructor(t) {
    super(t), this.supportsMasking = !0;
  }
  build(t) {
    if (t = jt(t), t.length < 3)
      throw new P(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);
    this.inputSpec = [{ shape: t }];
    const e = [t[0]].concat(t.slice(2));
    this.layer.built || (this.layer.build(e), this.layer.built = !0), super.build(t);
  }
  computeOutputShape(t) {
    t = jt(t);
    const e = [t[0]].concat(t.slice(2)), s = this.layer.computeOutputShape(e), r = t[1];
    return [s[0], r].concat(s.slice(1));
  }
  call(t, e) {
    return M(() => (t = Ot(t), dS((i, a) => [Ot(this.layer.call(i, e)), []], t, [], !1, null, null, !1, !0)[1]));
  }
}
Wb.className = "TimeDistributed";
st(Wb);
function EF(n) {
  So(R3, "BidirectionalMergeMode", n);
}
const LF = "concat";
class Vb extends wS {
  constructor(t) {
    super(t);
    const e = t.layer.getConfig(), s = {};
    s.className = t.layer.getClassName(), s.config = e, this.forwardLayer = ys(s), e.goBackwards = e.goBackwards !== !0;
    const r = {};
    if (r.className = t.layer.getClassName(), r.config = e, this.backwardLayer = ys(r), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = t.mergeMode === void 0 ? LF : t.mergeMode, EF(this.mergeMode), t.weights)
      throw new Gt("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = t.layer.stateful, this.returnSequences = t.layer.returnSequences, this.returnState = t.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = t.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(t) {
    this._trainable = t, this.forwardLayer != null && (this.forwardLayer.trainable = t), this.backwardLayer != null && (this.backwardLayer.trainable = t);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(t) {
    const e = t.length, s = Math.floor(e / 2);
    this.forwardLayer.setWeights(t.slice(0, s)), this.backwardLayer.setWeights(t.slice(s));
  }
  computeOutputShape(t) {
    let e = this.forwardLayer.computeOutputShape(t);
    Array.isArray(e) && Array.isArray(e[0]) || (e = [e]), e = e;
    let s, r, o;
    return this.returnState && (o = e.slice(1)), s = e[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, r = [s]) : this.mergeMode == null ? r = [s, s.slice()] : r = [s], this.returnState ? this.mergeMode == null ? r.concat(o).concat(o.slice()) : [s].concat(o).concat(o.slice()) : fn(r);
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, r = e == null ? null : e.constants;
    e == null && (e = {});
    const o = hS(t, s, r, this.numConstants);
    if (t = o.inputs, s = o.initialState, r = o.constants, Array.isArray(t) && (s = t.slice(1), t = t[0]), (s == null || s.length === 0) && r == null)
      return super.apply(t, e);
    const i = [], a = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0)
        throw new P("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      e.initialState = s, i.push(...s);
      const u = s.map((h) => new Ee({ shape: h.shape }));
      this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), a.push(...u);
    }
    if (r != null)
      throw new Gt("Support for constants in Bidirectional layers is not implemented yet.");
    const l = i[0] instanceof ms;
    for (const c of i)
      if (c instanceof ms !== l)
        throw new P("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return M(() => {
      const s = e.initialState;
      let r, o;
      if (s == null)
        r = this.forwardLayer.call(t, e), o = this.backwardLayer.call(t, e);
      else {
        const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        r = this.forwardLayer.call(t, Object.assign(e, { initialState: l })), o = this.backwardLayer.call(t, Object.assign(e, { initialState: c }));
      }
      let i;
      this.returnState && (Array.isArray(r) && (i = r.slice(1).concat(o.slice(1))), r = r[0], o = o[0]), this.returnSequences && (o = Zn(o, 1));
      let a;
      return this.mergeMode === "concat" ? a = Sy([r, o]) : this.mergeMode === "sum" ? a = nt(r, o) : this.mergeMode === "ave" ? a = A(0.5, nt(r, o)) : this.mergeMode === "mul" ? a = A(r, o) : this.mergeMode == null && (a = [r, o]), this.returnState ? this.mergeMode == null ? a.concat(i) : [a].concat(i) : a;
    });
  }
  resetStates(t) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(t) {
    Qr(this.forwardLayer.name, () => {
      this.forwardLayer.build(t);
    }), Qr(this.backwardLayer.name, () => {
      this.backwardLayer.build(t);
    }), this.built = !0;
  }
  computeMask(t, e) {
    Array.isArray(e) && (e = e[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [e, e] : s = e : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const o = this.forwardLayer.states.map((i) => null);
      return Array.isArray(s) ? s.concat(o).concat(o) : [s].concat(o).concat(o);
    } else
      return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(t), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = {
      mergeMode: this.mergeMode
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static fromConfig(t, e) {
    const s = ys(e.layer);
    if (delete e.layer, e.numConstants != null)
      throw new Gt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const r = e;
    return r.layer = s, new t(r);
  }
}
Vb.className = "Bidirectional";
st(Vb);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Pb extends _t {
  constructor(t) {
    super(t), this.scale = t.scale, t.offset ? this.offset = t.offset : this.offset = 0;
  }
  getConfig() {
    const t = {
      scale: this.scale,
      offset: this.offset
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  call(t, e) {
    return M(() => (t = Ot(t), t.dtype !== "float32" && (t = Rc(t, "float32")), nt(A(t, this.scale), this.offset)));
  }
}
Pb.className = "Rescaling";
st(Pb);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function DF(n) {
  return new la(n);
}
function GF(n) {
  return new By(n);
}
function FF(n) {
  return new _y(n);
}
function OF(n) {
  return new Ky(n);
}
function AF(n) {
  return new Zy(n);
}
function zF(n) {
  return new Uy(n);
}
function WF(n) {
  return new Hy(n);
}
function VF(n) {
  return new Oc(n);
}
function PF(n) {
  return new ha(n);
}
function MF(n) {
  return new jy(n);
}
function XF(n) {
  return new da(n);
}
function _F(n) {
  return new Jy(n);
}
function KF(n) {
  return new Qy(n);
}
function ZF(n) {
  return new qy(n);
}
function BF(n) {
  return new tb(n);
}
function HF(n) {
  return new eb(n);
}
function UF(n) {
  return new cb(n);
}
function YF(n) {
  return new ab(n);
}
function jF(n) {
  return new bp(n);
}
function JF(n) {
  return new ib(n);
}
function QF(n) {
  return new lb(n);
}
function qF(n) {
  return new ub(n);
}
function tO(n) {
  return new hb(n);
}
function eO(n) {
  return new db(n);
}
function nO(n) {
  return new fb(n);
}
function sO(n) {
  return new mb(n);
}
function rO(n) {
  return new yb(n);
}
function oO(n) {
  return new wb(n);
}
function iO(n) {
  return new bb(n);
}
function aO(n) {
  return new xb(n);
}
function lO(n) {
  return new gb(n);
}
function cO(n) {
  return new Ib(n);
}
function uO(n) {
  return new kb(n);
}
function hO(n) {
  return new Nb(n);
}
function dO(n) {
  return new Tb(n);
}
function Mb(n) {
  return new Rb(n);
}
function pO(n) {
  return Mb(n);
}
function fO(n) {
  return Mb(n);
}
function Xb(n) {
  return new Lb(n);
}
function mO(n) {
  return Xb(n);
}
function gO(n) {
  return Xb(n);
}
function _b(n) {
  return new Gb(n);
}
function yO(n) {
  return _b(n);
}
function bO(n) {
  return _b(n);
}
function xO(n) {
  return new Fb(n);
}
function wO(n) {
  return new Ab(n);
}
function IS(n) {
  return new Ob(n);
}
function SS(n) {
  return new zb(n);
}
function vS(n) {
  return new $b(n);
}
function CS(n) {
  return new Eb(n);
}
function IO(n) {
  return new Db(n);
}
function SO(n) {
  return new sb(n);
}
function vO(n) {
  return new mp(n);
}
function CO(n) {
  return new rb(n);
}
function kO(n) {
  return new zc(n);
}
function NO(n) {
  return new nb(n);
}
function TO(n) {
  return new fp(n);
}
function $O(n) {
  return new ob(n);
}
function RO(n) {
  return new yp(n);
}
function EO(n) {
  return new ks(n);
}
function LO(n) {
  return new gp(n);
}
function DO(n) {
  return new Vb(n);
}
function GO(n) {
  return new Wb(n);
}
const FO = IS, OO = SS, AO = vS, zO = CS;
function WO(n) {
  return new Sb(n);
}
function VO(n) {
  return new vb(n);
}
function PO(n) {
  return new Cb(n);
}
function MO(n) {
  return new pb(n);
}
function XO(n) {
  return new Pb(n);
}
const _O = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  inputLayer: DF,
  elu: GF,
  reLU: FF,
  leakyReLU: OF,
  prelu: AF,
  softmax: zF,
  thresholdedReLU: WF,
  conv1d: VF,
  conv2d: PF,
  conv2dTranspose: MF,
  conv3d: XF,
  conv3dTranspose: _F,
  separableConv2d: KF,
  cropping2D: ZF,
  upSampling2d: BF,
  depthwiseConv2d: HF,
  activation: UF,
  dense: YF,
  dropout: jF,
  spatialDropout1d: JF,
  flatten: QF,
  repeatVector: qF,
  reshape: tO,
  permute: eO,
  embedding: nO,
  add: sO,
  average: rO,
  concatenate: oO,
  maximum: iO,
  minimum: aO,
  multiply: lO,
  dot: cO,
  batchNormalization: uO,
  layerNormalization: hO,
  zeroPadding2d: dO,
  averagePooling1d: Mb,
  avgPool1d: pO,
  avgPooling1d: fO,
  averagePooling2d: Xb,
  avgPool2d: mO,
  avgPooling2d: gO,
  averagePooling3d: _b,
  avgPool3d: yO,
  avgPooling3d: bO,
  globalAveragePooling1d: xO,
  globalAveragePooling2d: wO,
  globalMaxPooling1d: IS,
  globalMaxPooling2d: SS,
  maxPooling1d: vS,
  maxPooling2d: CS,
  maxPooling3d: IO,
  gru: SO,
  gruCell: vO,
  lstm: CO,
  lstmCell: kO,
  simpleRNN: NO,
  simpleRNNCell: TO,
  convLstm2d: $O,
  convLstm2dCell: RO,
  rnn: EO,
  stackedRNNCells: LO,
  bidirectional: DO,
  timeDistributed: GO,
  globalMaxPool1d: FO,
  globalMaxPool2d: OO,
  maxPool1d: AO,
  maxPool2d: zO,
  Layer: _t,
  RNN: ks,
  RNNCell: Ac,
  input: UI,
  gaussianNoise: WO,
  gaussianDropout: VO,
  alphaDropout: PO,
  masking: MO,
  rescaling: XO
}, Symbol.toStringTag, { value: "Module" }));
function KO(n, t) {
  return zy(n, t);
}
function ZO(n, t) {
  return VI(n, t);
}
function BO(n, t) {
  return PI(n, t);
}
function HO(n, t) {
  return Wy(n, t);
}
function UO(n, t) {
  return Vy(n, t);
}
function YO(n, t) {
  return WI(n, t);
}
function jO(n, t) {
  return OG(n, t);
}
function JO(n, t) {
  return Ay(n, t);
}
function QO(n, t) {
  return up(n, t);
}
function qO(n, t) {
  return ca(n, t);
}
function tA(n, t) {
  return ca(n, t);
}
function eA(n, t) {
  return ca(n, t);
}
function nA(n, t) {
  return vo(n, t);
}
function sA(n, t) {
  return vo(n, t);
}
function rA(n, t) {
  return vo(n, t);
}
const oA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  binaryAccuracy: KO,
  binaryCrossentropy: ZO,
  sparseCategoricalAccuracy: BO,
  categoricalAccuracy: HO,
  categoricalCrossentropy: UO,
  precision: YO,
  recall: jO,
  cosineProximity: JO,
  meanAbsoluteError: QO,
  meanAbsolutePercentageError: qO,
  MAPE: tA,
  mape: eA,
  meanSquaredError: nA,
  MSE: sA,
  mse: rA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const iA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  modelFromJSON: hF
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function aA(n) {
  return new Fc(n);
}
function lA(n) {
  return xF(n);
}
function cA(n) {
  return wF(n);
}
const uA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  l1l2: aA,
  l1: lA,
  l2: cA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class kS extends Ho {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(t) {
    if (!(t instanceof Bs))
      throw new Error("model must be a LayersModel, not some other Container");
    this.model = t;
  }
}
function qc(n, t) {
  return n < t;
}
function ex(n, t) {
  return n > t;
}
class NS extends kS {
  constructor(t) {
    if (super(), t == null && (t = {}), t.restoreBestWeights)
      throw new Gt("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = t.monitor || "val_loss", this.minDelta = Math.abs(t.minDelta || 0), this.patience = t.patience || 0, this.verbose = t.verbose || 0, this.mode = t.mode || "auto", this.baseline = t.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = qc : this.mode === "max" ? this.monitorFunc = ex : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = ex : this.monitorFunc = qc, this.monitorFunc === qc && (this.minDelta *= -1);
  }
  async onTrainBegin(t) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === qc ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(t, e) {
    await hr(e);
    const s = this.getMonitorValue(e);
    s != null && (this.monitorFunc(s - this.minDelta, this.best) ? (this.best = s, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = t, this.model.stopTraining = !0)));
  }
  async onTrainEnd(t) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(t) {
    t == null && (t = {});
    const e = t[this.monitor];
    return e == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(t)}`), e;
  }
}
function hA(n) {
  return new NS(n);
}
const dA = { earlyStopping: hA };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pA = K();
pA.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var Jn;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(Jn || (Jn = {}));
var nx;
(function(n) {
  (function(t) {
    t[t.LEGACY = 0] = "LEGACY", t[t.V1 = 1] = "V1", t[t.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(nx || (nx = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kb = {};
function fA(n, t) {
  const e = {
    tfOpName: n,
    category: "custom",
    inputs: [],
    attrs: [],
    customExecutor: t
  };
  Kb[n] = e;
}
function TS(n) {
  return Kb[n];
}
function mA(n) {
  delete Kb[n];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I(n, t, e, s, r) {
  const o = t.inputParams[n];
  if (o && o.inputIndexStart !== void 0) {
    const a = o.inputIndexStart, l = o.inputIndexEnd === 0 ? void 0 : o.inputIndexEnd === void 0 ? a + 1 : o.inputIndexEnd;
    if (o.type === "tensor")
      return on(t.inputNames[o.inputIndexStart], e, s, r);
    if (o.type === "tensors")
      return t.inputNames.slice(a, l).map((d) => on(d, e, s, r));
    const c = on(t.inputNames.slice(a)[0], e, s, r), u = c.dataSync();
    return o.type === "number" ? u[0] : _n(c.shape, u);
  }
  const i = t.attrParams[n];
  return i && i.value;
}
function on(n, t, e, s) {
  const [r, o] = Cn(n);
  if (s != null) {
    const a = s.getHashTableHandleByName(r);
    if (a != null)
      return a;
  }
  const i = e.currentContextIds.find((a) => !!t[Vu(r, a)]);
  return i !== void 0 ? t[Vu(r, i)][o] : void 0;
}
function gA(n, t, e) {
  return t[Vu(n, e.currentContextId)];
}
function Es(n, t) {
  const [e, s, r] = Cn(n);
  return [
    Vu(e, t && t.currentContextId),
    s,
    r
  ];
}
function Vu(n, t) {
  return t ? `${n}-${t}` : n;
}
function Cn(n) {
  const t = n.split(":");
  if (t.length === 1)
    return [n, 0, void 0];
  const e = t[0], s = t.length === 3 ? t[1] : void 0, r = Number(t[t.length - 1]);
  return [e, r, s];
}
function mu(n, t, e) {
  let s = I("pad", n, t, e);
  if (s === "explicit") {
    s = I("explicitPaddings", n, t, e);
    const r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let o = 0; o < 4; o++)
      r[o][0] = s[o * 2], r[o][1] = s[o * 2 + 1];
    return r;
  }
  return s;
}
function Xs(n) {
  return n.kept ? n : Ds(n);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yA = [
  {
    tfOpName: "Add",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddV2",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddN",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "BiasAdd",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sub",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RealDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Div",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DivNoNan",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mul",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Maximum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Minimum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Pow",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SquaredDifference",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorMod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], bA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: yA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xA = [
  {
    tfOpName: "Abs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan2",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Ceil",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ClipByValue",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "clipValueMin",
        type: "number"
      },
      {
        start: 2,
        name: "clipValueMax",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Complex",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "real",
        type: "tensor"
      },
      {
        start: 1,
        name: "imag",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ComplexAbs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Elu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Exp",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Floor",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Imag",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Neg",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Real",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "alpha",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu6",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Selu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sigmoid",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Rsqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Square",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sign",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Round",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Expm1",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log1p",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reciprocal",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Softplus",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Erf",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axes",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LeakyRelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsNan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], wA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: xA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IA = [
  {
    tfOpName: "EmptyTensorList",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "maxNumElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LoopCond",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Switch",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Merge",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Enter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "frame_name",
        name: "frameName",
        type: "string"
      },
      {
        tfName: "is_constant",
        name: "isConstant",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Exit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NextIteration",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "size",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "dynamic_size",
        name: "dynamicSize",
        type: "bool"
      },
      {
        tfName: "clear_after_read",
        name: "clearAfterRead",
        type: "bool"
      },
      {
        tfName: "identical_element_shapes",
        name: "identicalElementShapes",
        type: "bool"
      },
      {
        tfName: "tensor_array_name",
        name: "name",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "TensorArrayWriteV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayReadV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayGatherV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      }
    ]
  },
  {
    tfOpName: "TensorArrayScatterV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArrayConcatV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape_except0",
        name: "elementShapeExcept0",
        type: "shape",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArraySplitV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArraySizeV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "TensorArrayCloseV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "StatelessIf",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "If",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "StatelessWhile",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "While",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "TensorListScatter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListScatterV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 3,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGather",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListReserve",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListFromTensor",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListStack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      },
      {
        tfName: "num_elements",
        name: "numElements",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSplit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcat",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcatV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPopBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPushBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListLength",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TensorListResize",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      }
    ]
  }
], SA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: IA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vA = [
  {
    tfOpName: "AvgPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: [],
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPoolWithArgmax",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "include_batch_in_index",
        name: "includeBatchInIndex",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AvgPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Conv1D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "stride",
        name: "stride",
        type: "number"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NWC"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "dilation",
        name: "dilation",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "Conv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "useCudnnOnGpu",
        name: "useCudnnOnGpu",
        type: "bool"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "_FusedConv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "use_cudnn_on_gpu",
        name: "useCudnnOnGpu",
        type: "bool",
        defaultValue: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      }
    ]
  },
  {
    tfOpName: "Conv2DBackpropInput",
    category: "convolution",
    inputs: [
      {
        start: 2,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 0,
        name: "outputShape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2d",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "FusedDepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      }
    ]
  },
  {
    tfOpName: "Conv3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Dilation2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "rates",
        name: "dilations",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      }
    ]
  }
], CA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: vA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kA = [
  {
    tfOpName: "Fill",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      },
      {
        start: 1,
        name: "value",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LinSpace",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "num",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "OneHot",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "depth",
        type: "number"
      },
      {
        start: 2,
        name: "onValue",
        type: "number",
        defaultValue: 1
      },
      {
        start: 3,
        name: "offValue",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Ones",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "OnesLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "RandomStandardNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RandomUniform",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "minval",
        name: "minval",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "maxval",
        name: "maxval",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Range",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "step",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "Tidx",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TruncatedNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "means",
        name: "mean",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "stddev",
        name: "stdDev",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Zeros",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ZerosLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Multinomial",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "logits",
        type: "tensor"
      },
      {
        start: 1,
        name: "numSamples",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "output_dtype",
        name: "output_dtype",
        type: "dtype"
      }
    ]
  }
], NA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: kA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TA = [
  {
    tfOpName: "NonMaxSuppressionV2",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV3",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV4",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "T_threshold",
        name: "threshold",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "pad_to_max_output_size",
        name: "padToMaxOutputSize",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV5",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      },
      {
        start: 5,
        name: "softNmsSigma",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Where",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ListDiff",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], $A = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: TA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RA = [
  {
    tfOpName: "LowerBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TopKV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "k",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "sorted",
        name: "sorted",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "UpperBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Unique",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "UniqueV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  }
], EA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: RA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LA = [
  {
    tfOpName: "PlaceholderWithDefault",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "default",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Placeholder",
    category: "graph",
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Const",
    category: "graph"
  },
  {
    tfOpName: "Identity",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IdentityN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Snapshot",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Rank",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Size",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Shape",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "ShapeN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Print",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "data",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "message",
        name: "message",
        type: "string"
      },
      {
        tfName: "first_n",
        name: "firstN",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "summarize",
        name: "summarize",
        type: "number",
        defaultValue: 3
      }
    ]
  },
  {
    tfOpName: "NoOp",
    category: "graph",
    inputs: []
  },
  {
    tfOpName: "StopGradient",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "FakeQuantWithMinMaxVars",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "min",
        name: "min",
        type: "number"
      },
      {
        tfName: "max",
        name: "max",
        type: "number"
      }
    ]
  }
], DA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: LA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GA = [
  {
    tfOpName: "HashTable",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "HashTableV2",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LookupTableImport",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableImportV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFind",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFindV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableSize",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LookupTableSizeV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  }
], FA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: GA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OA = [
  {
    tfOpName: "ResizeBilinear",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ResizeNearestNeighbor",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "CropAndResize",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "image",
        type: "tensor"
      },
      {
        start: 1,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 2,
        name: "boxInd",
        type: "tensor"
      },
      {
        start: 3,
        name: "cropSize",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "method",
        name: "method",
        type: "string"
      },
      {
        tfName: "extrapolation_value",
        name: "extrapolationValue",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ImageProjectiveTransformV3",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "transforms",
        type: "tensor"
      },
      {
        start: 2,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 3,
        name: "fillValue",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "interpolation",
        name: "interpolation",
        type: "string"
      },
      {
        tfName: "fill_mode",
        name: "fillMode",
        type: "string"
      }
    ]
  }
], AA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: OA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zA = [
  {
    tfOpName: "Equal",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NotEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Greater",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "GreaterEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Less",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LessEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalAnd",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalNot",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalOr",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Select",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SelectV2",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], WA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: zA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VA = [
  {
    tfOpName: "_FusedMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMulV2",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Transpose",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "perm",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Einsum",
    category: "matrices",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "equation",
        name: "equation",
        type: "string"
      },
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  }
], PA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: VA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MA = [
  {
    tfOpName: "EuclideanNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        defaultValue: !1
      }
    ]
  },
  {
    tfOpName: "FusedBatchNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV2",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV3",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LRN",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "depth_radius",
        name: "radius",
        type: "number",
        defaultValue: 5
      },
      {
        tfName: "bias",
        name: "bias",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "beta",
        name: "beta",
        type: "number",
        defaultValue: 0.5
      }
    ]
  },
  {
    tfOpName: "Softmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LogSoftmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !0,
        notSupported: !0
      }
    ]
  }
], XA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: MA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _A = [
  {
    tfOpName: "Bincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "DenseBincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "binary_output",
        name: "binaryOutput",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Max",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Mean",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Min",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Sum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "All",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Any",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "ArgMax",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ArgMin",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumprod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumsum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  }
], KA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: _A
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZA = [
  {
    tfOpName: "ConcatV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: -1,
        name: "tensors",
        type: "tensors"
      },
      {
        start: -1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "Concat",
    category: "slice_join",
    inputs: [
      {
        start: 1,
        end: 0,
        name: "tensors",
        type: "tensors"
      },
      {
        start: 0,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "GatherV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "batch_dims",
        name: "batchDims",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Gather",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reverse",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "dims",
        type: "bool[]"
      }
    ]
  },
  {
    tfOpName: "ReverseV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Slice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "size",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "StridedSlice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "end",
        type: "number[]"
      },
      {
        start: 3,
        name: "strides",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "begin_mask",
        name: "beginMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "end_mask",
        name: "endMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "new_axis_mask",
        name: "newAxisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "ellipsis_mask",
        name: "ellipsisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "shrink_axis_mask",
        name: "shrinkAxisMask",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Pack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Unpack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "num",
        name: "num",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tile",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "reps",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Split",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        start: 1,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_split",
        name: "numOrSizeSplits",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "SplitV",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "numOrSizeSplits",
        type: "number[]"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "ScatterNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "GatherNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !1,
        notSupported: !0
      }
    ]
  }
], BA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: ZA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HA = [
  {
    tfOpName: "SparseFillEmptyRows",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "denseShape",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseReshape",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "inputIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "inputShape",
        type: "tensor"
      },
      {
        start: 2,
        name: "newShape",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SparseSegmentMean",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseSegmentSum",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  }
], UA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: HA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YA = [
  {
    tfOpName: "FFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "RFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IRFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  }
], jA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: YA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JA = [
  {
    tfOpName: "StringNGrams",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "dataSplits",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "separator",
        name: "separator",
        type: "string"
      },
      {
        tfName: "ngram_widths",
        name: "nGramWidths",
        type: "number[]"
      },
      {
        tfName: "left_pad",
        name: "leftPad",
        type: "string"
      },
      {
        tfName: "right_pad",
        name: "rightPad",
        type: "string"
      },
      {
        tfName: "pad_width",
        name: "padWidth",
        type: "number"
      },
      {
        tfName: "preserve_short_sequences",
        name: "preserveShortSequences",
        type: "bool"
      }
    ],
    outputs: [
      "ngrams",
      "ngrams_splits"
    ]
  },
  {
    tfOpName: "StringSplit",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "delimiter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "skip_empty",
        name: "skipEmpty",
        type: "bool"
      }
    ],
    outputs: [
      "indices",
      "values",
      "shape"
    ]
  },
  {
    tfOpName: "StringToHashBucketFast",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_buckets",
        name: "numBuckets",
        type: "number"
      }
    ]
  }
], QA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: JA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qA = [
  {
    tfOpName: "Cast",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "SrcT",
        name: "sdtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "DstT",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ExpandDims",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "MirrorPad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "mode",
        name: "mode",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "Pad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "constant_value",
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "PadV2",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      },
      {
        start: 2,
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Reshape",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Squeeze",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        tfDeprecatedName: "squeeze_dims",
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "SpaceToBatchND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "paddings",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "BatchToSpaceND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "crops",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthToSpace",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "block_size",
        name: "blockSize",
        type: "number"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "BroadcastTo",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: []
  },
  {
    tfOpName: "BroadcastArgs",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "s0",
        type: "tensor"
      },
      {
        start: 1,
        name: "s1",
        type: "tensor"
      }
    ],
    attrs: []
  }
], tz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: qA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sx {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    const t = [
      bA,
      wA,
      SA,
      CA,
      NA,
      $A,
      EA,
      DA,
      FA,
      AA,
      WA,
      PA,
      XA,
      KA,
      BA,
      UA,
      jA,
      QA,
      tz
    ], e = [].concat(...t.map((s) => s.json));
    this.opMappers = e.reduce((s, r) => (s[r.tfOpName] = r, s), {});
  }
  transformGraph(t, e = {}) {
    const s = t.node, r = [], o = [], i = [], a = s.reduce((m, g) => (m[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? r.push(m[g.name]) : g.op === "Const" ? o.push(m[g.name]) : (g.input == null || g.input.length === 0) && i.push(m[g.name]), m), {});
    let l = [];
    const c = [];
    let u = {}, h = {};
    e != null && (u = this.mapSignatureEntries(e.inputs), h = this.mapSignatureEntries(e.outputs));
    const d = Object.keys(a);
    d.forEach((m) => {
      const g = a[m];
      g.inputNames.forEach((y, b) => {
        const [w, , x] = Es(y), S = a[w];
        if (S.outputs != null) {
          const v = S.outputs.indexOf(x);
          if (v !== -1) {
            const T = `${w}:${v}`;
            g.inputNames[b] = T;
          }
        }
        g.inputs.push(S), S.children.push(g);
      });
    }), Object.keys(h).length === 0 ? d.forEach((m) => {
      const g = a[m];
      g.children.length === 0 && c.push(g);
    }) : Object.keys(h).forEach((m) => {
      const [g] = Es(m), y = a[g];
      y != null && (y.signatureKey = h[m], c.push(y));
    }), Object.keys(u).length > 0 ? Object.keys(u).forEach((m) => {
      const [g] = Es(m), y = a[g];
      y && (y.signatureKey = u[m], l.push(y));
    }) : l = r;
    let p = {};
    t.library != null && t.library.function != null && (p = t.library.function.reduce((m, g) => (m[g.signature.name] = this.mapFunction(g), m), {}));
    const f = { nodes: a, inputs: l, outputs: c, weights: o, placeholders: r, signature: e, functions: p };
    return i.length > 0 && (f.initNodes = i), f;
  }
  mapSignatureEntries(t) {
    return Object.keys(t || {}).reduce((e, s) => (e[t[s].name] = s, e), {});
  }
  mapNode(t) {
    const e = TS(t.op) || this.opMappers[t.op] || {};
    t.attr == null && (t.attr = {});
    const s = {
      name: t.name,
      op: t.op,
      category: e.category,
      inputNames: (t.input || []).map((r) => r.startsWith("^") ? r.slice(1) : r),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: t.attr,
      outputs: e.outputs
    };
    return e.inputs != null && (s.inputParams = e.inputs.reduce((r, o) => (r[o.name] = {
      type: o.type,
      inputIndexStart: o.start,
      inputIndexEnd: o.end
    }, r), {})), e.attrs != null && (s.attrParams = e.attrs.reduce((r, o) => {
      const i = o.type;
      let a;
      switch (o.type) {
        case "string":
          a = Vf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Vf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "string[]":
          a = Bf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Bf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number":
          a = Mf(t.attr, o.tfName, o.defaultValue || 0), a === void 0 && !!o.tfDeprecatedName && (a = Mf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number[]":
          a = Zf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Zf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool":
          a = Pf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Pf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool[]":
          a = Uf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Uf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape":
          a = Kf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Kf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape[]":
          a = Hf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Hf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype":
          a = Xf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Xf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype[]":
          a = _f(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = _f(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "func":
          a = rx(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = rx(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`);
      }
      return r[o.name] = { value: a, type: i }, r;
    }, {})), s;
  }
  mapFunction(t) {
    const e = t.nodeDef, s = [], r = [];
    let o = {};
    e != null && (o = e.reduce((h, d) => (h[d.name] = this.mapNode(d), d.op === "Const" && r.push(h[d.name]), h), {}));
    const i = [], a = [];
    t.signature.inputArg.forEach((h) => {
      const [d] = Es(h.name), p = {
        name: d,
        op: "Placeholder",
        inputs: [],
        inputNames: [],
        category: "graph",
        inputParams: {},
        attrParams: { dtype: { value: Zb(h.type), type: "dtype" } },
        children: []
      };
      p.signatureKey = h.name, i.push(p), o[d] = p;
    }), Object.keys(o).forEach((h) => {
      const d = o[h];
      d.inputNames.forEach((p, f) => {
        const [m, , g] = Es(p), y = o[m];
        if (y.outputs != null) {
          const b = y.outputs.indexOf(g);
          if (b !== -1) {
            const w = `${m}:${b}`;
            d.inputNames[f] = w;
          }
        }
        d.inputs.push(y), y.children.push(d);
      });
    });
    const c = t.ret;
    t.signature.outputArg.forEach((h) => {
      const [d, p] = Es(c[h.name]), f = o[d];
      f != null && (f.defaultOutput = p, a.push(f));
    });
    const u = this.mapArgsToSignature(t);
    return { nodes: o, inputs: i, outputs: a, weights: r, placeholders: s, signature: u };
  }
  mapArgsToSignature(t) {
    return {
      methodName: t.signature.name,
      inputs: t.signature.inputArg.reduce((e, s) => (e[s.name] = this.mapArgToTensorInfo(s), e), {}),
      outputs: t.signature.outputArg.reduce((e, s) => (e[s.name] = this.mapArgToTensorInfo(s, t.ret), e), {})
    };
  }
  mapArgToTensorInfo(t, e) {
    let s = t.name;
    return e != null && (s = e[s]), { name: s, dtype: t.type };
  }
}
function ez(n) {
  const t = K().global;
  if (typeof t.atob < "u")
    return t.atob(n);
  if (typeof Buffer < "u")
    return new Buffer(n, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function $S(n, t) {
  const e = Array.isArray(n) ? String.fromCharCode.apply(null, n) : ez(n);
  return t ? e : e.toLowerCase();
}
function Vf(n, t, e, s = !1) {
  const r = n[t];
  return r != null ? $S(r.s, s) : e;
}
function Pf(n, t, e) {
  const s = n[t];
  return s ? s.b : e;
}
function Mf(n, t, e) {
  const s = n[t] || {}, r = s.i != null ? s.i : s.f != null ? s.f : e;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function Zb(n) {
  switch (typeof n == "string" && (n = Jn[n]), n) {
    case Jn.DT_FLOAT:
    case Jn.DT_HALF:
      return "float32";
    case Jn.DT_INT32:
    case Jn.DT_INT64:
    case Jn.DT_INT8:
    case Jn.DT_UINT8:
      return "int32";
    case Jn.DT_BOOL:
      return "bool";
    case Jn.DT_DOUBLE:
      return "float32";
    case Jn.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function rx(n, t, e) {
  const s = n[t];
  return s && s.func ? s.func.name : e;
}
function Xf(n, t, e) {
  const s = n[t];
  return s && s.type ? Zb(s.type) : e;
}
function _f(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.type ? s.list.type.map((r) => Zb(r)) : e;
}
function RS(n) {
  if (!n.unknownRank)
    return n.dim != null ? n.dim.map((t) => typeof t.size == "number" ? t.size : parseInt(t.size, 10)) : [];
}
function Kf(n, t, e) {
  const s = n[t];
  return s && s.shape ? RS(s.shape) : e;
}
function Zf(n, t, e) {
  const s = n[t];
  return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : e;
}
function Bf(n, t, e, s = !1) {
  const r = n[t];
  return r && r.list && r.list.s ? r.list.s.map((o) => $S(o, s)) : e;
}
function Hf(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.shape ? s.list.shape.map((r) => RS(r)) : e;
}
function Uf(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.b ? s.list.b : e;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nz {
  constructor(t, e, s) {
    this.node = t, this.tensorMap = e, this.context = s, this.inputs = [], this.attrs = {}, this.inputs = t.inputNames.map((r) => this.getInput(r)), t.rawAttrs != null && (this.attrs = Object.keys(t.rawAttrs).reduce((r, o) => (r[o] = this.getAttr(o), r), {}));
  }
  getInput(t) {
    return on(t, this.tensorMap, this.context);
  }
  getAttr(t, e) {
    const s = this.node.rawAttrs[t];
    if (s.tensor != null)
      return on(t, this.tensorMap, this.context);
    if (s.i != null || s.f != null)
      return Mf(this.node.rawAttrs, t, e);
    if (s.s != null)
      return Vf(this.node.rawAttrs, t, e);
    if (s.b != null)
      return Pf(this.node.rawAttrs, t, e);
    if (s.shape != null)
      return Kf(this.node.rawAttrs, t, e);
    if (s.type != null)
      return Xf(this.node.rawAttrs, t, e);
    if (s.list != null) {
      if (s.list.i != null || s.list.f != null)
        return Zf(this.node.rawAttrs, t, e);
      if (s.list.s != null)
        return Bf(this.node.rawAttrs, t, e);
      if (s.list.shape != null)
        return Hf(this.node.rawAttrs, t, e);
      if (s.list.b != null)
        return Uf(this.node.rawAttrs, t, e);
      if (s.list.type != null)
        return _f(this.node.rawAttrs, t, e);
    }
    return e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const en = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  abs: $e,
  acos: zm,
  acosh: Wm,
  add: nt,
  addN: tw,
  all: hd,
  any: Ba,
  argMax: ro,
  argMin: Vm,
  asin: Pm,
  asinh: Mm,
  atan: Xm,
  atan2: _m,
  atanh: Km,
  avgPool: lc,
  avgPool3d: Bm,
  basicLSTMCell: ew,
  batchToSpaceND: cc,
  batchNorm: Qi,
  batchNorm2d: Hm,
  batchNorm3d: Um,
  batchNorm4d: Ym,
  bincount: jm,
  broadcastArgs: nw,
  broadcastTo: gr,
  buffer: $t,
  cast: ut,
  ceil: Jm,
  clipByValue: gn,
  clone: Ds,
  complex: js,
  concat: Ce,
  concat1d: Qm,
  concat2d: qm,
  concat3d: tg,
  concat4d: eg,
  conv1d: dd,
  conv2d: Qs,
  conv2dTranspose: pd,
  conv3d: sg,
  conv3dTranspose: rg,
  cos: uc,
  cosh: fd,
  cumprod: Ha,
  cumsum: md,
  denseBincount: rw,
  depthToSpace: og,
  depthwiseConv2d: qi,
  diag: ow,
  dilation2d: ig,
  div: St,
  divNoNan: ag,
  dot: lg,
  einsum: iw,
  elu: ta,
  equal: Ln,
  erf: cg,
  euclideanNorm: hg,
  exp: Dn,
  expandDims: pn,
  expm1: dg,
  eye: gd,
  fill: bo,
  floor: na,
  floorDiv: ud,
  gather: sa,
  greater: In,
  greaterEqual: Gr,
  imag: ic,
  isFinite: pg,
  isInf: fg,
  isNaN: mg,
  leakyRelu: hc,
  less: yd,
  lessEqual: Fr,
  linspace: cw,
  localResponseNormalization: gg,
  log: Gn,
  log1p: dc,
  logSigmoid: yg,
  logSoftmax: xd,
  logSumExp: wd,
  logicalAnd: is,
  logicalNot: pc,
  logicalOr: Id,
  logicalXor: bg,
  lowerBound: hw,
  matMul: zt,
  max: os,
  maxPool: fc,
  maxPool3d: xg,
  maxPoolWithArgmax: dw,
  maximum: Ps,
  mean: ye,
  meshgrid: pw,
  min: Ua,
  minimum: ra,
  mirrorPad: wg,
  mod: Ig,
  moments: mc,
  mul: A,
  multiRNNCell: fw,
  multinomial: mw,
  neg: ce,
  notEqual: io,
  oneHot: Mo,
  ones: $n,
  onesLike: Fn,
  outerProduct: gw,
  pad: ir,
  pad1d: yw,
  pad2d: bw,
  pad3d: xw,
  pad4d: ww,
  pool: Sg,
  pow: qs,
  prelu: yc,
  print: vm,
  prod: vg,
  raggedGather: Iw,
  raggedTensorToTensor: Sw,
  rand: vw,
  randomGamma: Lw,
  randomNormal: vd,
  randomStandardNormal: Dw,
  randomUniform: ia,
  range: _o,
  real: Xo,
  reciprocal: kg,
  relu: vs,
  relu6: Cd,
  reshape: W,
  reverse: Zn,
  reverse1d: Gw,
  reverse2d: Fw,
  reverse3d: Ow,
  reverse4d: Aw,
  round: kd,
  rsqrt: Nd,
  scalar: Nt,
  selu: Td,
  separableConv2d: $d,
  setdiff1dAsync: zw,
  sigmoid: gs,
  sign: Ng,
  sin: Rd,
  sinh: Ed,
  slice: Mt,
  slice1d: bc,
  slice2d: Ld,
  slice3d: xc,
  slice4d: Ko,
  softmax: wc,
  softplus: xo,
  spaceToBatchND: gc,
  fft: Ic,
  ifft: Zo,
  irfft: Dd,
  rfft: Sc,
  split: mn,
  sqrt: Ue,
  square: qt,
  squaredDifference: Gd,
  squeeze: Or,
  stack: yn,
  step: Io,
  stridedSlice: Tg,
  sub: mt,
  sum: yt,
  tan: $g,
  tanh: oo,
  tensor: ge,
  tensor1d: qe,
  tensor2d: yr,
  tensor3d: $m,
  tensor4d: Ww,
  tensor5d: Vw,
  tensor6d: Pw,
  tile: Mn,
  topk: Rg,
  truncatedNormal: Fd,
  unique: Eg,
  unsortedSegmentSum: Od,
  unstack: as,
  upperBound: Mw,
  variable: Lg,
  where: tn,
  whereAsync: Dg,
  zeros: Re,
  zerosLike: Xt,
  op: G,
  OP_SCOPE_SUFFIX: ym,
  booleanMaskAsync: Xw,
  transpose: Wt,
  norm: ea,
  movingAverage: _w,
  scatterND: Kw,
  searchSorted: Sd,
  sparseToDense: Zw,
  gatherND: Bw,
  dropout: Gg,
  enclosingPowerOfTwo: Fg,
  cosineWindow: zd,
  inTopKAsync: Hw,
  image: Hr,
  linalg: zg,
  losses: rI,
  spectral: nI,
  fused: Jw,
  signal: sI,
  sparse: oI,
  string: iI
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sz = (n, t, e, s = en) => {
  switch (n.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [s.add(I("a", n, t, e), I("b", n, t, e))];
    case "AddN":
      return [s.addN(I("tensors", n, t, e))];
    case "FloorMod":
    case "Mod":
      return [s.mod(I("a", n, t, e), I("b", n, t, e))];
    case "Mul":
      return [s.mul(I("a", n, t, e), I("b", n, t, e))];
    case "RealDiv":
    case "Div":
      return [s.div(I("a", n, t, e), I("b", n, t, e))];
    case "DivNoNan":
      return [s.divNoNan(I("a", n, t, e), I("b", n, t, e))];
    case "FloorDiv":
      return [s.floorDiv(I("a", n, t, e), I("b", n, t, e))];
    case "Sub":
      return [s.sub(I("a", n, t, e), I("b", n, t, e))];
    case "Minimum":
      return [s.minimum(I("a", n, t, e), I("b", n, t, e))];
    case "Maximum":
      return [s.maximum(I("a", n, t, e), I("b", n, t, e))];
    case "Pow":
      return [s.pow(I("a", n, t, e), I("b", n, t, e))];
    case "SquaredDifference":
      return [s.squaredDifference(I("a", n, t, e), I("b", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Abs":
    case "ComplexAbs":
      return [s.abs(I("x", n, t, e))];
    case "Acos":
      return [s.acos(I("x", n, t, e))];
    case "Acosh":
      return [s.acosh(I("x", n, t, e))];
    case "Asin":
      return [s.asin(I("x", n, t, e))];
    case "Asinh":
      return [s.asinh(I("x", n, t, e))];
    case "Atan":
      return [s.atan(I("x", n, t, e))];
    case "Atan2":
      return [s.atan2(I("x", n, t, e), I("y", n, t, e))];
    case "Atanh":
      return [s.atanh(I("x", n, t, e))];
    case "Ceil":
      return [s.ceil(I("x", n, t, e))];
    case "Complex":
      return [s.complex(I("real", n, t, e), I("imag", n, t, e))];
    case "Cos":
      return [s.cos(I("x", n, t, e))];
    case "Cosh":
      return [s.cosh(I("x", n, t, e))];
    case "Elu":
      return [s.elu(I("x", n, t, e))];
    case "Erf":
      return [s.erf(I("x", n, t, e))];
    case "Exp":
      return [s.exp(I("x", n, t, e))];
    case "Expm1":
      return [s.expm1(I("x", n, t, e))];
    case "Floor":
      return [s.floor(I("x", n, t, e))];
    case "Log":
      return [s.log(I("x", n, t, e))];
    case "Log1p":
      return [s.log1p(I("x", n, t, e))];
    case "Imag":
      return [s.imag(I("x", n, t, e))];
    case "Neg":
      return [s.neg(I("x", n, t, e))];
    case "Reciprocal":
      return [s.reciprocal(I("x", n, t, e))];
    case "Real":
      return [s.real(I("x", n, t, e))];
    case "Relu":
      return [s.relu(I("x", n, t, e))];
    case "Round":
      return [s.round(I("x", n, t, e))];
    case "Selu":
      return [s.selu(I("x", n, t, e))];
    case "Sigmoid":
      return [s.sigmoid(I("x", n, t, e))];
    case "Sin":
      return [s.sin(I("x", n, t, e))];
    case "Sign":
      return [s.sign(I("x", n, t, e))];
    case "Sinh":
      return [s.sinh(I("x", n, t, e))];
    case "Softplus":
      return [s.softplus(I("x", n, t, e))];
    case "Sqrt":
      return [s.sqrt(I("x", n, t, e))];
    case "Square":
      return [s.square(I("x", n, t, e))];
    case "Tanh":
      return [s.tanh(I("x", n, t, e))];
    case "Tan":
      return [s.tan(I("x", n, t, e))];
    case "ClipByValue":
      return [s.clipByValue(I("x", n, t, e), I("clipValueMin", n, t, e), I("clipValueMax", n, t, e))];
    case "Relu6":
      return [s.relu6(I("x", n, t, e))];
    case "Rsqrt":
      return [s.rsqrt(on(n.inputNames[0], t, e))];
    case "Prod":
      return [s.prod(I("x", n, t, e), I("axes", n, t, e))];
    case "LeakyRelu":
      return [s.leakyRelu(I("x", n, t, e), I("alpha", n, t, e))];
    case "Prelu":
      return [s.prelu(I("x", n, t, e), I("alpha", n, t, e))];
    case "IsNan":
      return [s.isNaN(on(n.inputNames[0], t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qn(n, t, e = "") {
  if (!(typeof n == "number" || typeof t == "number")) {
    k(n.length === t.length, () => e + ` Shapes ${n} and ${t} must match`);
    for (let s = 0; s < n.length; s++) {
      const r = n[s], o = t[s];
      k(r < 0 || o < 0 || r === o, () => e + ` Shapes ${n} and ${t} must match`);
    }
  }
}
function ox(n) {
  return !(typeof n == "number" || n.some((t) => t < 0));
}
function ka(n, t, e) {
  let s = Yf(n, e);
  const r = !ox(s);
  if (r && t.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
  if (r && t.forEach((o) => {
    s = Yf(o.shape, s);
  }), !ox(s))
    throw new Error(`Non-fully-defined elementShape: ${s}`);
  return s;
}
function Yf(n, t) {
  if (typeof n == "number")
    return t;
  if (typeof t == "number")
    return n;
  if (n.length !== t.length)
    throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);
  const e = [];
  for (let s = 0; s < n.length; ++s) {
    const r = n[s], o = t[s];
    if (r >= 0 && o >= 0 && r !== o)
      throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);
    e[s] = r >= 0 ? r : o;
  }
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class oz {
  constructor(t, e, s, r, o, i, a) {
    this.name = t, this.dtype = e, this.maxSize = s, this.elementShape = r, this.identicalElementShapes = o, this.dynamicSize = i, this.clearAfterRead = a, this.tensors = [], this.closed_ = !1, this.idTensor = Nt(0), Se(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(t) {
    this.tensors.forEach((e) => {
      (t == null || !t.has(e.tensor.id)) && e.tensor.dispose();
    }), this.tensors = [], this.closed_ = !0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t < 0 || t >= this.size())
      throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);
    const e = this.tensors[t];
    if (e.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (e.cleared = !0), e.read = !0, e.tensor;
  }
  readMany(t) {
    return t.map((e) => this.read(e));
  }
  write(t, e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t < 0 || !this.dynamicSize && t >= this.maxSize)
      throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);
    const s = this.tensors[t] || {};
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = e.shape), Qn(this.elementShape, e.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${t}.`), s.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);
    if (s.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);
    s.tensor = e, Se(e), s.written = !0, this.tensors[t] = s;
  }
  writeMany(t, e) {
    if (t.length !== e.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);
    t.forEach((s, r) => this.write(s, e[r]));
  }
  gather(t, e) {
    if (!!e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);
    if (t)
      t = t.slice(0, this.size());
    else {
      t = [];
      for (let r = 0; r < this.size(); r++)
        t.push(r);
    }
    if (t.length === 0)
      return ge([], [0].concat(this.elementShape));
    const s = this.readMany(t);
    return Qn(this.elementShape, s[0].shape, "TensorArray shape mismatch: "), yn(s, 0);
  }
  concat(t) {
    if (!!t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);
    if (this.size() === 0)
      return ge([], [0].concat(this.elementShape));
    const e = [];
    for (let r = 0; r < this.size(); r++)
      e.push(r);
    const s = this.readMany(e);
    return Qn(this.elementShape, s[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`), Ce(s, 0);
  }
  scatter(t, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    if (t.length !== e.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);
    const s = Math.max(...t);
    if (!this.dynamicSize && s >= this.maxSize)
      throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);
    this.writeMany(t, as(e, 0));
  }
  split(t, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    let s = 0;
    const r = t.map((l) => (s += l, s));
    if (s !== e.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${e.shape}`);
    if (!this.dynamicSize && t.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);
    const o = s === 0 ? 0 : e.size / s, i = [];
    M(() => {
      e = W(e, [1, s, o]);
      for (let l = 0; l < t.length; ++l) {
        const u = [0, l === 0 ? 0 : r[l - 1], 0], h = [1, t[l], o];
        i[l] = W(Mt(e, u, h), this.elementShape);
      }
      return i;
    });
    const a = [];
    for (let l = 0; l < t.length; l++)
      a[l] = l;
    this.writeMany(a, i);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class co {
  constructor(t, e, s, r = -1) {
    this.tensors = t, this.elementShape = e, this.elementDtype = s, t != null && t.forEach((o) => {
      if (s !== o.dtype)
        throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);
      Qn(e, o.shape, "TensorList shape mismatch: "), Se(o);
    }), this.idTensor = Nt(0), this.maxNumElements = r, Se(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  copy() {
    return new co([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(t) {
    this.tensors.forEach((e) => {
      (t == null || !t.has(e.id)) && e.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(t, e, s = -1) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (s !== -1 && this.tensors.length !== s)
      throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);
    Qn(t, this.elementShape, "TensorList shape mismatch: ");
    const r = ka(this.elementShape, this.tensors, t);
    return M(() => {
      const o = this.tensors.map((i) => W(i, r));
      return yn(o, 0);
    });
  }
  popBack(t, e) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    const s = ka(this.elementShape, this.tensors, t), r = this.tensors.pop();
    return r.kept = !1, Qn(r.shape, t, "TensorList shape mismatch: "), W(r, s);
  }
  pushBack(t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (Qn(t.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    Se(t), this.tensors.push(t);
  }
  resize(t) {
    if (t < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);
    if (this.maxNumElements !== -1 && t > this.maxNumElements)
      throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);
    const e = new co([], this.elementShape, this.elementDtype, this.maxNumElements);
    e.tensors.length = t;
    for (let s = 0; s < Math.min(this.tensors.length, t); ++s)
      e.tensors[s] = this.tensors[s];
    return e;
  }
  getItem(t, e, s) {
    if (s !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);
    if (t < 0 || t > this.tensors.length)
      throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[t] == null)
      throw new Error(`element at index ${t} is null.`);
    Qn(this.tensors[t].shape, e, "TensorList shape mismatch: ");
    const r = ka(this.elementShape, this.tensors, e);
    return W(this.tensors[t], r);
  }
  setItem(t, e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (t < 0 || this.maxNumElements !== -1 && t >= this.maxNumElements)
      throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);
    Qn(this.elementShape, e.shape, "TensorList shape mismatch: "), Se(e), this.tensors[t] != null && (this.tensors[t].kept = !1), this.tensors[t] = e;
  }
  gather(t, e, s) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    Qn(this.elementShape, s, "TensorList shape mismatch: "), t = t.slice(0, this.size());
    const r = ka(this.elementShape, this.tensors, s);
    return t.length === 0 ? ge([], [0].concat(r)) : M(() => {
      const o = t.map((i) => W(this.tensors[i], r));
      return yn(o, 0);
    });
  }
  concat(t, e) {
    if (!!t && t !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);
    Qn(this.elementShape, e, "TensorList shape mismatch: ");
    const s = ka(this.elementShape, this.tensors, e);
    return this.size() === 0 ? ge([], [0].concat(s)) : M(() => {
      const r = this.tensors.map((o) => W(o, s));
      return Ce(r, 0);
    });
  }
}
function iz(n, t, e) {
  const s = n.dtype;
  if (n.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);
  if (n.dtype !== e)
    throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);
  const r = n.shape.slice(1);
  Qn(r, t, "TensorList shape mismatch: ");
  const o = as(n);
  return new co(o, t, s);
}
function az(n, t, e, s) {
  return new co([], n, t, s);
}
function lz(n, t, e, s) {
  if (t.length !== n.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);
  const r = Math.max(...t);
  if (s != null && s !== -1 && r >= s)
    throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
  const o = new co([], e, n.dtype, s), i = as(n, 0);
  return t.forEach((a, l) => {
    o.setItem(a, i[l]);
  }), o;
}
function cz(n, t, e) {
  let s = 0;
  const r = t.map((u) => (s += u, s));
  if (s !== n.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
  const o = n.shape.slice(1), i = Yf(o, e), a = s === 0 ? 0 : n.size / s, l = M(() => {
    const u = [];
    n = W(n, [1, s, a]);
    for (let h = 0; h < t.length; ++h) {
      const p = [0, h === 0 ? 0 : r[h - 1], 0], f = [1, t[h], a];
      u[h] = W(Mt(n, p, f), i);
    }
    return n.dispose(), u;
  }), c = new co([], e, n.dtype, t.length);
  for (let u = 0; u < l.length; u++)
    c.setItem(u, l[u]);
  return c;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uz = async (n, t, e) => {
  switch (n.op) {
    case "If":
    case "StatelessIf": {
      const s = I("thenBranch", n, t, e), r = I("elseBranch", n, t, e), o = I("cond", n, t, e), i = I("args", n, t, e);
      return (await o.data())[0] ? e.functionMap[s].executeFunctionAsync(i, e.tensorArrayMap, e.tensorListMap) : e.functionMap[r].executeFunctionAsync(i, e.tensorArrayMap, e.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      const s = I("body", n, t, e), r = I("cond", n, t, e), o = I("args", n, t, e), i = await e.functionMap[r].executeFunctionAsync(o, e.tensorArrayMap, e.tensorListMap), a = o.map((u) => u.id);
      let l = await i[0].data();
      i.forEach((u) => {
        !u.kept && a.indexOf(u.id) === -1 && u.dispose();
      });
      let c = o;
      for (; l[0]; ) {
        const u = c;
        c = await e.functionMap[s].executeFunctionAsync(c, e.tensorArrayMap, e.tensorListMap);
        const h = c.map((p) => p.id);
        u.forEach((p) => {
          !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
        const d = await e.functionMap[r].executeFunctionAsync(c, e.tensorArrayMap, e.tensorListMap);
        l = await d[0].data(), d.forEach((p) => {
          !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
      }
      return c;
    }
    case "LoopCond": {
      const s = I("pred", n, t, e);
      return [Xs(s)];
    }
    case "Switch": {
      const s = I("pred", n, t, e);
      let r = I("data", n, t, e);
      return r.kept || (r = Xs(r)), (await s.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      const s = n.inputNames.find((r) => on(r, t, e) !== void 0);
      if (s) {
        const r = on(s, t, e);
        return [Xs(r)];
      }
      return;
    }
    case "Enter": {
      const s = I("frameName", n, t, e), r = I("tensor", n, t, e);
      return e.enterFrame(s), [Xs(r)];
    }
    case "Exit": {
      const s = I("tensor", n, t, e);
      return e.exitFrame(), [Xs(s)];
    }
    case "NextIteration": {
      const s = I("tensor", n, t, e);
      return e.nextIteration(), [Xs(s)];
    }
    case "TensorArrayV3": {
      const s = I("size", n, t, e), r = I("dtype", n, t, e), o = I("elementShape", n, t, e), i = I("dynamicSize", n, t, e), a = I("clearAfterRead", n, t, e), l = I("identicalElementShapes", n, t, e), c = I("name", n, t, e), u = new oz(c, r, s, o, l, i, a);
      return e.addTensorArray(u), [u.idTensor, Nt(1)];
    }
    case "TensorArrayWriteV3": {
      const s = I("tensorArrayId", n, t, e), r = I("index", n, t, e), o = I("tensor", n, t, e), i = e.getTensorArray(s.id);
      return i.write(r, o), [i.idTensor];
    }
    case "TensorArrayReadV3": {
      const s = I("tensorArrayId", n, t, e), r = I("index", n, t, e);
      return [e.getTensorArray(s.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      const s = I("tensorArrayId", n, t, e), r = I("indices", n, t, e), o = I("dtype", n, t, e);
      return [e.getTensorArray(s.id).gather(r, o)];
    }
    case "TensorArrayScatterV3": {
      const s = I("tensorArrayId", n, t, e), r = I("indices", n, t, e), o = I("tensor", n, t, e), i = e.getTensorArray(s.id);
      return i.scatter(r, o), [i.idTensor];
    }
    case "TensorArrayConcatV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id), o = I("dtype", n, t, e);
      return [r.concat(o)];
    }
    case "TensorArraySplitV3": {
      const s = I("tensorArrayId", n, t, e), r = I("tensor", n, t, e), o = I("lengths", n, t, e), i = e.getTensorArray(s.id);
      return i.split(o, r), [i.idTensor];
    }
    case "TensorArraySizeV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id);
      return [Nt(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      const s = I("tensorListId", n, t, e), r = I("index", n, t, e), o = I("tensor", n, t, e), i = e.getTensorList(s.id);
      return i.setItem(r, o), [i.idTensor];
    }
    case "TensorListGetItem": {
      const s = I("tensorListId", n, t, e), r = I("index", n, t, e), o = I("elementShape", n, t, e), i = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).getItem(r, o, i)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      const s = I("indices", n, t, e), r = I("tensor", n, t, e), o = I("elementShape", n, t, e), i = I("numElements", n, t, e), a = lz(r, s, o, i);
      return e.addTensorList(a), [a.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      const s = I("elementShape", n, t, e), r = I("elementDType", n, t, e);
      let o;
      n.op === "TensorListReserve" ? o = "numElements" : o = "maxNumElements";
      const i = I(o, n, t, e), a = n.op === "TensorListReserve" ? -1 : i, l = az(s, r, i, a);
      return e.addTensorList(l), [l.idTensor];
    }
    case "TensorListGather": {
      const s = I("tensorListId", n, t, e), r = I("indices", n, t, e), o = I("elementShape", n, t, e), i = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).gather(r, i, o)];
    }
    case "TensorListStack": {
      const s = I("tensorListId", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e), i = I("numElements", n, t, e);
      return [e.getTensorList(s.id).stack(r, o, i)];
    }
    case "TensorListFromTensor": {
      const s = I("tensor", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e), i = iz(s, r, o);
      return e.addTensorList(i), [i.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      const s = I("tensorListId", n, t, e), r = e.getTensorList(s.id), o = I("dtype", n, t, e), i = I("elementShape", n, t, e);
      return [r.concat(o, i)];
    }
    case "TensorListPushBack": {
      const s = I("tensorListId", n, t, e), r = I("tensor", n, t, e), o = e.getTensorList(s.id);
      return o.pushBack(r), [o.idTensor];
    }
    case "TensorListPopBack": {
      const s = I("tensorListId", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).popBack(r, o)];
    }
    case "TensorListSplit": {
      const s = I("tensor", n, t, e), r = I("elementShape", n, t, e), o = I("lengths", n, t, e), i = cz(s, o, r);
      return e.addTensorList(i), [i.idTensor];
    }
    case "TensorListLength": {
      const s = I("tensorListId", n, t, e), r = e.getTensorList(s.id);
      return [Nt(r.size(), "int32")];
    }
    case "TensorListResize": {
      const s = I("tensorListId", n, t, e), r = I("size", n, t, e), i = e.getTensorList(s.id).resize(r);
      return e.addTensorList(i), [i.idTensor];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ix(n, t, e) {
  const [s, r] = I("fusedOps", n, t, e), o = s === "biasadd", i = !o, a = r === "prelu", l = s === "fusedbatchnorm", c = I("numArgs", n, t, e);
  if (o) {
    if (a && c !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!a && o && c !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  const u = I("strides", n, t, e), h = mu(n, t, e), d = I("dataFormat", n, t, e).toUpperCase(), p = I("dilations", n, t, e);
  let [f, m] = I("args", n, t, e);
  i && (m = f, f = void 0);
  const g = I("leakyreluAlpha", n, t, e);
  return {
    stride: u,
    pad: h,
    dataFormat: d,
    dilations: p,
    biasArg: f,
    preluArg: m,
    activationFunc: r,
    leakyreluAlpha: g
  };
}
const hz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Conv1D": {
      const r = I("stride", n, t, e), o = I("pad", n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilation", n, t, e);
      return [s.conv1d(I("x", n, t, e), I("filter", n, t, e), r, o, i, a)];
    }
    case "Conv2D": {
      const r = I("strides", n, t, e), o = mu(n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilations", n, t, e);
      return [s.conv2d(I("x", n, t, e), I("filter", n, t, e), [r[1], r[2]], o, i, [a[1], a[2]])];
    }
    case "_FusedConv2D": {
      const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = ix(n, t, e);
      return [s.fused.conv2d({
        x: I("x", n, t, e),
        filter: I("filter", n, t, e),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: i,
        dilations: [a[1], a[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "FusedDepthwiseConv2dNative": {
      const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = ix(n, t, e);
      return [s.fused.depthwiseConv2d({
        x: I("x", n, t, e),
        filter: I("filter", n, t, e),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: i,
        dilations: [a[1], a[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      const r = I("outputShape", n, t, e), o = I("strides", n, t, e), i = mu(n, t, e);
      return [s.conv2dTranspose(I("x", n, t, e), I("filter", n, t, e), r, [o[1], o[2]], i)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      const r = I("strides", n, t, e), o = mu(n, t, e), i = I("dilations", n, t, e), a = I("dataFormat", n, t, e).toUpperCase();
      return [s.depthwiseConv2d(I("input", n, t, e), I("filter", n, t, e), [r[1], r[2]], o, a, [i[1], i[2]])];
    }
    case "Conv3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilations", n, t, e);
      return [s.conv3d(I("x", n, t, e), I("filter", n, t, e), [r[1], r[2], r[3]], o, i, [a[1], a[2], a[3]])];
    }
    case "AvgPool": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.avgPool(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
    }
    case "MaxPool": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.maxPool(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
    }
    case "MaxPoolWithArgmax": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e), a = I("includeBatchInIndex", n, t, e), { result: l, indexes: c } = s.maxPoolWithArgmax(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o, a);
      return [l, c];
    }
    case "AvgPool3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.avgPool3d(I("x", n, t, e), [i[1], i[2], i[3]], [r[1], r[2], r[3]], o)];
    }
    case "MaxPool3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.maxPool3d(I("x", n, t, e), [i[1], i[2], i[3]], [r[1], r[2], r[3]], o)];
    }
    case "Dilation2D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("dilations", n, t, e), a = r[1], l = r[2], c = i[1], u = i[2];
      return [s.dilation2d(I("x", n, t, e), I("filter", n, t, e), [a, l], o, [c, u], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Fill": {
      const r = I("shape", n, t, e), o = I("dtype", n, t, e), i = I("value", n, t, e);
      return [s.fill(r, i, o)];
    }
    case "LinSpace": {
      const r = I("start", n, t, e), o = I("stop", n, t, e), i = I("num", n, t, e);
      return [s.linspace(r, o, i)];
    }
    case "Multinomial": {
      const r = I("logits", n, t, e), o = I("numSamples", n, t, e), i = I("seed", n, t, e);
      return [s.multinomial(r, o, i)];
    }
    case "OneHot": {
      const r = I("indices", n, t, e), o = I("depth", n, t, e), i = I("onValue", n, t, e), a = I("offValue", n, t, e), l = I("dtype", n, t, e);
      return [s.oneHot(r, o, i, a, l)];
    }
    case "Ones":
      return [s.ones(I("shape", n, t, e), I("dtype", n, t, e))];
    case "OnesLike":
      return [s.onesLike(I("x", n, t, e))];
    case "RandomStandardNormal":
      return [s.randomStandardNormal(I("shape", n, t, e), I("dtype", n, t, e), I("seed", n, t, e))];
    case "RandomUniform":
      return [s.randomUniform(
        I("shape", n, t, e),
        I("minval", n, t, e),
        I("maxval", n, t, e),
        I("dtype", n, t, e)
      )];
    case "Range": {
      const r = I("start", n, t, e), o = I("stop", n, t, e), i = I("step", n, t, e);
      return [s.range(r, o, i, I("dtype", n, t, e))];
    }
    case "TruncatedNormal": {
      const r = I("shape", n, t, e), o = I("mean", n, t, e), i = I("stdDev", n, t, e), a = I("seed", n, t, e);
      return [s.truncatedNormal(r, o, i, I("dtype", n, t, e), a)];
    }
    case "Zeros":
      return [s.zeros(I("shape", n, t, e), I("dtype", n, t, e))];
    case "ZerosLike":
      return [s.zerosLike(I("x", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wp(n, t, e) {
  const s = I("boxes", n, t, e), r = I("scores", n, t, e), o = I("maxOutputSize", n, t, e), i = I("iouThreshold", n, t, e), a = I("scoreThreshold", n, t, e), l = I("softNmsSigma", n, t, e);
  return {
    boxes: s,
    scores: r,
    maxOutputSize: o,
    iouThreshold: i,
    scoreThreshold: a,
    softNmsSigma: l
  };
}
const pz = async (n, t, e, s, r = en) => {
  switch (n.op) {
    case "NonMaxSuppressionV5": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c, softNmsSigma: u } = Wp(n, t, e), h = await r.image.nonMaxSuppressionWithScoreAsync(o, i, a, l, c, u);
      return [h.selectedIndices, h.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = Wp(n, t, e), u = I("padToMaxOutputSize", n, t, e), h = await r.image.nonMaxSuppressionPaddedAsync(o, i, a, l, c, u);
      return [h.selectedIndices, h.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = Wp(n, t, e);
      return [await r.image.nonMaxSuppressionAsync(o, i, a, l, c)];
    }
    case "Where": {
      const o = r.cast(I("condition", n, t, e), "bool"), i = [await r.whereAsync(o)];
      return o.dispose(), i;
    }
    case "ListDiff":
      return r.setdiff1dAsync(I("x", n, t, e), I("y", n, t, e));
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fz = (n, t, e, s = en) => {
  switch (n.op) {
    case "LowerBound": {
      const r = I("sortedSequence", n, t, e), o = I("values", n, t, e);
      return [s.lowerBound(r, o)];
    }
    case "TopKV2": {
      const r = I("x", n, t, e), o = I("k", n, t, e), i = I("sorted", n, t, e), a = s.topk(r, o, i);
      return [a.values, a.indices];
    }
    case "UpperBound": {
      const r = I("sortedSequence", n, t, e), o = I("values", n, t, e);
      return [s.upperBound(r, o)];
    }
    case "Unique": {
      const r = I("x", n, t, e), o = s.unique(r);
      return [o.values, o.indices];
    }
    case "UniqueV2": {
      const r = I("x", n, t, e), o = I("axis", n, t, e), i = s.unique(r, o);
      return [i.values, i.indices];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Const":
      return t[n.name];
    case "PlaceholderWithDefault":
      const r = I("default", n, t, e);
      return [on(n.name, t, e) || r];
    case "Placeholder":
      return [on(n.name, t, e)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      const u = I("x", n, t, e);
      return [Xs(u)];
    }
    case "IdentityN":
      return I("x", n, t, e).map((u) => Xs(u));
    case "Snapshot":
      const o = I("x", n, t, e);
      return [Xs(o)];
    case "Shape":
      return [s.tensor1d(I("x", n, t, e).shape, "int32")];
    case "ShapeN":
      return I("x", n, t, e).map((u) => s.tensor1d(u.shape));
    case "Size":
      return [s.scalar(I("x", n, t, e).size, "int32")];
    case "Rank":
      return [s.scalar(I("x", n, t, e).rank, "int32")];
    case "NoOp":
      return [s.scalar(1)];
    case "Print":
      const i = I("x", n, t, e), a = I("data", n, t, e), l = I("message", n, t, e), c = I("summarize", n, t, e);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
      for (let u = 0; u < a.length; u++)
        console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0, c));
      return [i];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class gz {
  constructor(t, e) {
    this.keyDType = t, this.valueDType = e, this.handle = Nt(0), this.tensorMap = /* @__PURE__ */ new Map(), Se(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  clearAndClose() {
    this.tensorMap.forEach((t) => t.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return Nt(this.size(), "int32");
  }
  async import(t, e) {
    this.checkKeyAndValueTensor(t, e);
    const s = await t.data();
    return this.tensorMap.forEach((r) => r.dispose()), this.tensorMap.clear(), M(() => {
      const r = as(e), o = s.length, i = r.length;
      k(o === i, () => `The number of elements doesn't match, keys has ${o} elements, the values has ${i} elements.`);
      for (let a = 0; a < o; a++) {
        const l = s[a], c = r[a];
        Se(c), this.tensorMap.set(l, c);
      }
      return this.handle;
    });
  }
  async find(t, e) {
    this.checkKeyAndValueTensor(t, e);
    const s = await t.data();
    return M(() => {
      const r = [];
      for (let o = 0; o < s.length; o++) {
        const i = s[o], a = this.findWithDefault(i, e);
        r.push(a);
      }
      return yn(r);
    });
  }
  findWithDefault(t, e) {
    const s = this.tensorMap.get(t);
    return s != null ? s : e;
  }
  checkKeyAndValueTensor(t, e) {
    if (t.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);
    if (e.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yz = async (n, t, e, s) => {
  switch (n.op) {
    case "HashTable":
    case "HashTableV2": {
      const r = I("keyDType", n, t, e), o = I("valueDType", n, t, e), i = new gz(r, o);
      return s.addHashTable(n.name, i), [i.handle];
    }
    case "LookupTableImport":
    case "LookupTableImportV2": {
      const r = I("tableHandle", n, t, e, s), o = I("keys", n, t, e), i = I("values", n, t, e);
      return [await s.getHashTableById(r.id).import(o, i)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      const r = I("tableHandle", n, t, e, s), o = I("keys", n, t, e), i = I("defaultValue", n, t, e);
      return [await s.getHashTableById(r.id).find(o, i)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      const r = I("tableHandle", n, t, e, s);
      return [s.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bz = (n, t, e, s = en) => {
  switch (n.op) {
    case "ResizeBilinear": {
      const r = I("images", n, t, e), o = I("size", n, t, e), i = I("alignCorners", n, t, e), a = I("halfPixelCenters", n, t, e);
      return [s.image.resizeBilinear(r, [o[0], o[1]], i, a)];
    }
    case "ResizeNearestNeighbor": {
      const r = I("images", n, t, e), o = I("size", n, t, e), i = I("alignCorners", n, t, e), a = I("halfPixelCenters", n, t, e);
      return [s.image.resizeNearestNeighbor(r, [o[0], o[1]], i, a)];
    }
    case "CropAndResize": {
      const r = I("image", n, t, e), o = I("boxes", n, t, e), i = I("boxInd", n, t, e), a = I("cropSize", n, t, e), l = I("method", n, t, e), c = I("extrapolationValue", n, t, e);
      return [s.image.cropAndResize(r, o, i, a, l, c)];
    }
    case "ImageProjectiveTransformV3": {
      const r = I("images", n, t, e), o = I("transforms", n, t, e), i = I("outputShape", n, t, e), a = I("fillValue", n, t, e), l = I("interpolation", n, t, e), c = I("fillMode", n, t, e);
      return [s.image.transform(r, o, l.toLowerCase(), c.toLowerCase(), a, i)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Equal":
      return [s.equal(I("a", n, t, e), I("b", n, t, e))];
    case "NotEqual":
      return [s.notEqual(I("a", n, t, e), I("b", n, t, e))];
    case "Greater":
      return [s.greater(I("a", n, t, e), I("b", n, t, e))];
    case "GreaterEqual":
      return [s.greaterEqual(I("a", n, t, e), I("b", n, t, e))];
    case "Less":
      return [s.less(I("a", n, t, e), I("b", n, t, e))];
    case "LessEqual":
      return [s.lessEqual(I("a", n, t, e), I("b", n, t, e))];
    case "LogicalAnd":
      return [s.logicalAnd(I("a", n, t, e), I("b", n, t, e))];
    case "LogicalNot":
      return [s.logicalNot(I("a", n, t, e))];
    case "LogicalOr":
      return [s.logicalOr(I("a", n, t, e), I("b", n, t, e))];
    case "Select":
    case "SelectV2":
      return [s.where(I("condition", n, t, e), I("a", n, t, e), I("b", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wz = (n, t, e, s = en) => {
  switch (n.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [s.matMul(I("a", n, t, e), I("b", n, t, e), I("transposeA", n, t, e), I("transposeB", n, t, e))];
    case "Einsum":
      return [s.einsum(I("equation", n, t, e), ...I("tensors", n, t, e))];
    case "Transpose":
      return [s.transpose(I("x", n, t, e), I("perm", n, t, e))];
    case "_FusedMatMul":
      const [r, o] = I("fusedOps", n, t, e), i = r === "biasadd", a = o === "prelu", l = I("numArgs", n, t, e), c = I("leakyreluAlpha", n, t, e);
      if (i) {
        if (a && l !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!a && l !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      const [u, h] = I("args", n, t, e);
      return [s.fused.matMul({
        a: I("a", n, t, e),
        b: I("b", n, t, e),
        transposeA: I("transposeA", n, t, e),
        transposeB: I("transposeB", n, t, e),
        bias: u,
        activation: o,
        preluActivationWeights: h,
        leakyreluAlpha: c
      })];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Iz = (n, t, e, s = en) => {
  switch (n.op) {
    case "EuclideanNorm":
      return [s.euclideanNorm(I("x", n, t, e), I("axis", n, t, e), I("keepDims", n, t, e))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [s.batchNorm(I("x", n, t, e), I("mean", n, t, e), I("variance", n, t, e), I("offset", n, t, e), I("scale", n, t, e), I("epsilon", n, t, e))];
    case "FusedBatchNormV3":
      return [s.batchNorm(I("x", n, t, e), I("mean", n, t, e), I("variance", n, t, e), I("offset", n, t, e), I("scale", n, t, e), I("epsilon", n, t, e))];
    case "LRN":
      return [s.localResponseNormalization(I("x", n, t, e), I("radius", n, t, e), I("bias", n, t, e), I("alpha", n, t, e), I("beta", n, t, e))];
    case "Softmax":
      return [s.softmax(I("x", n, t, e))];
    case "LogSoftmax":
      return [s.logSoftmax(I("x", n, t, e))];
    case "SparseToDense":
      return [s.sparseToDense(I("sparseIndices", n, t, e), I("outputShape", n, t, e), I("sparseValues", n, t, e), I("defaultValue", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Max": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.max(I("x", n, t, e), a, l)];
    }
    case "Mean": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.mean(I("x", n, t, e), a, l)];
    }
    case "Min": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.min(I("x", n, t, e), a, l)];
    }
    case "Sum": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.sum(I("x", n, t, e), a, l)];
    }
    case "All": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.all(I("x", n, t, e), a, l)];
    }
    case "Any": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.any(I("x", n, t, e), a, l)];
    }
    case "ArgMax": {
      const a = I("axis", n, t, e);
      return [s.argMax(I("x", n, t, e), a)];
    }
    case "ArgMin": {
      const a = I("axis", n, t, e);
      return [s.argMin(I("x", n, t, e), a)];
    }
    case "Prod": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.prod(I("x", n, t, e), a, l)];
    }
    case "Cumprod": {
      const a = I("axis", n, t, e), l = I("exclusive", n, t, e), c = I("reverse", n, t, e);
      return [s.cumprod(I("x", n, t, e), a, l, c)];
    }
    case "Cumsum": {
      const a = I("axis", n, t, e), l = I("exclusive", n, t, e), c = I("reverse", n, t, e);
      return [s.cumsum(I("x", n, t, e), a, l, c)];
    }
    case "Bincount":
      const r = I("x", n, t, e), o = I("weights", n, t, e), i = I("size", n, t, e);
      return [s.bincount(r, o, i)];
    case "DenseBincount": {
      const a = I("x", n, t, e), l = I("weights", n, t, e), c = I("size", n, t, e), u = I("binaryOutput", n, t, e);
      return [s.denseBincount(a, l, c, u)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vz = (n, t, e, s = en) => {
  switch (n.op) {
    case "ConcatV2":
    case "Concat": {
      const r = I("n", n, t, e), o = I("axis", n, t, e);
      let i = I("tensors", n, t, e);
      return i = i.slice(0, r), [s.concat(i, o)];
    }
    case "Gather": {
      const r = I("x", n, t, e), o = I("indices", n, t, e);
      return [s.gather(r, s.cast(o, "int32"), 0)];
    }
    case "GatherV2": {
      const r = I("axis", n, t, e), o = I("batchDims", n, t, e), i = I("x", n, t, e), a = I("indices", n, t, e);
      return [s.gather(i, s.cast(a, "int32"), r, o)];
    }
    case "Reverse": {
      const r = I("dims", n, t, e), o = [];
      for (let a = 0; a < r.length; a++)
        r[a] && o.push(a);
      const i = I("x", n, t, e);
      return [s.reverse(i, o)];
    }
    case "ReverseV2": {
      const r = I("axis", n, t, e), o = I("x", n, t, e);
      return [s.reverse(o, r)];
    }
    case "Slice": {
      const r = I("begin", n, t, e), o = I("size", n, t, e);
      return [s.slice(I("x", n, t, e), r, o)];
    }
    case "StridedSlice": {
      const r = I("begin", n, t, e), o = I("end", n, t, e), i = I("strides", n, t, e), a = I("beginMask", n, t, e), l = I("endMask", n, t, e), c = I("ellipsisMask", n, t, e), u = I("newAxisMask", n, t, e), h = I("shrinkAxisMask", n, t, e), d = I("x", n, t, e);
      return [s.stridedSlice(d, r, o, i, a, l, c, u, h)];
    }
    case "Pack":
      return M(() => {
        const r = I("axis", n, t, e), o = I("tensors", n, t, e), i = o[0].shape, a = s.squeeze(o[0]).shape, l = o.map((c) => {
          const u = Vt(c.shape, i);
          if (!u && !Vt(s.squeeze(c).shape, a))
            throw new Error("the input tensors shape does not match");
          return u ? c : s.reshape(c, i);
        });
        return [s.stack(l, r)];
      });
    case "Unpack": {
      const r = I("axis", n, t, e), o = I("tensor", n, t, e);
      return s.unstack(o, r);
    }
    case "Tile": {
      const r = I("reps", n, t, e);
      return [s.tile(I("x", n, t, e), r)];
    }
    case "Split":
    case "SplitV": {
      const r = I("axis", n, t, e), o = I("numOrSizeSplits", n, t, e), i = I("x", n, t, e);
      return s.split(i, o, r);
    }
    case "ScatterNd": {
      const r = I("indices", n, t, e), o = I("values", n, t, e), i = I("shape", n, t, e);
      return [s.scatterND(r, o, i)];
    }
    case "GatherNd": {
      const r = I("x", n, t, e), o = I("indices", n, t, e);
      return [s.gatherND(r, o)];
    }
    case "SparseToDense": {
      const r = I("sparseIndices", n, t, e), o = I("outputShape", n, t, e), i = I("sparseValues", n, t, e), a = I("defaultValue", n, t, e);
      return [s.sparseToDense(r, i, o, i.dtype === a.dtype ? a : s.cast(a, i.dtype))];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cz = (n, t, e, s = en) => {
  switch (n.op) {
    case "SparseFillEmptyRows": {
      const { outputIndices: r, outputValues: o, emptyRowIndicator: i, reverseIndexMap: a } = s.sparse.sparseFillEmptyRows(I("indices", n, t, e), I("values", n, t, e), I("denseShape", n, t, e), I("defaultValue", n, t, e));
      return [
        r,
        o,
        i,
        a
      ];
    }
    case "SparseReshape": {
      const { outputIndices: r, outputShape: o } = s.sparse.sparseReshape(I("inputIndices", n, t, e), I("inputShape", n, t, e), I("newShape", n, t, e));
      return [r, o];
    }
    case "SparseSegmentMean":
      return [s.sparse.sparseSegmentMean(I("data", n, t, e), I("indices", n, t, e), I("segmentIds", n, t, e))];
    case "SparseSegmentSum":
      return [s.sparse.sparseSegmentSum(I("data", n, t, e), I("indices", n, t, e), I("segmentIds", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kz = (n, t, e, s = en) => {
  switch (n.op) {
    case "FFT":
      return [s.fft(I("x", n, t, e))];
    case "IFFT":
      return [s.ifft(I("x", n, t, e))];
    case "RFFT":
      return [s.rfft(I("x", n, t, e))];
    case "IRFFT":
      return [s.irfft(I("x", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nz = (n, t, e, s = en) => {
  switch (n.op) {
    case "StringNGrams": {
      const { nGrams: r, nGramsSplits: o } = s.string.stringNGrams(I("data", n, t, e), I("dataSplits", n, t, e), I("separator", n, t, e), I("nGramWidths", n, t, e), I("leftPad", n, t, e), I("rightPad", n, t, e), I("padWidth", n, t, e), I("preserveShortSequences", n, t, e));
      return [r, o];
    }
    case "StringSplit": {
      const { indices: r, values: o, shape: i } = s.string.stringSplit(I("input", n, t, e), I("delimiter", n, t, e), I("skipEmpty", n, t, e));
      return [r, o, i];
    }
    case "StringToHashBucketFast":
      return [s.string.stringToHashBucketFast(I("input", n, t, e), I("numBuckets", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tz = (n, t, e, s = en) => {
  switch (n.op) {
    case "Cast":
      return [s.cast(I("x", n, t, e), I("dtype", n, t, e))];
    case "ExpandDims": {
      const r = I("axis", n, t, e);
      return [s.expandDims(I("x", n, t, e), r)];
    }
    case "Squeeze": {
      const r = I("axis", n, t, e);
      return [s.squeeze(I("x", n, t, e), r)];
    }
    case "Reshape":
      return [s.reshape(I("x", n, t, e), I("shape", n, t, e))];
    case "MirrorPad":
      return [s.mirrorPad(I("x", n, t, e), I("padding", n, t, e), I("mode", n, t, e))];
    case "PadV2":
    case "Pad":
      return [s.pad(I("x", n, t, e), I("padding", n, t, e), I("constantValue", n, t, e))];
    case "SpaceToBatchND": {
      const r = I("blockShape", n, t, e), o = I("paddings", n, t, e);
      return [s.spaceToBatchND(I("x", n, t, e), r, o)];
    }
    case "BatchToSpaceND": {
      const r = I("blockShape", n, t, e), o = I("crops", n, t, e);
      return [s.batchToSpaceND(I("x", n, t, e), r, o)];
    }
    case "DepthToSpace": {
      const r = I("blockSize", n, t, e), o = I("dataFormat", n, t, e).toUpperCase();
      return [s.depthToSpace(I("x", n, t, e), r, o)];
    }
    case "BroadcastTo":
      return [s.broadcastTo(I("x", n, t, e), I("shape", n, t, e))];
    case "BroadcastArgs":
      return [s.broadcastArgs(I("s0", n, t, e), I("s1", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ax(n, t, e, s, r = M) {
  const o = ((i, a, l) => {
    switch (i.category) {
      case "arithmetic":
        return r(() => sz(i, a, l));
      case "basic_math":
        return r(() => rz(i, a, l));
      case "control":
        return uz(i, a, l);
      case "convolution":
        return r(() => hz(i, a, l));
      case "creation":
        return r(() => dz(i, a, l));
      case "dynamic":
        return pz(i, a, l);
      case "evaluation":
        return r(() => fz(i, a, l));
      case "image":
        return r(() => bz(i, a, l));
      case "graph":
        return r(() => mz(i, a, l));
      case "logical":
        return r(() => xz(i, a, l));
      case "matrices":
        return r(() => wz(i, a, l));
      case "normalization":
        return r(() => Iz(i, a, l));
      case "reduction":
        return r(() => Sz(i, a, l));
      case "slice_join":
        return r(() => vz(i, a, l));
      case "sparse":
        return r(() => Cz(i, a, l));
      case "spectral":
        return r(() => kz(i, a, l));
      case "string":
        return r(() => Nz(i, a, l));
      case "transformation":
        return r(() => Tz(i, a, l));
      case "hash_table":
        return yz(i, a, l, s);
      case "custom":
        const c = TS(i.op);
        if (c && c.customExecutor)
          return c.customExecutor(new nz(i, a, l));
        throw TypeError(`Custom op ${i.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(n, t, e);
  return Sr(o) ? o.then((i) => [].concat(i)) : [].concat(o);
}
class lx {
  constructor(t = {}, e = {}, s = {}, r = {}) {
    this.weightMap = t, this.tensorArrayMap = e, this.tensorListMap = s, this.functionMap = r, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(t, e) {
    return { id: t, frameName: e, iterationId: 0 };
  }
  set currentContext(t) {
    this.contexts !== t && (this.contexts = t, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const t = [];
    for (let e = 0; e < this.contexts.length - 1; e++) {
      const s = this.contexts.slice(0, this.contexts.length - e);
      t.push(this.contextIdforContexts(s));
    }
    t.push(""), this._currentContextIds = t;
  }
  contextIdforContexts(t) {
    return t ? t.map((e) => e.id === 0 && e.iterationId === 0 ? "" : `${e.frameName}-${e.iterationId}`).join("/") : "";
  }
  enterFrame(t) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, t)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      const t = Object.assign({}, this.contexts[this.contexts.length - 1]);
      t.iterationId += 1, t.id = this.lastId, this.contexts.splice(-1, 1, t), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(t) {
    return this.weightMap[t];
  }
  addTensorArray(t) {
    this.tensorArrayMap[t.id] = t;
  }
  getTensorArray(t) {
    return this.tensorArrayMap[t];
  }
  addTensorList(t) {
    this.tensorListMap[t.id] = t;
  }
  getTensorList(t) {
    return this.tensorListMap[t];
  }
  dispose(t) {
    for (const e in this.tensorArrayMap)
      this.tensorArrayMap[e].clearAndClose(t);
    for (const e in this.tensorListMap)
      this.tensorListMap[e].clearAndClose(t);
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cx(n, t, e, s) {
  const r = /* @__PURE__ */ new Set(), o = [];
  let i = null, a = null;
  const l = /* @__PURE__ */ new Set(), c = Object.keys(n).map((d) => Cn(d)[0]);
  let u = [];
  s != null && (u = s.map((d) => Cn(d.name)[0]));
  const h = [...t];
  for (; h.length > 0; ) {
    const d = h.pop();
    if ((ES(d) || Dz(d) || Gz(d)) && i == null && (i = d, a = i.children.map((p) => p.name).filter((p) => r.has(p))), r.add(d.name), e[d.name] == null && c.indexOf(d.name) === -1 && u.indexOf(d.name) === -1) {
      if (d.inputs.length === 0) {
        o.push(d.name);
        continue;
      }
      d.inputs.forEach((p) => {
        l.has(p.name) || (l.add(p.name), h.push(p));
      });
    }
  }
  return { inputs: n, outputs: t, usedNodes: r, missingInputs: o, dynamicNode: i, syncInputs: a };
}
function $z(n, t, e) {
  const { usedNodes: s, inputs: r } = e, o = [], i = Object.keys(r).map((u) => Cn(u)[0]).map((u) => n.nodes[u]), a = n.initNodes;
  i.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), n.weights.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), a != null && a.forEach((u) => {
    s.has(u.name) && o.push(u);
  });
  const l = /* @__PURE__ */ new Set(), c = [];
  for (; o.length > 0; ) {
    const u = o.pop();
    l.add(u.name), t[u.name] || c.push(u), u.children.forEach((h) => {
      !l.has(h.name) && s.has(h.name) && h.inputs.every((d) => l.has(d.name)) && o.push(h);
    });
  }
  return c;
}
const Rz = [
  "Switch",
  "Merge",
  "Enter",
  "Exit",
  "NextIteration",
  "StatelessIf",
  "StatelessWhile",
  "if",
  "While"
], Ez = [
  "NonMaxSuppressionV2",
  "NonMaxSuppressionV3",
  "NonMaxSuppressionV5",
  "Where"
], Lz = [
  "HashTable",
  "HashTableV2",
  "LookupTableImport",
  "LookupTableImportV2",
  "LookupTableFind",
  "LookupTableFindV2",
  "LookupTableSize",
  "LookupTableSizeV2"
];
function ES(n) {
  return Rz.indexOf(n.op) >= 0;
}
function Dz(n) {
  return Ez.indexOf(n.op) >= 0;
}
function Gz(n) {
  return Lz.indexOf(n.op) >= 0;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pu {
  constructor(t, e) {
    this.graph = t, this.parent = e, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.intermediateTensors = {}, this.keepTensorForDebug = !1, this._outputs = t.outputs, this._inputs = t.inputs, this._initNodes = t.initNodes, this._signature = t.signature, this._functions = t.functions, t.functions != null && Object.keys(t.functions).forEach((s) => {
      this._functionExecutorMap[s] = new Pu(t.functions[s], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(t) {
    const e = Object.keys(t).map((s) => t[s].map((r) => r.id));
    this._weightIds = [].concat(...e), this._weightMap = t;
  }
  set resourceManager(t) {
    this._resourceManager = t;
  }
  get inputs() {
    return this._inputs.map((t) => ({
      name: t.name,
      shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
      dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0
    }));
  }
  get outputs() {
    return this._outputs.map((t) => ({
      name: t.name,
      shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
      dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0
    }));
  }
  get inputNodes() {
    return this._inputs.map((t) => t.signatureKey || t.name);
  }
  get outputNodes() {
    return this._outputs.map((t) => {
      const e = t.signatureKey || t.name;
      return t.defaultOutput ? `${e}:${t.defaultOutput}` : e;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((t, e) => (t[e] = this._functions[e].signature, t), {});
  }
  getCompilationKey(t, e) {
    const s = t.map((o) => o.name).sort(), r = e.map((o) => o.name).sort();
    return s.join(this.SEPERATOR) + "--" + r.join(this.SEPERATOR);
  }
  compile(t, e) {
    const s = cx(t, e, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: o, syncInputs: i } = s;
    if (o != null)
      throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);
    if (r.length > 0) {
      const a = e.map((c) => c.name), l = Object.keys(t);
      throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${r}]`);
    }
    return $z(this.graph, this.weightMap, s);
  }
  execute(t, e) {
    t = this.mapInputs(t);
    const s = Object.keys(t).sort();
    this.checkInputs(t), this.checkInputShapeAndType(t), e = this.mapOutputs(e), this.checkOutputs(e);
    const r = s.map((h) => this.graph.nodes[Cn(h)[0]]), o = e.map((h) => Cn(h)[0]);
    let i = o.map((h) => this.graph.nodes[h]);
    this.resetIntermediateTensors(), i.length === 0 && (i = this._outputs);
    const a = this.getCompilationKey(r, i);
    let l = this.compiledMap.get(a);
    l == null && (l = this.compile(t, i), this.compiledMap.set(a, l));
    const c = {}, u = {};
    return M(() => {
      const h = new lx(this.weightMap, c, u, this.functionExecutorMap), d = Object.assign({}, this.weightMap);
      Object.keys(t).forEach((m) => {
        const [g, y] = Cn(m), b = [];
        b[y] = t[m], d[g] = b;
      });
      const p = this.getFrozenTensorIds(d), f = {};
      for (let m = 0; m < l.length; m++) {
        const g = l[m];
        if (!d[g.name]) {
          const y = ax(g, d, h, this._resourceManager);
          if (Sr(y))
            throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);
          d[g.name] = y, this.checkTensorForDisposal(g.name, g, d, h, p, o, f);
        }
      }
      return this.parent == null && h.dispose(p), e.map((m) => on(m, d, h));
    });
  }
  getFrozenTensorIds(t) {
    const e = [].concat.apply([], Object.keys(t).map((s) => t[s]).map((s) => s.map((r) => r.id)));
    return new Set(e);
  }
  checkTensorForDisposal(t, e, s, r, o, i, a) {
    e.category === "control" || i.indexOf(t) !== -1 || (s[t].forEach((l) => {
      l != null && (a[l.id] = (a[l.id] || 0) + e.children.length);
    }), e.inputs.forEach((l) => {
      if (l.category !== "control") {
        const c = gA(l.name, s, r);
        c != null && c.forEach((u) => {
          if (u && !u.kept && !o.has(u.id)) {
            const h = a[u.id];
            if (h === 1) {
              if (!this.keepTensorForDebug)
                u.dispose();
              else {
                const [d, p] = Es(e.name, r);
                this.intermediateTensors[d] ? this.intermediateTensors[d][p] = u : (this.intermediateTensors[d] = [], this.intermediateTensors[d][p] = u);
              }
              delete a[u.id];
            } else
              h != null && a[u.id]--;
          }
        });
      }
    }));
  }
  async executeAsync(t, e) {
    return this._executeAsync(t, e);
  }
  disposeIntermediateTensors() {
    !this.intermediateTensors || (Object.keys(this.intermediateTensors).forEach((t) => this.intermediateTensors[t].forEach((e) => e.dispose())), this.disposeTensorsMap());
  }
  disposeTensorsMap() {
    !this.tensorsMap || Object.keys(this.tensorsMap).forEach((t) => {
      this.tensorsMap[t].forEach((s) => {
        s && !s.kept && !s.isDisposed && !this.keepIds.has(s.id) && s.dispose();
      });
    });
  }
  getIntermediateTensors() {
    return this.tensorsMap;
  }
  resetIntermediateTensors() {
    for (const t in this.intermediateTensors)
      this.intermediateTensors[t].forEach((e) => e.dispose()), delete this.intermediateTensors[t];
  }
  async _executeAsync(t, e, s = !1, r = {}, o = {}) {
    s || (t = this.mapInputs(t), this.checkInputs(t), this.checkInputShapeAndType(t), e = this.mapOutputs(e), this.checkOutputs(e));
    try {
      this.keepTensorForDebug = K().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (u) {
      console.warn(u.message);
    }
    this.resetIntermediateTensors();
    const i = new lx(this.weightMap, r, o, this.functionExecutorMap);
    this.tensorsMap = await this.executeWithControlFlow(t, i, e, s);
    const a = e.map((u) => on(u, this.tensorsMap, i)), l = a.map((u) => u.id), c = Object.keys(t).map((u) => t[u].id);
    return this.keepIds = /* @__PURE__ */ new Set([...l, ...c, ...this.weightIds]), this.keepTensorForDebug || this.disposeTensorsMap(), this.parent == null && i.dispose(this.keepIds), a;
  }
  async executeFunctionAsync(t, e, s) {
    const r = t.reduce((o, i, a) => (o[this.inputs[a].name] = i, o), {});
    return this._executeAsync(r, this.outputNodes, !0, e, s);
  }
  async executeWithControlFlow(t, e, s, r) {
    const o = Object.keys(t), i = o.map((w) => this.graph.nodes[Cn(w)[0]]), a = s.map((w) => Cn(w)[0]);
    let l = a.map((w) => this.graph.nodes[w]);
    l.length === 0 && (l = this._outputs);
    const { usedNodes: c, missingInputs: u, dynamicNode: h, syncInputs: d } = cx(t, l, this.weightMap, this._initNodes), p = [
      ...i,
      ...this.graph.weights,
      ...this._initNodes || []
    ].map((w) => ({ node: w, contexts: e.currentContext })), f = Object.assign({}, this.weightMap);
    Object.keys(t).forEach((w) => {
      const [x, S] = Cn(w), v = [];
      v[S] = t[w], f[x] = v;
    });
    const m = {}, g = this.getFrozenTensorIds(f), y = {};
    for (; p.length > 0; ) {
      const w = this.processStack(i, p, e, f, y, g, a, m, c);
      await Promise.all(w);
    }
    h == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    const b = l.filter((w) => !ES(w) && !on(w.name, f, e)).map((w) => w.name);
    if (b.length > 0) {
      let w = "";
      throw h != null && (w = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`), new Error(`Cannot compute the outputs [${b}] from the provided inputs [${o}]. Consider providing the following inputs: [${u}]. ${w}`);
    }
    return f;
  }
  processStack(t, e, s, r, o, i, a, l, c) {
    const u = [];
    for (; e.length > 0; ) {
      const h = e.pop();
      s.currentContext = h.contexts;
      let d = "";
      if (h.node.op === "Enter" && I("isConstant", h.node, r, s) && ([d] = Es(h.node.name, s)), r[h.node.name] == null) {
        const p = ax(h.node, r, s, this._resourceManager);
        d || ([d] = Es(h.node.name, s));
        const f = s.currentContext;
        Sr(p) ? u.push(p.then((m) => (r[d] = m, s.currentContext = f, this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, e, s, r, o, c), m))) : (r[d] = p, this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, e, s, r, o, c));
      } else
        this.processChildNodes(h.node, e, s, r, o, c);
    }
    return u;
  }
  processChildNodes(t, e, s, r, o, i) {
    t.children.forEach((a) => {
      const [l] = Es(a.name, s);
      o[l] || !i.has(a.name) || (a.op === "Merge" ? a.inputNames.some((c) => !!on(c, r, s)) && (o[l] = !0, e.push({ contexts: s.currentContext, node: a })) : a.inputNames.every((c) => !!on(c, r, s)) && (o[l] = !0, e.push({ contexts: s.currentContext, node: a })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((t) => this.weightMap[t].forEach((e) => e.dispose()));
  }
  checkInputShapeAndType(t) {
    Object.keys(t).forEach((e) => {
      const s = t[e], [r] = Cn(e), o = this.graph.nodes[r];
      if (o.attrParams.shape && o.attrParams.shape.value) {
        const i = o.attrParams.shape.value, a = i.length === s.shape.length && s.shape.every((l, c) => i[c] === -1 || i[c] === l);
        k(a, () => `The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${s.shape}]`);
      }
      o.attrParams.dtype && o.attrParams.dtype.value && k(s.dtype === o.attrParams.dtype.value, () => `The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`);
    });
  }
  mapInputs(t) {
    const e = {};
    for (const s in t)
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[s] != null) {
        const r = this._signature.inputs[s];
        e[r.name] = t[s];
      } else
        e[s] = t[s];
    return e;
  }
  checkInputs(t) {
    const e = Object.keys(t).filter((s) => {
      const [r] = Cn(s);
      return this.graph.nodes[r] == null;
    });
    if (e.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`);
  }
  mapOutputs(t) {
    return t.map((e) => this._signature != null && this._signature.outputs != null && this._signature.outputs[e] != null ? this._signature.outputs[e].name : e, {});
  }
  checkOutputs(t) {
    t.forEach((e) => {
      const [s] = Cn(e);
      if (!this.graph.nodes[s])
        throw new Error(`The output '${e}' is not found in the graph`);
    });
  }
}
class Fz {
  constructor(t = {}, e = {}) {
    this.hashTableNameToHandle = t, this.hashTableMap = e;
  }
  addHashTable(t, e) {
    this.hashTableNameToHandle[t] = e.handle, this.hashTableMap[e.id] = e;
  }
  getHashTableHandleByName(t) {
    return this.hashTableNameToHandle[t];
  }
  getHashTableById(t) {
    return this.hashTableMap[t];
  }
  dispose() {
    for (const t in this.hashTableMap)
      this.hashTableMap[t].clearAndClose(), delete this.hashTableMap[t];
    for (const t in this.hashTableNameToHandle)
      this.hashTableNameToHandle[t].dispose(), delete this.hashTableNameToHandle[t];
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Oz = "?tfjs-format=file", Az = "model.json";
class Bb {
  constructor(t, e = {}, s = Nm) {
    this.modelUrl = t, this.loadOptions = e, this.version = "n/a", this.io = s, e == null && (this.loadOptions = {}), this.resourceManager = new Fz();
  }
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  findIOHandler() {
    const t = this.modelUrl;
    if (t.load != null)
      this.handler = t;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(t, this.loadOptions);
    else {
      const e = this.io.getLoadHandlers(t, this.loadOptions);
      if (e.length === 0)
        e.push(this.io.browserHTTPRequest(t, this.loadOptions));
      else if (e.length > 1)
        throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);
      this.handler = e[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const t = this.handler.load();
    return Sr(t) ? t.then((e) => this.loadSync(e)) : this.loadSync(t);
  }
  loadSync(t) {
    this.artifacts = t;
    const e = this.artifacts.modelTopology;
    let s = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const o = this.artifacts.userDefinedMetadata;
      o.signature != null && (s = o.signature), o.structuredOutputKeys != null && (this.structuredOutputKeys = o.structuredOutputKeys);
    }
    this.signature = s, this.version = `${e.versions.producer}.${e.versions.minConsumer}`;
    const r = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Pu(sx.Instance.transformGraph(e, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), this.executor.resourceManager = this.resourceManager, t.modelInitializer != null && t.modelInitializer.node != null) {
      const o = sx.Instance.transformGraph(t.modelInitializer);
      this.initializer = new Pu(o), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializer.executeAsync({}, []);
    }
    return !0;
  }
  async save(t, e) {
    if (typeof t == "string") {
      const s = this.io.getSaveHandlers(t);
      if (s.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${t}'`);
      if (s.length > 1)
        throw new Error(`Found more than one (${s.length}) save handlers for URL '${t}'`);
      t = s[0];
    }
    if (t.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return t.save(this.artifacts);
  }
  predict(t, e) {
    const s = this.execute(t, this.outputNodes);
    if (this.structuredOutputKeys) {
      const r = s instanceof Kt ? [s] : s, o = {};
      return r.forEach((i, a) => o[this.structuredOutputKeys[a]] = i), o;
    }
    return s;
  }
  normalizeInputs(t) {
    if (!(t instanceof Kt) && !Array.isArray(t))
      return t;
    if (t = Array.isArray(t) ? t : [t], t.length !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);
    return this.inputNodes.reduce((e, s, r) => (e[s] = t[r], e), {});
  }
  normalizeOutputs(t) {
    return t = t || this.outputNodes, Array.isArray(t) ? t : [t];
  }
  execute(t, e) {
    t = this.normalizeInputs(t), e = this.normalizeOutputs(e);
    const s = this.executor.execute(t, e);
    return s.length > 1 ? s : s[0];
  }
  async executeAsync(t, e) {
    t = this.normalizeInputs(t), e = this.normalizeOutputs(e);
    const s = await this.executor.executeAsync(t, e);
    return s.length > 1 ? s : s[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(t) {
    return Object.keys(t).reduce((e, s) => (e[s] = [t[s]], e), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && this.initializer.dispose(), this.resourceManager.dispose();
  }
}
async function zz(n, t = {}, e = Nm) {
  if (n == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  t == null && (t = {}), t.fromTFHub && typeof n == "string" && (n = Vz(n));
  const s = new Bb(n, t, e);
  return await s.load(), s;
}
function Wz(n) {
  if (n == null)
    throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let t;
  if (n instanceof Array) {
    const [s, r] = n;
    if (!s)
      throw new Error("modelJSON must be the first element of the array");
    if (!r || !(r instanceof ArrayBuffer))
      throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in s))
      throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in s))
      throw new Error("Model JSON is missing 'weightsManifest'");
    const o = Sm(s.weightsManifest), i = wm(s, o, r);
    t = $u(i);
  } else if ("load" in n)
    t = n;
  else if ("modelTopology" in n && "weightSpecs" in n && "weightData" in n)
    t = $u(n);
  else
    throw new Error("Unknown model format");
  const e = new Bb(t);
  return e.load(), e;
}
function Vz(n) {
  return n.endsWith("/") || (n = n + "/"), `${n}${Az}${Oz}`;
}
/** @license See the LICENSE file. */
const LS = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function Pz(n, t) {
  return Mu(n, t);
}
function Mu(n, t, e = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (n == null)
    return null;
  if (typeof Blob == "function" && n instanceof Blob)
    return n.slice();
  if (s.has(n))
    throw new Error("Circular references are not supported.");
  if (e.has(n))
    return e.get(n);
  const r = t(n);
  if (r.recurse && r.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (r.recurse)
    if (Uo(n)) {
      const o = Array.isArray(n) ? [] : {};
      s.add(n);
      for (const i in n) {
        const a = n[i], l = Mu(a, t, e, s);
        o[i] = l;
      }
      return s.delete(n), n.__proto__ && (o.__proto__ = n.__proto__), o;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else
    return e.set(n, r.value), r.value;
}
function Mz(n, t = GS) {
  return DS(n, t);
}
function DS(n, t, e = /* @__PURE__ */ new Set()) {
  const s = n[0];
  if (e.has(s))
    throw new Error("Circular references are not supported.");
  const r = t(n);
  if (r.recurse && r.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (r.recurse)
    if (Uo(s)) {
      const o = Array.isArray(s) ? [] : {};
      e.add(s);
      for (const i in s) {
        const a = n.map((c) => c[i]), l = DS(a, t, e);
        o[i] = l;
      }
      return e.delete(s), o;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else
    return r.value;
}
function GS(n) {
  return n === null ? null : Uo(n[0]) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
async function FS(n, t) {
  const e = /* @__PURE__ */ new Map();
  Mu(n, t, e);
  for (const r of Array.from(e.keys())) {
    const o = e.get(r);
    if (Sr(o)) {
      const i = await o;
      e.set(r, i);
    }
  }
  return Mu(n, t, e);
}
function Uo(n) {
  let t = !1;
  if (K().get("IS_BROWSER"))
    t = n instanceof TextDecoder;
  else {
    const { StringDecoder: e } = require("string_decoder");
    t = n instanceof e;
  }
  return n != null && !ArrayBuffer.isView(n) && (Array.isArray(n) || typeof n == "object" && !(n instanceof Kt) && !(n instanceof Promise) && !t);
}
function Xz(n) {
  return n == null || _z(n) || Array.isArray(n) || typeof n == "object" && n instanceof Kt || Be(n);
}
function _z(n) {
  return n === null || typeof n != "object" && typeof n != "function";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function Kz(n) {
  return Pz(n, Zz);
}
function Zz(n) {
  return n instanceof Kt ? { value: n.clone(), recurse: !1 } : Uo(n) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class OS {
  constructor(t) {
    if (this.capacity = t, this.begin = 0, this.end = 0, t == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (t < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(t), this.doubledCapacity = 2 * t;
  }
  wrap(t) {
    for (; t < 0; )
      t += this.doubledCapacity;
    return t % this.doubledCapacity;
  }
  get(t) {
    if (t < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[t % this.capacity];
  }
  set(t, e) {
    if (t < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[t % this.capacity] = e;
  }
  length() {
    let t = this.end - this.begin;
    return t < 0 && (t = this.doubledCapacity + t), t;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, t), this.end = this.wrap(this.end + 1);
  }
  pushAll(t) {
    for (const e of t)
      this.push(e);
  }
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const t = this.get(this.end);
    return this.set(this.end, void 0), t;
  }
  unshift(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, t);
  }
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const t = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t;
  }
  shuffleExcise(t) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const e = this.wrap(this.begin + t), s = this.get(e);
    return this.set(e, this.pop()), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class wp extends OS {
  constructor() {
    super(wp.INITIAL_CAPACITY);
  }
  isFull() {
    return !1;
  }
  push(t) {
    super.isFull() && this.expand(), super.push(t);
  }
  unshift(t) {
    super.isFull() && this.expand(), super.unshift(t);
  }
  expand() {
    const t = this.capacity * 2, e = new Array(t), s = this.length();
    for (let r = 0; r < s; r++)
      e[r] = this.get(this.wrap(this.begin + r));
    this.data = e, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
  }
}
wp.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function AS(n) {
  return new Uz(n);
}
function Hb(n) {
  return new Yz(n);
}
function Bz(n, t) {
  return new zS(n, t);
}
function Hz(n, t = fr.FAIL) {
  return new rW(n, t);
}
class Xe {
  async toArray() {
    const t = [];
    let e = await this.next();
    for (; !e.done; )
      t.push(e.value), e = await this.next();
    return t;
  }
  async toArrayForTest() {
    const t = this.prefetch(100), e = [];
    let s = await t.next();
    for (; !s.done; )
      e.push(s.value), s = await t.next();
    return e;
  }
  async resolveFully() {
    let t = await this.next();
    for (; !t.done; )
      t = await this.next();
  }
  async resolveWhile(t) {
    let e = await this.next(), s = t(e.value);
    for (; !e.done && s; )
      e = await this.next(), s = t(e.value);
  }
  handleErrors(t) {
    return new nW(this, t);
  }
  filter(t) {
    return new tW(this, t);
  }
  map(t) {
    return new eW(this, t);
  }
  mapAsync(t) {
    return new ux(this, t);
  }
  serialMapAsync(t) {
    return new ux(this, t).serial();
  }
  flatmap(t) {
    return new sW(this, t);
  }
  async forEachAsync(t) {
    return this.map(t).resolveFully();
  }
  async serialForEach(t) {
    return this.serialMapAsync(t).resolveWhile((e) => e === !0);
  }
  rowMajorBatch(t, e = !0) {
    return new qz(this, t, e);
  }
  columnMajorBatch(t, e = !0, s = GS) {
    return this.rowMajorBatch(t, e).map((o) => Mz(o, s));
  }
  concatenate(t, e) {
    return new zS(AS([this, t]), e);
  }
  take(t) {
    return t < 0 || t == null ? this : new Qz(this, t);
  }
  skip(t) {
    return t < 0 || t == null ? this : new Jz(this, t);
  }
  prefetch(t) {
    return new WS(this, t);
  }
  shuffle(t, e) {
    return new oW(this, t, e);
  }
  serial() {
    return new jz(this);
  }
}
class Uz extends Xe {
  constructor(t) {
    super(), this.items = t, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: !0 };
    const t = this.items[this.trav];
    return this.trav++, { value: Kz(t), done: !1 };
  }
}
class Yz extends Xe {
  constructor(t) {
    super(), this.nextFn = t;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (t) {
      throw t.message = `Error thrown while iterating through a dataset: ${t.message}`, t;
    }
  }
}
class jz extends Xe {
  constructor(t) {
    super(), this.upstream = t, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class Jz extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const t = await this.upstream.next();
      if (t.done)
        return t;
      Dt(t.value);
    }
    return this.upstream.next();
  }
}
class Qz extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next();
  }
}
class qz extends Xe {
  constructor(t, e, s = !0) {
    super(), this.upstream = t, this.batchSize = e, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const t = [];
    for (; t.length < this.batchSize; ) {
      const e = await this.upstream.next();
      if (e.done)
        return this.enableSmallLastBatch && t.length > 0 ? { value: t, done: !1 } : { value: null, done: !0 };
      t.push(e.value);
    }
    return { value: t, done: !1 };
  }
}
class tW extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.predicate = e, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const t = await this.upstream.next();
      if (t.done || this.predicate(t.value))
        return t;
      Dt(t.value);
    }
  }
}
class eW extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Ys(t.value), s = this.transform(t.value), r = Ys(s);
    for (const o of e)
      rd(o, r) || o.dispose();
    return { value: s, done: !1 };
  }
}
class nW extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.handler = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (t) {
        if (!this.handler(t))
          return { value: null, done: !0 };
      }
  }
}
class ux extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Ys(t.value), s = await this.transform(t.value), r = Ys(s);
    for (const o of e)
      rd(o, r) || o.dispose();
    return { value: s, done: !1 };
  }
}
class Ub extends Xe {
  constructor() {
    super(), this.outputQueue = new wp(), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: !0 };
    return { value: this.outputQueue.shift(), done: !1 };
  }
}
class sW extends Ub {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return !1;
    const e = Ys(t.value), s = this.transform(t.value), r = Ys(s);
    this.outputQueue.pushAll(s);
    for (const o of e)
      rd(o, r) || o.dispose();
    return !0;
  }
}
class zS extends Xe {
  constructor(t, e) {
    super(), this.baseErrorHandler = e, this.lastRead = null, this.iterator = null, this.moreIterators = t;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(t) {
    if (await t, this.iterator == null) {
      const s = await this.moreIterators.next();
      if (s.done)
        return { value: null, done: !0 };
      this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const e = await this.iterator.next();
    return e.done ? (this.iterator = null, this.readFromChain(t)) : e;
  }
}
var fr;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(fr || (fr = {}));
class rW extends Xe {
  constructor(t, e = fr.FAIL) {
    super(), this.iterators = t, this.mismatchMode = e, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(t) {
    await t;
    let e = 0, s = 0;
    function r(i) {
      return i instanceof Xe ? {
        value: i.next().then((l) => (e++, l.done && s++, l.value)),
        recurse: !1
      } : { value: null, recurse: !0 };
    }
    const o = await FS(this.iterators, r);
    if (e === s)
      return { value: null, done: !0 };
    if (s > 0)
      switch (this.mismatchMode) {
        case fr.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case fr.SHORTEST:
          return { value: null, done: !0 };
        case fr.LONGEST:
      }
    return this.count++, { value: o, done: !1 };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class WS extends Xe {
  constructor(t, e) {
    super(), this.upstream = t, this.bufferSize = e, this.buffer = new OS(e);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      const t = this.upstream.next();
      this.buffer.push(t);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class oW extends WS {
  constructor(t, e, s) {
    super(t, e), this.upstream = t, this.windowSize = e, this.upstreamExhausted = !1, this.random = oa.alea(s || Ze().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(t) {
    return Math.floor(this.random() * t);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const t = this.chooseIndex(), e = await this.buffer.shuffleExcise(t);
      if (e.done)
        this.upstreamExhausted = !0;
      else
        return this.refill(), e;
    }
    return { value: null, done: !0 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class pa {
  constructor() {
    this.size = null;
  }
  batch(t, e = !0) {
    const s = this;
    k(t > 0, () => `batchSize needs to be positive, but it is
      ${t}`);
    let r;
    return this.size === 1 / 0 || this.size == null ? r = this.size : e ? r = Math.ceil(this.size / t) : r = Math.floor(this.size / t), vn(async () => (await s.iterator()).columnMajorBatch(t, e, lW), r);
  }
  concatenate(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 || t.size === 1 / 0 ? s = 1 / 0 : this.size != null && t.size != null ? s = this.size + t.size : s = null, vn(async () => (await e.iterator()).concatenate(await t.iterator()), s);
  }
  filter(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 ? s = 1 / 0 : s = null, vn(async () => (await e.iterator()).filter((r) => M(() => t(r))), s);
  }
  async forEachAsync(t) {
    return (await this.iterator()).forEachAsync(t);
  }
  map(t) {
    const e = this;
    return vn(async () => (await e.iterator()).map((s) => M(() => t(s))), this.size);
  }
  mapAsync(t) {
    const e = this;
    return vn(async () => (await e.iterator()).mapAsync(t), this.size);
  }
  prefetch(t) {
    if (t == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const e = this;
    return vn(async () => (await e.iterator()).prefetch(t), this.size);
  }
  repeat(t) {
    const e = this;
    let s;
    return this.size != null && t > 0 ? s = this.size * t : t === 0 ? s = 0 : this.size != null && (t === void 0 || t < 0) ? s = 1 / 0 : s = null, vn(async () => {
      const r = Hb(async () => ({ value: await e.iterator(), done: !1 }));
      return Bz(r.take(t));
    }, s);
  }
  skip(t) {
    const e = this;
    let s;
    return this.size != null && t >= 0 && this.size >= t ? s = this.size - t : this.size != null && (this.size < t || t === void 0 || t < 0) ? s = 0 : s = null, vn(async () => (await e.iterator()).skip(t), s);
  }
  shuffle(t, e, s = !0) {
    if (t == null || t < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const r = this, o = oa.alea(e || Ze().toString());
    return vn(async () => {
      let i = o.int32();
      return s && (i += o.int32()), (await r.iterator()).shuffle(t, i.toString());
    }, this.size);
  }
  take(t) {
    const e = this;
    let s;
    return this.size != null && this.size > t ? s = t : this.size != null && this.size <= t ? s = this.size : s = null, vn(async () => (await e.iterator()).take(t), s);
  }
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
pa.MAX_BUFFER_SIZE = 1e4;
function vn(n, t = null) {
  return new class extends pa {
    constructor() {
      super(...arguments), this.size = t;
    }
    async iterator() {
      return n();
    }
  }();
}
function iW(n) {
  return vn(async () => AS(n), n.length);
}
function aW(n) {
  if (!Uo(n))
    throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(n))
    for (let e = 0; e < n.length; e++)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  else if (n instanceof Object)
    for (const e in n)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  return vn(async () => {
    const e = await FS(n, (s) => {
      if (s instanceof pa)
        return { value: s.iterator(), recurse: !1 };
      if (Uo(s))
        return { value: null, recurse: !0 };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return Hz(e, fr.SHORTEST);
  }, t);
}
function lW(n) {
  if (n === null)
    return null;
  const t = n[0];
  return Xz(t) ? { value: cW(n), recurse: !1 } : { value: null, recurse: !0 };
}
function cW(n) {
  if (n.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return n[0] instanceof Kt ? yn(n) : ge(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class VS extends pa {
  constructor(t) {
    super(), this.input = t;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((r) => (r.endsWith("\r") && (r = r.slice(0, -1)), r));
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
const tu = '"', Na = Symbol("out"), hx = Symbol("field"), eu = Symbol("quote"), Vp = Symbol("quoteafterquote"), dx = Symbol("quoteinquote");
class PS extends pa {
  constructor(t, e) {
    super(), this.input = t, this.hasHeader = !0, this.fullColumnNames = null, this.columnNamesValidated = !1, this.columnConfigs = null, this.configuredColumnsOnly = !1, this.delimiter = ",", this.delimWhitespace = !1, this.base = new VS(t), e || (e = {}), this.hasHeader = e.hasHeader !== !1, this.fullColumnNames = e.columnNames, this.columnConfigs = e.columnConfigs, this.configuredColumnsOnly = e.configuredColumnsOnly, e.delimWhitespace ? (k(e.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = !0, this.delimiter = " ") : this.delimiter = e.delimiter ? e.delimiter : ",";
  }
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    const t = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !t)
      throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && t && k(t.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + t.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = t);
    const e = this.fullColumnNames.reduce((r, o) => (r[o] = r[o] + 1 || 1, r), {}), s = Object.keys(e).filter((r) => e[r] > 1);
    if (k(s.length === 0, () => "Duplicate column names found: " + s.toString()), this.columnConfigs) {
      for (const r of Object.keys(this.columnConfigs))
        if (this.fullColumnNames.indexOf(r) === -1)
          throw new Error('The key "' + r + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = !0;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      const e = await (await this.base.iterator()).next();
      if (e.done)
        throw new Error("No data was found for CSV parsing.");
      const s = e.value;
      return this.parseRow(s, !1);
    } else
      return null;
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let t = await this.base.iterator();
    return this.hasHeader && (t = t.skip(1)), t.map((e) => this.makeDataElement(e));
  }
  makeDataElement(t) {
    const e = this.parseRow(t), s = {}, r = {};
    for (let o = 0; o < this.fullColumnNames.length; o++) {
      const i = this.fullColumnNames[o], a = this.columnConfigs ? this.columnConfigs[i] : null;
      if (!(this.configuredColumnsOnly && !a)) {
        const l = e[o];
        let c = null;
        if (l === "")
          if (a && a.default !== void 0)
            c = a.default;
          else {
            if (a && (a.required || a.isLabel))
              throw new Error(`Required column ${i} is empty in this line: ${t}`);
            c = void 0;
          }
        else {
          const u = Number(l);
          if (isNaN(u))
            a && a.dtype === "bool" ? c = this.getBoolean(l) : c = l;
          else if (!a || !a.dtype)
            c = u;
          else
            switch (a.dtype) {
              case "float32":
                c = u;
                break;
              case "int32":
                c = Math.floor(u);
                break;
              case "bool":
                c = this.getBoolean(l);
                break;
              default:
                c = u;
            }
        }
        a && a.isLabel ? r[i] = c : s[i] = c;
      }
    }
    return Object.keys(r).length === 0 ? s : { xs: s, ys: r };
  }
  getBoolean(t) {
    return t === "1" || t.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(t, e = !0) {
    const s = [];
    let r = 0;
    const o = t.length;
    let i = Na;
    for (let a = 0; a < o; a++)
      switch (i) {
        case Na:
          switch (t.charAt(a)) {
            case tu:
              r = a + 1, i = eu;
              break;
            case this.delimiter:
              if (r = a + 1, this.delimiter === " " && this.delimWhitespace)
                break;
              s.push(""), i = Na;
              break;
            default:
              i = hx, r = a;
              break;
          }
          break;
        case hx:
          switch (t.charAt(a)) {
            case this.delimiter:
              s.push(t.substring(r, a)), i = Na, r = a + 1;
              break;
          }
          break;
        case eu:
          switch (t.charAt(a)) {
            case tu:
              i = Vp;
              break;
          }
          break;
        case Vp:
          switch (t.charAt(a)) {
            case this.delimiter:
              s.push(t.substring(r, a - 1)), i = Na, r = a + 1;
              break;
            case tu:
              i = eu;
              break;
            default:
              i = dx;
              break;
          }
          break;
        case dx:
          switch (t.charAt(a)) {
            case tu:
              i = eu;
              break;
          }
          break;
      }
    if (i === Vp ? s.push(t.substring(r, o - 1)) : s.push(t.substring(r)), e && s.length !== this.fullColumnNames.length)
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);
    return s;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class Yb extends Xe {
  constructor(t) {
    super(), this.microphoneConfig = t, this.isClosed = !1, this.fftSize = t.fftSize || 1024;
    const e = Math.log2(this.fftSize);
    if (this.fftSize < 0 || e < 4 || e > 14 || !Number.isInteger(e))
      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = t.numFramesPerSpectrogram || 43, this.sampleRateHz = t.sampleRateHz, this.columnTruncateLength = t.columnTruncateLength || this.fftSize, this.audioTrackConstraints = t.audioTrackConstraints, this.smoothingTimeConstant = t.smoothingTimeConstant || 0, this.includeSpectrogram = t.includeSpectrogram !== !1, this.includeWaveform = t.includeWaveform === !0, !this.includeSpectrogram && !this.includeWaveform)
      throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(t = {}) {
    if (!K().get("IS_BROWSER"))
      throw new Error("microphone API is only supported in browser environment.");
    const e = new Yb(t);
    return await e.start(), e;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        audio: this.audioTrackConstraints == null ? !0 : this.audioTrackConstraints,
        video: !1
      });
    } catch (s) {
      throw new Error(`Error thrown while initializing video stream: ${s.message}`);
    }
    if (!this.stream)
      throw new Error("Could not obtain audio from microphone.");
    const t = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new t(), !this.sampleRateHz)
      this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz)
      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    const e = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, e.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let t, e;
    const s = await this.getAudioData();
    if (this.includeSpectrogram) {
      const r = this.flattenQueue(s.freqDataQueue);
      t = this.getTensorFromAudioDataArray(r, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      const r = this.flattenQueue(s.timeDataQueue);
      e = this.getTensorFromAudioDataArray(r, [this.numFrames * this.fftSize, 1]);
    }
    return {
      value: { spectrogram: t, waveform: e },
      done: !1
    };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    const t = [], e = [];
    let s = 0;
    return new Promise((r) => {
      const o = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({ freqDataQueue: t, timeDataQueue: e }), t.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), e.push(this.timeData.slice())), ++s === this.numFrames && (clearInterval(o), r({ freqDataQueue: t, timeDataQueue: e }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = !0, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(t) {
    const e = t[0].length, s = new Float32Array(t.length * e);
    return t.forEach((r, o) => s.set(r, o * e)), s;
  }
  getTensorFromAudioDataArray(t, e) {
    const s = new Float32Array(H(e));
    return s.set(t, s.length - t.length), ge(s, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class jb extends Xe {
  constructor(t, e) {
    if (super(), this.webcamVideoElement = t, this.webcamConfig = e, this.isClosed = !0, this.resize = !1, this.needToResize())
      if (this.resize = !0, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = qe([0], "int32"), this.webcamConfig.centerCrop) {
        const s = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, o = (1 - s) / 2, i = (1 - r) / 2, a = o + s, l = r + i;
        this.cropBox = yr([i, o, l, a], [1, 4]);
      } else
        this.cropBox = yr([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(t, e = {}) {
    if (!K().get("IS_BROWSER"))
      throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!t) {
      if (t = document.createElement("video"), !e.resizeWidth || !e.resizeHeight)
        throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      t.width = e.resizeWidth, t.height = e.resizeHeight;
    }
    const s = new jb(t, e);
    return await s.start(), s;
  }
  async start() {
    this.webcamConfig.facingMode && k(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        video: {
          deviceId: this.webcamConfig.deviceId,
          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user",
          width: this.webcamVideoElement.width,
          height: this.webcamVideoElement.height
        }
      });
    } catch (t) {
      throw t.message = `Error thrown while initializing video stream: ${t.message}`, t;
    }
    if (!this.stream)
      throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = !1, new Promise((t) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        t();
      };
    });
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let t;
    try {
      t = Rm(this.webcamVideoElement);
    } catch (e) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);
    }
    if (this.resize)
      try {
        return { value: this.cropAndResizeFrame(t), done: !1 };
      } catch (e) {
        throw new Error(`Error thrown cropping the video: ${e.message}`);
      } finally {
        t.dispose();
      }
    else
      return { value: t, done: !1 };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(t) {
    return M(() => {
      const e = pn(ut(t, "float32"), 0);
      let s;
      s = Hr.cropAndResize(e, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      const r = s.shape;
      return W(s, r.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((e) => e.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = null;
    }
    this.isClosed = !0;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class MS {
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class XS extends Xe {
  split(t) {
    return new uW(this, t);
  }
}
class uW extends XS {
  constructor(t, e) {
    super(), this.upstream = t, this.impl = new hW(t, e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class hW extends Ub {
  constructor(t, e) {
    super(), this.upstream = t, this.separator = e, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return this.carryover === "" ? !1 : (this.outputQueue.push(this.carryover), this.carryover = "", !0);
    const e = t.value.split(this.separator);
    e[0] = this.carryover + e[0];
    for (const s of e.slice(0, -1))
      this.outputQueue.push(s);
    return this.carryover = e[e.length - 1], !0;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class dW extends Xe {
  decodeUTF8() {
    return new pW(this);
  }
}
class pW extends XS {
  constructor(t) {
    super(), this.upstream = t, this.impl = new fW(t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class fW extends Ub {
  constructor(t) {
    if (super(), this.upstream = t, K().get("IS_BROWSER"))
      this.decoder = new TextDecoder("utf-8");
    else {
      const { StringDecoder: e } = require("string_decoder");
      this.decoder = new e("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    const t = await this.upstream.next();
    let e;
    if (t.done)
      return !1;
    e = t.value;
    let s;
    return K().get("IS_BROWSER") ? s = this.decoder.decode(e, { stream: !0 }) : s = this.decoder.write(Buffer.from(e.buffer)), this.outputQueue.push(s), !0;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class _S extends dW {
  constructor(t, e = {}) {
    super(), this.file = t, this.options = e, k(t instanceof Uint8Array || (K().get("IS_BROWSER") ? t instanceof File || t instanceof Blob : !1), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = e.offset || 0, this.chunkSize = e.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: !0 } : { value: await new Promise((e, s) => {
      const r = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array)
        e(new Uint8Array(this.file.slice(this.offset, r)));
      else {
        const o = new FileReader();
        o.onload = (a) => {
          let l = o.result;
          if (l instanceof ArrayBuffer && (l = new Uint8Array(l)), !(l instanceof Uint8Array))
            return s(new TypeError("FileReader returned unknown type."));
          e(l);
        }, o.onabort = (a) => s(new Error("Aborted")), o.onerror = (a) => s(new Error(a.type));
        const i = this.file.slice(this.offset, r);
        o.readAsArrayBuffer(i);
      }
      this.offset = r;
    }), done: !1 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
async function mW(n, t = {}, e) {
  let s, r;
  typeof n == "string" ? s = n : (s = n.url, r = gW(n));
  const o = await (e || x1)(s, r);
  if (o.ok) {
    const i = new Uint8Array(await o.arrayBuffer());
    return new _S(i, t);
  } else
    throw new Error(o.statusText);
}
const gW = (n) => ({
  method: n.method,
  headers: n.headers,
  body: n.body,
  mode: n.mode,
  credentials: n.credentials,
  cache: n.cache,
  redirect: n.redirect,
  referrer: n.referrer,
  integrity: n.integrity
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function KS(n) {
  return typeof n == "string" && n.slice(0, 7) === "file://";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ZS extends MS {
  constructor(t, e = {}) {
    super(), this.input = t, this.options = e;
  }
  async iterator() {
    if (KS(this.input) && K().get("IS_NODE")) {
      const t = require("fs");
      this.input = t.readFileSync(this.input.slice(7));
    }
    return new _S(this.input, this.options);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class BS extends MS {
  constructor(t, e = {}) {
    super(), this.url = t, this.fileOptions = e;
  }
  async iterator() {
    return KS(this.url) ? new ZS(this.url, this.fileOptions).iterator() : mW(this.url, this.fileOptions);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function yW(n, t = {}) {
  return new PS(new BS(n), t);
}
function bW(n) {
  const t = Hb(n);
  return vn(async () => t);
}
function xW(n) {
  return vn(async () => {
    const t = await n();
    return Hb(() => t.next());
  });
}
async function wW(n, t) {
  return jb.create(n, t);
}
async function IW(n) {
  return Yb.create(n);
}
/** @license See the LICENSE file. */
const HS = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SW = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  array: iW,
  Dataset: pa,
  zip: aW,
  CSVDataset: PS,
  TextLineDataset: VS,
  csv: yW,
  func: bW,
  generator: xW,
  microphone: IW,
  webcam: wW,
  FileDataSource: ZS,
  URLDataSource: BS,
  version_data: HS
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wt(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && k(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vW = Ad;
class Ip extends Qu {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new rm(this, oe());
  }
  nextDataId() {
    return Ip.nextDataId++;
  }
  write(t, e, s) {
    this.firstUse && (this.firstUse = !1, K().get("IS_NODE") && Vn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const r = { id: this.nextDataId() };
    return this.data.set(r, { values: t, dtype: s, refCount: 1 }), r;
  }
  makeTensorInfo(t, e, s) {
    let r;
    if (e === "string" && s != null && s.length > 0 && Ls(s[0])) {
      const o = s.map((i) => Kn(i));
      r = this.write(o, t, e);
    } else
      r = this.write(s, t, e);
    return { dataId: r, shape: t, dtype: e };
  }
  refCount(t) {
    return this.data.has(t) ? this.data.get(t).refCount : 0;
  }
  incRef(t) {
    const e = this.data.get(t);
    e.refCount++;
  }
  decRef(t) {
    if (this.data.has(t)) {
      const e = this.data.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, r, o) {
    this.data.set(t, { values: e, dtype: r, refCount: o });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t) {
    return this.readSync(t);
  }
  readSync(t) {
    const { dtype: e, complexTensorInfos: s } = this.data.get(t);
    if (e === "complex64") {
      const r = this.readSync(s.real.dataId), o = this.readSync(s.imag.dataId);
      return tr(r, o);
    }
    return this.data.get(t).values;
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((r) => Us(r));
        return $t(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return $t(t.shape, t.dtype, e);
  }
  makeOutput(t, e, s) {
    return oe().makeTensorFromTensorInfo(this.makeTensorInfo(e, s, t), this);
  }
  disposeData(t, e = !1) {
    if (this.data.has(t)) {
      if (this.data.get(t).refCount--, !e && this.data.get(t).refCount > 0)
        return !1;
      const { complexTensorInfos: s } = this.data.get(t);
      s != null && (this.disposeData(s.real.dataId, !0), this.disposeData(s.imag.dataId, !0)), this.data.delete(t);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  async time(t) {
    const e = Ze();
    return t(), { kernelMs: Ze() - e };
  }
  memory() {
    return {
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(t) {
    wt([t], "where");
    const e = this.readSync(t.dataId);
    return vW(t.shape, e);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
}
Ip.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CW(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
const kW = (n) => {
  const { x: t } = n.inputs, e = n.backend;
  wt(t, "abs");
  let s = new Float32Array(H(t.shape));
  const r = e.data.get(t.dataId).values;
  return s = CW(r), e.makeOutput(s, t.shape, t.dtype);
}, NW = {
  kernelName: sl,
  backendName: "cpu",
  kernelFunc: kW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function De(n) {
  return (t, e, s, r, o) => {
    const i = Et(t, e), a = i.length, l = xt(i), c = H(i), u = ue(o, c), h = t.length, d = e.length, p = xt(t), f = xt(e), m = Js(t, i), g = Js(e, i);
    if (m.length + g.length === 0)
      for (let y = 0; y < u.length; ++y)
        u[y] = n(s[y % s.length], r[y % r.length]);
    else
      for (let y = 0; y < u.length; ++y) {
        const b = Ws(y, a, l), w = b.slice(-h);
        m.forEach((T) => w[T] = 0);
        const x = Rn(w, h, p), S = b.slice(-d);
        g.forEach((T) => S[T] = 0);
        const v = Rn(S, d, f);
        u[y] = n(s[x], r[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nn(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: r } = t, o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, a = e.makeTensorInfo(s.shape, "complex64"), l = e.data.get(a.dataId);
  return l.complexTensorInfos = {
    real: e.makeTensorInfo(s.shape, "float32", o),
    imag: e.makeTensorInfo(r.shape, "float32", i)
  }, a;
}
const TW = {
  kernelName: ah,
  backendName: "cpu",
  kernelFunc: Nn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xu(n, t, e = "float32") {
  if (e === "complex64") {
    const r = Xu(n, t, "float32"), o = Xu(n, t, "float32");
    return Nn({ inputs: { real: r, imag: o }, backend: n });
  }
  const s = Ie(H(t), e);
  return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zs(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const $W = {
  kernelName: Si,
  backendName: "cpu",
  kernelFunc: zs
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uo(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.data.get(s.dataId).complexTensorInfos.real, o = e.data.get(r.dataId).values;
  return e.makeTensorInfo(r.shape, r.dtype, o);
}
const RW = {
  kernelName: Wh,
  backendName: "cpu",
  kernelFunc: uo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EW(n, t, e, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [t, "int32", r];
  }
  if (s === "bool") {
    const r = sr([0], e), [o, i] = De((a, l) => a !== l ? 1 : 0)(t, [], n, r, "bool");
    return [i, "bool", o];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function $r(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return zs({ inputs: { x: r }, backend: e });
    const u = Xu(e, r.shape, r.dtype), h = $r({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } }), d = Nn({ inputs: { real: h, imag: u }, backend: e });
    return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), d;
  }
  if (r.dtype === "complex64") {
    const u = uo({ inputs: { input: r }, backend: e }), h = $r({ inputs: { x: u }, backend: e, attrs: { dtype: o } });
    return e.disposeIntermediateTensorInfo(u), h;
  }
  if (!am(r.dtype, o)) {
    const u = zs({ inputs: { x: r }, backend: e });
    return { dataId: u.dataId, shape: u.shape, dtype: o };
  }
  const i = e.data.get(r.dataId).values, [a, l, c] = EW(i, r.shape, r.dtype, o);
  return e.makeTensorInfo(a, l, c);
}
const LW = {
  kernelName: ci,
  backendName: "cpu",
  kernelFunc: $r
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ke(n, t, e, s) {
  return e == null ? ({ inputs: r, backend: o }) => {
    const { a: i, b: a } = r, l = o;
    wt([i, a], n);
    const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = i.dtype === "string" ? er(c) : c, d = i.dtype === "string" ? er(u) : u, p = s || i.dtype, [f, m] = t(i.shape, a.shape, h, d, p);
    return l.makeTensorInfo(m, p, f);
  } : ({ inputs: r, backend: o }) => {
    const { a: i, b: a } = r, l = o;
    if (i.dtype === "complex64" || a.dtype === "complex64") {
      const c = $r({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), u = l.data.get(c.dataId), h = u.complexTensorInfos.real, d = u.complexTensorInfos.imag, p = l.data.get(h.dataId).values, f = l.data.get(d.dataId).values, m = $r({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(m.dataId), y = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, w = l.data.get(y.dataId).values, x = l.data.get(b.dataId).values, [S, v, T] = e(i.shape, a.shape, p, f, w, x), $ = l.makeTensorInfo(T, "float32", S), R = l.makeTensorInfo(T, "float32", v), E = Nn({ inputs: { real: $, imag: R }, backend: l });
      return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(m), l.disposeIntermediateTensorInfo($), l.disposeIntermediateTensorInfo(R), E;
    } else {
      const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = s || i.dtype, [d, p] = t(i.shape, a.shape, c, u, h);
      return l.makeTensorInfo(p, h, d);
    }
  };
}
function Jb(n) {
  return (t, e, s, r, o, i) => {
    const a = Et(t, e), l = H(a), c = a.length, u = xt(a), h = ue("float32", l), d = ue("float32", l), p = Js(t, a), f = Js(e, a), m = tr(s, r), g = tr(o, i), y = t.length, b = xt(t), w = e.length, x = xt(e);
    if (p.length + f.length === 0)
      for (let S = 0; S < h.length; S++) {
        const v = S % m.length, T = S % g.length, $ = n(m[v * 2], m[v * 2 + 1], g[T * 2], g[T * 2 + 1]);
        h[S] = $.real, d[S] = $.imag;
      }
    else
      for (let S = 0; S < h.length; S++) {
        const v = Ws(S, c, u), T = v.slice(-y);
        p.forEach((X) => T[X] = 0);
        const $ = Rn(T, y, b), R = v.slice(-w);
        f.forEach((X) => R[X] = 0);
        const E = Rn(R, w, x), V = n(m[$ * 2], m[$ * 2 + 1], g[E * 2], g[E * 2 + 1]);
        h[S] = V.real, d[S] = V.imag;
      }
    return [h, d, a];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DW = De((n, t) => n + t), GW = Jb((n, t, e, s) => ({ real: n + e, imag: t + s })), Yo = Ke(mo, DW, GW), FW = {
  kernelName: mo,
  backendName: "cpu",
  kernelFunc: Yo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function US(n, t, e, s, r) {
  const o = H(s), i = Ie(r, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= r || (o > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function OW(n, t, e, s = !1) {
  const r = n.shape[0], o = n.shape[1], i = $t([r, e], t.dtype);
  for (let a = 0; a < r; a++)
    for (let l = 0; l < o; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fa(n) {
  return (t, e, s) => {
    const r = ue(e, t.length);
    for (let o = 0; o < t.length; ++o)
      r[o] = n(t[o], s);
    return r;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jt(n, t, e) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: i } = s;
    if (wt(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = o, l = a.data.get(i.dataId).values, c = H(i.shape), u = e || i.dtype, h = Bt(u, c);
    for (let d = 0; d < c; ++d)
      h[d] = t(l[d], r);
    return a.makeTensorInfo(i.shape, u, h);
  };
}
function ma(n, t, e) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: i } = s;
    if (wt(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = o, l = a.data.get(i.dataId).values, c = e || i.dtype, u = t(l, c, r);
    return a.makeTensorInfo(i.shape, c, u);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AW = fa((n) => Math.ceil(n)), zW = ma(ui, AW), WW = {
  kernelName: ui,
  backendName: "cpu",
  kernelFunc: zW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VW(n, t, e, s) {
  const r = Bt(e, H(t));
  if (s && e !== "string") {
    let o = 0;
    n.forEach((i) => {
      const a = H(i.shape);
      r.set(i.vals, o), o += a;
    });
  } else {
    let o = 0;
    n.forEach((i) => {
      const a = e === "string" ? er(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + o;
        for (let h = 0; h < i.shape[1]; ++h)
          r[u + h] = a[l++];
      }
      o += i.shape[1];
    });
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PW = De((n, t) => n === t ? 1 : 0), YS = Ke(xl, PW, null, "bool"), MW = {
  kernelName: xl,
  backendName: "cpu",
  kernelFunc: YS
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XW = fa((n) => Math.exp(n)), jS = ma(yi, XW, "float32"), _W = {
  kernelName: yi,
  backendName: "cpu",
  kernelFunc: jS
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KW = fa((n) => Math.expm1(n)), ZW = ma(bi, KW), BW = {
  kernelName: bi,
  backendName: "cpu",
  kernelFunc: ZW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HW = fa((n) => Math.floor(n)), UW = ma(xi, HW), YW = {
  kernelName: xi,
  backendName: "cpu",
  kernelFunc: UW
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jW(n, t, e, s, r, o, i, a, l) {
  const c = $t([s, o], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < r; p++) {
      const f = n[u * r + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / o)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < o; p++)
      c.values[u * o + p] = t.get(...t.indexToLoc(d * o + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JW(n, t, e) {
  const s = $t(e, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const i = s.indexToLoc(r).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QW = De((n, t) => n > t ? 1 : 0), qW = Ke(vl, QW, null, "bool"), tV = {
  kernelName: vl,
  backendName: "cpu",
  kernelFunc: qW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eV = De((n, t) => n >= t ? 1 : 0), nV = Ke(Ii, eV, null, "bool"), sV = {
  kernelName: Ii,
  backendName: "cpu",
  kernelFunc: nV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rV = De((n, t) => n < t ? 1 : 0), oV = Ke(kl, rV, null, "bool"), iV = {
  kernelName: kl,
  backendName: "cpu",
  kernelFunc: oV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aV = De((n, t) => n <= t ? 1 : 0), lV = Ke(Nl, aV, null, "bool"), cV = {
  kernelName: Nl,
  backendName: "cpu",
  kernelFunc: lV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uV(n, t, e) {
  const s = (t - n) / (e - 1), r = Ie(e, "float32");
  r[0] = n;
  for (let o = 1; o < r.length; o++)
    r[o] = r[o - 1] + s;
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hV = fa((n) => Math.log(n)), dV = ma(Ni, hV), pV = {
  kernelName: Ni,
  backendName: "cpu",
  kernelFunc: dV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fV(n, t, e, s) {
  const r = ue(s, H(e));
  for (let o = 0; o < r.length; ++o) {
    const i = o * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    r[o] = a;
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mV = De((n, t) => Math.max(n, t)), gV = Ke($i, mV), yV = {
  kernelName: $i,
  backendName: "cpu",
  kernelFunc: gV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bV = De((n, t) => Math.min(n, t)), xV = Ke(Ri, bV), wV = {
  kernelName: Ri,
  backendName: "cpu",
  kernelFunc: xV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JS = De((n, t) => n * t), IV = Jb((n, t, e, s) => ({
  real: n * e - t * s,
  imag: n * s + t * e
})), Sp = Ke(Li, JS, IV), SV = {
  kernelName: Li,
  backendName: "cpu",
  kernelFunc: Sp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vV(n, t, e) {
  const s = Vs(-1, e);
  return JS([], t, s, n, e);
}
function CV(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  wt(s, "neg");
  const r = e.data.get(s.dataId).values, [o, i] = vV(r, s.shape, s.dtype);
  return e.makeTensorInfo(i, s.dtype, o);
}
const kV = {
  kernelName: zl,
  backendName: "cpu",
  kernelFunc: CV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NV = De((n, t) => n !== t ? 1 : 0), TV = Ke(Wl, NV, null, "bool"), $V = {
  kernelName: Wl,
  backendName: "cpu",
  kernelFunc: TV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QS(n, t, e, s, r) {
  const o = t.length, i = H(t), a = xt(t), l = xt(r), c = ue(e, H(r));
  for (let u = 0; u < i; ++u) {
    const h = Ws(u, o, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = Rn(d, o, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xn(n) {
  const { inputs: t, attrs: e, backend: s } = n, { x: r } = t, { perm: o } = e;
  wt(r, "transpose");
  const i = r.shape.length, a = new Array(i);
  for (let h = 0; h < a.length; h++)
    a[h] = r.shape[o[h]];
  const l = s.data.get(r.dataId).values, c = QS(l, r.shape, r.dtype, o, a);
  return { dataId: s.write(c, a, r.dtype), shape: a, dtype: r.dtype };
}
const RV = {
  kernelName: jr,
  backendName: "cpu",
  kernelFunc: xn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EV(n, t, e, s) {
  const [r, o] = ze(n, s), i = ln(t, "int32"), a = Ie(H(r), i), l = H(o);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: r, outDtype: i };
}
function LV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  wt(r, "prod");
  const a = r.shape.length, l = At(o, r.shape), c = we(l, a);
  let u = l, h = r;
  const d = [];
  c != null && (h = xn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), d.push(h), u = Ne(u.length, a));
  const p = e.data.get(h.dataId).values, { outVals: f, outShape: m, outDtype: g } = EV(h.shape, h.dtype, p, u);
  let y = m;
  return i && (y = ke(m, l)), d.forEach((b) => e.disposeIntermediateTensorInfo(b)), e.makeTensorInfo(y, g, f);
}
const DV = {
  kernelName: Kl,
  backendName: "cpu",
  kernelFunc: LV
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GV(n, t, e) {
  n.forEach((s, r) => {
    if (s < 0 || s >= e) {
      const o = Ws(r, t.length, xt(t)).join(",");
      throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`);
    }
  });
}
function FV(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], r = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r)
      throw new Error("Ragged splits must not point past values");
    for (let o = 1; o < s.length; ++o)
      if (s[o - 1] > s[o])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function OV(n, t, e, s) {
  const r = [];
  let o = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  FV(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const m = a[f], g = m[m.length - 1] - p[u];
        for (let y = u; y < h; ++y)
          a[f].push(p[y + 1] + g);
      }
      u = p[u], h = p[h];
    }
    h !== u && (r.push([u, h]), o += h - u);
  }
  return { outSplits: a, valueSlices: r, numValues: o };
}
function AV(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, r = Bt("int32", s);
    t.push(r), n[e].forEach((o, i) => r[i] = o);
  }
  return t;
}
function px(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function zV(n, t, e, s, r, o) {
  const i = px(t, 2)[1], a = px(o, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        r[l * a + h] = n[u * i + h];
      ++l;
    }
}
function WV(n, t, e, s, r) {
  const o = t.slice();
  o[0] = r;
  const i = Bt(e, H(o)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return zV(n, t, s, l, i, o), [i, o];
}
function VV(n, t, e, s, r, o, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (GV(o, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = OV(o, i, n, c), p = AV(u), f = WV(e, s, r, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Yn = qn;
class _u {
  constructor(t, e, s, r, o, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Pg(u), this.raggedRank = Mg(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === Yn.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === Yn.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case Yn.VALUE_ROWIDS:
        return _u.getMaxWidthValueRowID(e);
      case Yn.ROW_SPLITS:
        return _u.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${Yn[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let r = 0; r < e - 1; ++r) {
      const o = t[r + 1] - t[r];
      o > s && (s = o);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, r = t[0], o = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== r && (r = a, o = Math.max(i - s, o), s = i);
    }
    return Math.max(e - s, o);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return mx(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    Xg(s, e);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = Vg(this.raggedRank, r, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  calculateFirstParentOutputIndex(t, e, s) {
    const r = Math.min(t, s), o = [];
    let i = 0;
    for (let a = 0; a < r; ++a, i += e)
      o.push(i);
    for (let a = r; a < t; ++a)
      o.push(-1);
    return k(o.length === t, () => "Final length of result must be equal to firstDimension."), o;
  }
  calculateOutputIndexRowSplit(t, e, s, r) {
    const o = t.length, i = [];
    for (let a = 0; a < o - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(r, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (o > 0 && i.length !== t[o - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  calculateOutputIndexValueRowID(t, e, s, r) {
    const o = t.length, i = [];
    if (o === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < o; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < r ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, r) {
    const o = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case Yn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(o, e, s, r);
      case Yn.ROW_SPLITS:
        if (o.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(o, e, s, r);
      default:
        throw new Error(`Unsupported partition type: ${Yn[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case Yn.FIRST_DIM_SIZE:
        return t[0];
      case Yn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Yn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Yn[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let l = r.length - 2; l >= 0; --l)
      r[l] = r[l + 1] * s[l + 1];
    const o = mx(s, !1), i = Bt(this.valuesDType, H(o));
    if (r[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
      this.setOutput(this.raggedRank, l, i, o);
    }
    return [o, i];
  }
  setOutput(t, e, s, r) {
    if (s.length === 0)
      return;
    const o = this.values, i = s;
    let a = r.slice();
    a = a.slice(t + 1);
    const l = H(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      M(() => {
        const m = W(u, f);
        u = gr(m, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? e[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const g = o.subarray(h * l), y = i.subarray(d * l), b = (p - d) * l;
        fx(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = i.slice(p * l);
            fx(g, u, l), ++p;
          }
      m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function fx(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function mx(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function PV(n, t, e, s, r, o, i, a, l, c) {
  return new _u(n, t, e, s, r, o, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MV(n, t, e, s) {
  const r = n === t, o = n < t && e < 0, i = t < n && e > 1;
  if (r || o || i)
    return Ie(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = Ie(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XV = fa((n) => 1 / Math.sqrt(n)), _V = ma(zi, XV), KV = {
  kernelName: zi,
  backendName: "cpu",
  kernelFunc: _V
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ga(n, t, e, s, r, o, i, a, l, c) {
  const u = [s / r, r], h = n.values, d = t.values;
  if (s === 0)
    return $t(e, t.dtype);
  const p = $t(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < o; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < i; y++) {
      const b = h[f * i + y];
      m.push(b), g += b * a[y];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${e}`);
    for (let y = 0; y < r; y++)
      c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = t.rank === 0 ? d[0] : d[f * r + y];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qS = Jt(Xi, (n) => 1 / (1 + Math.exp(-n))), ZV = {
  kernelName: Xi,
  backendName: "cpu",
  kernelFunc: qS
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BV(n, t, e, s, r) {
  const o = ad(s, t, e), i = H(e), a = xt(s);
  if (o) {
    const h = ld(t, a);
    return r === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = r === "string" ? er(n) : n, c = $t(s, r, l), u = $t(e, r);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, m) => f + t[m]);
    u.set(c.get(...p), ...d);
  }
  return r === "string" ? by(u.values) : u.values;
}
function ho(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, size: i } = s;
  wt(r, "slice");
  const [a, l] = cd(r, o, i);
  Dm(r, a, l);
  const c = e.data.get(r.dataId).values, u = BV(c, a, l, r.shape, r.dtype);
  return e.makeTensorInfo(l, r.dtype, u);
}
const HV = {
  kernelName: jl,
  backendName: "cpu",
  kernelFunc: ho
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UV(n, t, e, s, r, o, i) {
  const a = t[0], l = o[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(iy(a));
    const g = Bt(e, 0), y = Bt(r, 0);
    return [
      g,
      [0, h],
      y,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < a; ++g) {
    const y = n[g * h];
    if (y < 0)
      throw new Error(ay(g, y));
    if (y >= l)
      throw new Error(ly(g, y, l));
    ++f[y], d = d && y >= p, p = y;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    const g = n, y = s;
    for (let b = 0; b < a; ++b)
      u[b] = b;
    return [
      g,
      [a, h],
      y,
      c,
      u
    ];
  } else {
    const g = f[l - 1], y = Bt(e, g * h), b = Bt(r, g), w = new Array(l).fill(0);
    for (let x = 0; x < a; ++x) {
      const S = n[x * h], v = w[S], T = (S === 0 ? 0 : f[S - 1]) + v;
      w[S]++;
      for (let $ = 0; $ < h; ++$)
        y[T * h + $] = n[x * h + $];
      b[T] = s[x], u[x] = T;
    }
    for (let x = 0; x < l; ++x)
      if (w[x] === 0) {
        const v = x === 0 ? 0 : f[x - 1];
        y[v * h + 0] = x;
        for (let T = 1; T < h; ++T)
          y[v * h + T] = 0;
        b[v] = i;
      }
    return [
      y,
      [g, h],
      b,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YV(n, t, e, s, r) {
  const o = H(s), i = t[0], a = r.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < a; ++g) {
    const y = r[g];
    if (y === -1) {
      if (u !== -1)
        throw new Error(cy(u, g));
      u = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(uy(g, y));
      c *= y, l.push(y);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(hy());
    const g = Math.trunc(o / c);
    if (c * g !== o)
      throw new Error(dy(s, l));
    l[u] = g;
  }
  if (H(l) !== o)
    throw new Error(py(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let g = a - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = Bt(e, i * a);
  for (let g = 0; g < i; ++g) {
    let y = 0;
    for (let b = 0; b < d; ++b)
      y += n[g * d + b] * p[b];
    for (let b = 0; b < a; ++b)
      m[g * a + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tv(n, t, e, s, r, o = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? r[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(Ya());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, x) => w * x, 1), f = Bt(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(Ya());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let w = 0;
    if (g < a) {
      if (w = r[g], b === w) {
        ++g;
        continue;
      }
      if (b >= w)
        throw new Error(fy());
    }
    if (b < 0 || b >= h)
      throw new Error(my(b, h));
    b > y && f.fill(i, y * c, b * c);
    for (let x = m; x < g; ++x) {
      const S = s[x];
      if (S < 0 || S >= l[0])
        throw new Error(gy(x, s[x], l[0]));
      for (let v = 0; v < c; v++)
        f[b * c + v] += n[S * c + v];
    }
    if (o)
      for (let x = 0; x < c; x++)
        f[b * c + x] /= g - m;
    if (m = g, ++g, y = b + 1, b = w, g > a)
      break;
  }
  return y < h && f.fill(i, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jV = Jt(Ki, (n) => Math.sqrt(n)), JV = {
  kernelName: Ki,
  backendName: "cpu",
  kernelFunc: jV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QV = De((n, t) => {
  const e = n - t;
  return e * e;
}), qV = Ke(Zi, QV), tP = {
  kernelName: Zi,
  backendName: "cpu",
  kernelFunc: qV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eP(n, t, e, s) {
  const r = $t(n, t.dtype);
  for (let o = 0; o < r.size; o++) {
    const i = r.indexToLoc(o), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    r.set(t.get(...a), ...i);
  }
  return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nP {
  constructor(t, e, s, r, o, i) {
    this.separator = Kn(t), this.nGramWidths = e, this.leftPad = Kn(s), this.rightPad = Kn(r), this.padWidth = o, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, r, o, i) {
    for (let a = 0; a < o; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (o - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < h; ++b)
        p += t[d + b].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[r + a] = new Uint8Array(p);
      const m = s[r + a];
      let g = 0;
      const y = (b) => b.forEach((w) => m[g++] = w);
      for (let b = 0; b < c; ++b)
        y(this.leftPad), y(this.separator);
      for (let b = 0; b < h - 1; ++b)
        y(t[d + b]), y(this.separator);
      if (h > 0) {
        y(t[d + h - 1]);
        for (let b = 0; b < u; ++b)
          y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(t, e) {
    const s = t.length, r = e.length;
    if (r > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < r; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const o = r - 1, i = Bt("int32", r);
    if (s === 0 || r === 0) {
      const l = new Array(s);
      for (let c = 0; c <= o; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= o; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[o]);
    for (let l = 0; l < o; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
}
function sP(n, t, e, s, r, o, i, a) {
  return new nP(e, s, r, o, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rP(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let o = 0; o < n.length; ++o)
      s.push(n.subarray(o, o + 1));
    return;
  }
  if (t.length === 1) {
    const o = t[0];
    let i = n.indexOf(o);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(o);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let o = 0; o < n.length + 1; o++)
    if (o === n.length || t.indexOf(n[o]) !== -1) {
      const i = n.subarray(r, o);
      (!e || i.length !== 0) && s.push(i), r = o + 1;
    }
}
function oP(n, t, e) {
  const s = n.length, r = [];
  let o = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = r.length;
    rP(n[d], t, e, r);
    const f = r.length - p;
    a[d] = f, o += f, i = Math.max(i, f);
  }
  const l = Bt("int32", o * 2), c = new Array(o), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iP(n, t) {
  const e = Bt("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = fm(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aP = De((n, t) => n - t), lP = Jb((n, t, e, s) => ({ real: n - e, imag: t - s })), Qb = Ke(Bi, aP, lP), cP = {
  kernelName: Bi,
  backendName: "cpu",
  kernelFunc: Qb
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uP(n, t) {
  const e = new Array(n.rank);
  for (let r = 0; r < e.length; r++)
    e[r] = n.shape[r] * t[r];
  const s = $t(e, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const o = s.indexToLoc(r), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = o[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[r] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fa = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function ev(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      ev(n, t, d, p);
    }
    const r = n[t];
    let o = e, i = s;
    for (kn(n, e, t), Fa(n[s], r) > 0 && kn(n, e, s); o < i; ) {
      for (kn(n, o, i), o++, i--; Fa(n[o], r) < 0; )
        o = o + 1;
      for (; Fa(n[i], r) > 0; )
        i = i - 1;
    }
    Fa(n[e], r) === 0 ? kn(n, e, i) : (i = i + 1, kn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function hP(n, t, e, s, r) {
  const o = t[t.length - 1], [i, a] = [n.length / o, o], l = ue(e, i * s), c = ue("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((b, w) => f[w] = { value: b, index: w }), s < f.length && (ev(f, s), f = f.slice(0, s)), r && f.sort(Fa);
    const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++)
      g[b] = f[b].value, y[b] = f[b].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    $t(u, e, l),
    $t(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dP(n, t, e, s) {
  const r = At(t, e)[0], o = [1, e[0], 1];
  for (let f = 0; f < r; f++)
    o[0] *= e[f];
  o[1] = e[r];
  for (let f = r + 1; f < e.length; f++)
    o[2] *= e[f];
  const i = {}, a = new Int32Array(e[r]), l = new ve(o, s, n), c = [], u = o[0] === 1 && o[2] === 1;
  for (let f = 0; f < e[r]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let y = 0; y < o[0]; y++)
        for (let b = 0; b < o[2]; b++)
          g.push(l.get(y, f, b));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      a[f] = i[m];
    else {
      const g = Object.keys(i).length;
      i[m] = g, a[f] = g, c.push(f);
    }
  }
  const h = o.slice();
  h[1] = Object.keys(i).length;
  const d = new ve(h, s);
  c.forEach((f, m) => {
    for (let g = 0; g < o[0]; g++)
      for (let y = 0; y < o[2]; y++)
        d.set(l.get(g, f, y), g, m, y);
  });
  const p = e.slice();
  return p[r] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/** @license See the LICENSE file. */
const pP = "3.21.0";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Tm("cpu", () => new Ip(), 1);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nv = Jt(mi, (n) => n >= 0 ? n : Math.exp(n) - 1), fP = {
  kernelName: mi,
  backendName: "cpu",
  kernelFunc: nv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { alpha: o } = s;
  wt([r], "leakyRelu");
  const i = H(r.shape), a = e.data.get(r.dataId).values, l = ue("float32", i);
  for (let c = 0; c < a.length; c++)
    l[c] = a[c] < 0 ? o * a[c] : a[c];
  return e.makeTensorInfo(r.shape, "float32", l);
}
const mP = {
  kernelName: Cl,
  backendName: "cpu",
  kernelFunc: sv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gP = De((n, t) => n < 0 ? t * n : n);
function rv(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: r } = t;
  wt([s, r], "prelu");
  const o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, [a, l] = gP(s.shape, r.shape, o, i, "float32");
  return e.makeTensorInfo(l, "float32", a);
}
const yP = {
  kernelName: _l,
  backendName: "cpu",
  kernelFunc: rv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ov = Jt(Fi, (n) => Math.max(0, n)), bP = {
  kernelName: Fi,
  backendName: "cpu",
  kernelFunc: ov
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iv = Jt(Oi, (n) => Math.min(Math.max(0, n), 6)), xP = {
  kernelName: Oi,
  backendName: "cpu",
  kernelFunc: iv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ku(n, t, e, s, r) {
  if (e === "linear")
    return zs({ inputs: { x: t }, backend: n });
  if (e === "relu")
    return ov({ inputs: { x: t }, backend: n });
  if (e === "elu")
    return nv({ inputs: { x: t }, backend: n });
  if (e === "relu6")
    return iv({ inputs: { x: t }, backend: n });
  if (e === "prelu")
    return rv({ inputs: { x: t, alpha: s }, backend: n });
  if (e === "leakyrelu")
    return sv({ inputs: { x: t }, backend: n, attrs: { alpha: r } });
  if (e === "sigmoid")
    return qS({ inputs: { x: t }, backend: n });
  throw new Error(`Activation ${e} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function se(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { shape: o } = s, i = H(r.shape), a = im(o, i), l = H(a);
  k(i === l, () => `The new shape (${a}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), e.incRef(r.dataId);
  const c = e.data.get(r.dataId);
  if (c.complexTensorInfos != null) {
    const u = c.complexTensorInfos.real, h = c.complexTensorInfos.imag;
    u.shape = a, h.shape = a;
  }
  return { dataId: r.dataId, shape: a, dtype: r.dtype };
}
const wP = {
  kernelName: Zl,
  backendName: "cpu",
  kernelFunc: se
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function av(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o } = t, { transposeA: i, transposeB: a } = s;
  wt([r, o], "matMul");
  const l = r.shape.length, c = o.shape.length, u = i ? r.shape[l - 2] : r.shape[l - 1], h = a ? o.shape[c - 1] : o.shape[c - 2], d = i ? r.shape[l - 1] : r.shape[l - 2], p = a ? o.shape[c - 2] : o.shape[c - 1], f = r.shape.slice(0, -2), m = o.shape.slice(0, -2), g = H(f), y = H(m), w = Et(r.shape.slice(0, -2), o.shape.slice(0, -2)).concat([d, p]);
  k(u === h, () => `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${a} must match.`);
  const x = i ? [g, u, d] : [g, d, u], S = a ? [y, p, h] : [y, h, p], v = se({ inputs: { x: r }, backend: e, attrs: { shape: x } }), T = se({ inputs: { x: o }, backend: e, attrs: { shape: S } }), $ = i ? v.shape[1] : v.shape[2], R = i ? v.shape[2] : v.shape[1], E = a ? T.shape[1] : T.shape[2], V = Math.max(g, y), X = e.data.get(v.dataId).values, _ = e.data.get(T.dataId).values, B = xt(v.shape), U = xt(T.shape), [Y, tt, J] = i ? [B[0], 1, B[1]] : [B[0], B[1], 1], [et, rt, ot] = a ? [1, U[1], U[0]] : [U[1], 1, U[0]], lt = R * E, it = $t([V, R, E], v.dtype), ht = it.values, ct = e.blockSize;
  for (let ft = 0; ft < V; ft++)
    for (let gt = 0; gt < R; gt += ct)
      for (let kt = 0; kt < E; kt += ct)
        for (let Tt = 0; Tt < $; Tt += ct) {
          const Ft = Math.min(gt + ct, R), Lt = Math.min(kt + ct, E), Ht = Math.min(Tt + ct, $);
          for (let Qt = gt; Qt < Ft; Qt++)
            for (let Yt = kt; Yt < Lt; Yt++) {
              let ee = 0;
              for (let Ut = Tt; Ut < Ht; Ut++) {
                const he = Math.min(ft, g - 1) * Y, fe = Math.min(ft, y - 1) * ot, hs = X[he + Qt * tt + Ut * J], z = _[Ut * et + Yt * rt + fe];
                ee += hs * z;
              }
              ht[ft * lt + (Qt * E + Yt)] += ee;
            }
        }
  return e.disposeIntermediateTensorInfo(v), e.disposeIntermediateTensorInfo(T), e.makeTensorInfo(w, it.dtype, it.values);
}
const IP = {
  kernelName: cl,
  backendName: "cpu",
  kernelFunc: av
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  let d, p, f;
  const m = [];
  d = av({ inputs: { a: r, b: o }, attrs: { transposeA: l, transposeB: c }, backend: e }), i && (p = Yo({ inputs: { a: d, b: i }, backend: e }), m.push(d), d = p), u && (f = Ku(e, d, u, a, h), m.push(d), d = f);
  for (const y of m)
    e.disposeIntermediateTensorInfo(y);
  return d;
}
const vP = {
  kernelName: Va,
  backendName: "cpu",
  kernelFunc: SP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CP = Jt(ni, (n) => Math.acos(n)), kP = {
  kernelName: ni,
  backendName: "cpu",
  kernelFunc: CP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NP = Jt(si, (n) => Math.acosh(n)), TP = {
  kernelName: si,
  backendName: "cpu",
  kernelFunc: NP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $P(n) {
  const { inputs: t, backend: e } = n, s = t;
  wt(t, "addN");
  const r = s.map((a) => e.data.get(a.dataId).values), o = $t(s[0].shape, s[0].dtype), i = o.values;
  for (let a = 0; a < s.length; a++) {
    const l = r[a];
    for (let c = 0; c < i.length; c++)
      i[c] += l[c];
  }
  return e.makeTensorInfo(o.shape, o.dtype, o.values);
}
const RP = {
  kernelName: rl,
  backendName: "cpu",
  kernelFunc: $P
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  wt(r, "all");
  const a = At(o, r.shape);
  let l = a;
  const c = we(l, r.shape.length);
  let u = r;
  c != null && (u = xn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = Ne(l.length, r.shape.length)), Je("all", l, u.shape.length);
  const [h, d] = ze(u.shape, l), p = H(d), f = Ie(H(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      w = w && S;
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = ke(h, a), b = se({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const LP = {
  kernelName: eh,
  backendName: "cpu",
  kernelFunc: EP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  wt(r, "any");
  const a = At(o, r.shape);
  let l = a;
  const c = we(l, r.shape.length);
  let u = r;
  c != null && (u = xn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = Ne(l.length, r.shape.length)), Je("any", l, u.shape.length);
  const [h, d] = ze(u.shape, l), p = H(d), f = Ie(H(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      w = w || S;
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = ke(h, a), b = se({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const GP = {
  kernelName: nh,
  backendName: "cpu",
  kernelFunc: DP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  wt(r, "argMax");
  let i = At(o, r.shape);
  const a = we(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = xn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = Ne(i.length, l.shape.length)), i = [i[0]], Je("argMax", i, l.shape.length);
  const [u, h] = ze(l.shape, i), d = H(u), p = Ie(d, "int32"), f = H(h), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const S = m[y + x];
      S > b && (b = S, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const OP = {
  kernelName: ol,
  backendName: "cpu",
  kernelFunc: FP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  wt(r, "argMin");
  let i = At(o, r.shape);
  const a = we(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = xn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = Ne(i.length, l.shape.length)), i = [i[0]], Je("argMin", i, l.shape.length);
  const [u, h] = ze(l.shape, i), d = H(u), p = Ie(d, "int32"), f = H(h), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const S = m[y + x];
      S < b && (b = S, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const zP = {
  kernelName: il,
  backendName: "cpu",
  kernelFunc: AP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WP = Jt(ri, (n) => Math.asin(n)), VP = {
  kernelName: ri,
  backendName: "cpu",
  kernelFunc: WP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PP = Jt(oi, (n) => Math.asinh(n)), MP = {
  kernelName: oi,
  backendName: "cpu",
  kernelFunc: PP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XP = Jt(ii, (n) => Math.atan(n)), _P = {
  kernelName: ii,
  backendName: "cpu",
  kernelFunc: XP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KP = De((n, t) => Math.atan2(n, t)), ZP = Ke(li, KP), BP = {
  kernelName: li,
  backendName: "cpu",
  kernelFunc: ZP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HP = Jt(ai, (n) => Math.atanh(n)), UP = {
  kernelName: ai,
  backendName: "cpu",
  kernelFunc: HP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qb(n, t, e, s, r, o) {
  const i = r.strideHeight, a = r.strideWidth, l = r.dilationHeight, c = r.dilationWidth, u = r.effectiveFilterHeight, h = r.effectiveFilterWidth, d = r.padInfo.top, p = r.padInfo.left, f = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = $t(r.outShape, e), g = m.values, y = r.outShape[1] * r.outShape[2] * r.outShape[3], b = r.outShape[2] * r.outShape[3], w = r.outShape[3];
  for (let x = 0; x < r.batchSize; ++x) {
    const S = x * y, v = x * s[0];
    for (let T = 0; T < r.inChannels; ++T)
      for (let $ = 0; $ < r.outHeight; ++$) {
        const R = $ * i - d, E = Math.max(0, R), V = Math.min(r.inHeight, u + R), X = S + $ * b;
        for (let _ = 0; _ < r.outWidth; ++_) {
          const B = _ * a - p, U = Math.max(0, B), Y = Math.min(r.inWidth, h + B);
          let tt = f, J = 0, et = 0;
          for (let ot = E; ot < V; ot += l) {
            const lt = v + ot * s[1];
            for (let it = U; it < Y; it += c) {
              const ht = lt + it * s[2], ct = n[ht + T];
              o === "max" && ct > tt ? tt = ct : o === "avg" && (J += ct, et++);
            }
            if (isNaN(tt))
              break;
          }
          const rt = X + _ * w + T;
          g[rt] = o === "avg" ? J / et : tt;
        }
      }
  }
  return m;
}
function lv(n, t, e, s, r = !1, o = !1) {
  const i = $t(s.outShape, "int32"), a = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, h = s.effectiveFilterHeight, d = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = $t(t, e, n);
  for (let g = 0; g < s.batchSize; ++g)
    for (let y = 0; y < s.inChannels; ++y)
      for (let b = 0; b < s.outHeight; ++b) {
        const w = b * a - p;
        let x = w;
        for (; x < 0; )
          x += c;
        const S = Math.min(s.inHeight, h + w);
        for (let v = 0; v < s.outWidth; ++v) {
          const T = v * l - f;
          let $ = T;
          for (; $ < 0; )
            $ += u;
          const R = Math.min(s.inWidth, d + T);
          let E = Number.NEGATIVE_INFINITY, V = -1;
          for (let X = x; X < S; X += c) {
            const _ = X - w;
            for (let B = $; B < R; B += u) {
              const U = B - T, Y = m.get(g, X, B, y);
              Y > E && (E = Y, r ? V = o ? ((g * s.inHeight + X) * s.inWidth + B) * s.inChannels + y : (X * s.inWidth + B) * s.inChannels + y : V = _ * d + U);
            }
          }
          i.set(V, g, b, v, y);
        }
      }
  return i;
}
function cv(n, t, e, s, r, o) {
  const i = r.strideDepth, a = r.strideHeight, l = r.strideWidth, c = r.dilationDepth, u = r.dilationHeight, h = r.dilationWidth, d = r.effectiveFilterDepth, p = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, y = r.padInfo.left, b = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = $t(r.outShape, e), x = w.values, S = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], v = r.outShape[2] * r.outShape[3] * r.outShape[4], T = r.outShape[3] * r.outShape[4], $ = r.outShape[4];
  for (let R = 0; R < r.batchSize; ++R) {
    const E = R * S, V = R * s[0];
    for (let X = 0; X < r.inChannels; ++X)
      for (let _ = 0; _ < r.outDepth; ++_) {
        const B = _ * i - m;
        let U = B;
        for (; U < 0; )
          U += c;
        const Y = Math.min(r.inDepth, d + B), tt = E + _ * v;
        for (let J = 0; J < r.outHeight; ++J) {
          const et = J * a - g;
          let rt = et;
          for (; rt < 0; )
            rt += u;
          const ot = Math.min(r.inHeight, p + et), lt = tt + J * T;
          for (let it = 0; it < r.outWidth; ++it) {
            const ht = it * l - y;
            let ct = ht;
            for (; ct < 0; )
              ct += h;
            const ft = Math.min(r.inWidth, f + ht), gt = lt + it * $;
            let kt = b, Tt = 0, Ft = 0;
            for (let Ht = U; Ht < Y; Ht += c) {
              const Qt = V + Ht * s[1];
              for (let Yt = rt; Yt < ot; Yt += u) {
                const ee = Qt + Yt * s[2];
                for (let Ut = ct; Ut < ft; Ut += h) {
                  const he = ee + Ut * s[3], fe = n[he + X];
                  if (o === "max" && fe > kt ? kt = fe : o === "avg" && (Tt += fe, Ft++), isNaN(kt))
                    break;
                }
                if (isNaN(kt))
                  break;
              }
              if (isNaN(kt))
                break;
            }
            const Lt = gt + X;
            x[Lt] = o === "avg" ? Tt / Ft : kt;
          }
        }
      }
  }
  return w;
}
function YP(n, t) {
  const e = $t(t.outShape, "int32"), s = t.strideDepth, r = t.strideHeight, o = t.strideWidth, i = t.dilationDepth, a = t.dilationHeight, l = t.dilationWidth, c = t.effectiveFilterDepth, u = t.effectiveFilterHeight, h = t.effectiveFilterWidth, d = t.padInfo.front, p = t.padInfo.top, f = t.padInfo.left;
  for (let m = 0; m < t.batchSize; ++m)
    for (let g = 0; g < t.inChannels; ++g)
      for (let y = 0; y < t.outDepth; ++y) {
        const b = y * s - d;
        let w = b;
        for (; w < 0; )
          w += i;
        const x = Math.min(t.inDepth, c + b);
        for (let S = 0; S < t.outHeight; ++S) {
          const v = S * r - p;
          let T = v;
          for (; T < 0; )
            T += a;
          const $ = Math.min(t.inHeight, u + v);
          for (let R = 0; R < t.outWidth; ++R) {
            const E = R * o - f;
            let V = E;
            for (; V < 0; )
              V += l;
            const X = Math.min(t.inWidth, h + E);
            let _ = Number.NEGATIVE_INFINITY, B = -1;
            for (let U = w; U < x; U += i) {
              const Y = U - b;
              for (let tt = T; tt < $; tt += a) {
                const J = tt - v;
                for (let et = V; et < X; et += l) {
                  const rt = et - E, ot = n.get(m, U, tt, et, g);
                  ot >= _ && (_ = ot, B = Y * u * h + J * u + rt);
                }
              }
            }
            e.set(B, m, y, S, R, g);
          }
        }
      }
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  wt(r, "avgPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(je(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = ls(r.shape, o, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && Vt(u.inShape, u.outShape))
    h = zs({ inputs: { x: r }, backend: e });
  else {
    const d = e.data.get(r.dataId).values, p = xt(r.shape), f = qb(d, r.shape, r.dtype, p, u, "avg");
    h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const JP = {
  kernelName: al,
  backendName: "cpu",
  kernelFunc: jP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  wt(r, "avgPool3d");
  const u = rr(r.shape, o, i, 1, a, l, c), h = e.data.get(r.dataId).values, d = cv(h, r.shape, r.dtype, xt(r.shape), u, "avg");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const qP = {
  kernelName: ll,
  backendName: "cpu",
  kernelFunc: QP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  wt([r, o], "avgPool3DGrad");
  const u = rr(o.shape, i, a, 1, l, c), h = u.strideDepth, d = u.strideHeight, p = u.strideWidth, f = u.filterDepth, m = u.filterHeight, g = u.filterWidth, y = u.dilationDepth, b = u.dilationHeight, w = u.dilationWidth, x = u.effectiveFilterDepth, S = u.effectiveFilterHeight, v = u.effectiveFilterWidth, T = x - 1 - u.padInfo.front, $ = v - 1 - u.padInfo.left, R = S - 1 - u.padInfo.top, E = $t(o.shape, "float32"), V = 1 / (f * m * g), X = e.bufferSync(r);
  for (let _ = 0; _ < u.batchSize; ++_)
    for (let B = 0; B < u.inChannels; ++B)
      for (let U = 0; U < u.inDepth; ++U)
        for (let Y = 0; Y < u.inHeight; ++Y)
          for (let tt = 0; tt < u.inWidth; ++tt) {
            const J = U - T, et = Y - R, rt = tt - $;
            let ot = 0;
            for (let lt = 0; lt < x; lt += y) {
              const it = (J + lt) / h;
              if (!(it < 0 || it >= u.outDepth || Math.floor(it) !== it))
                for (let ht = 0; ht < S; ht += b) {
                  const ct = (et + ht) / d;
                  if (!(ct < 0 || ct >= u.outHeight || Math.floor(ct) !== ct))
                    for (let ft = 0; ft < v; ft += w) {
                      const gt = (rt + ft) / p;
                      if (gt < 0 || gt >= u.outWidth || Math.floor(gt) !== gt)
                        continue;
                      const kt = X.get(_, it, ct, gt, B);
                      ot += kt;
                    }
                }
            }
            E.set(ot * V, _, U, Y, tt, B);
          }
  return e.makeTensorInfo(E.shape, E.dtype, E.values);
}
const eM = {
  kernelName: rh,
  backendName: "cpu",
  kernelFunc: tM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o;
  wt([r, o], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = ls(i.shape, a, l, 1, c), h = u.strideHeight, d = u.strideWidth, p = u.filterHeight, f = u.filterWidth, m = u.dilationHeight, g = u.dilationWidth, y = u.effectiveFilterHeight, b = u.effectiveFilterWidth, w = b - 1 - u.padInfo.left, x = y - 1 - u.padInfo.top, S = $t(i.shape, "float32"), v = 1 / (p * f), T = e.data.get(r.dataId).values, $ = $t(r.shape, "float32", T);
  for (let R = 0; R < u.batchSize; ++R)
    for (let E = 0; E < u.inChannels; ++E)
      for (let V = 0; V < u.inHeight; ++V)
        for (let X = 0; X < u.inWidth; ++X) {
          const _ = V - x, B = X - w;
          let U = 0;
          for (let Y = 0; Y < y; Y += m) {
            const tt = (_ + Y) / h;
            if (!(tt < 0 || tt >= u.outHeight || Math.floor(tt) !== tt))
              for (let J = 0; J < b; J += g) {
                const et = (B + J) / d;
                if (et < 0 || et >= u.outWidth || Math.floor(et) !== et)
                  continue;
                const rt = $.get(R, tt, et, E);
                U += rt;
              }
          }
          S.set(U * v, R, V, X, E);
        }
  return e.makeTensorInfo(S.shape, S.dtype, S.values);
}
const sM = {
  kernelName: sh,
  backendName: "cpu",
  kernelFunc: nM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, scale: o, offset: i, mean: a, variance: l } = t;
  k(a.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(i == null || a.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(o == null || a.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), wt([r, a, l, o, i], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const u = e.data.get(r.dataId).values, h = e.data.get(a.dataId).values, d = e.data.get(l.dataId).values, p = o ? e.data.get(o.dataId).values : new Float32Array([1]), f = i ? e.data.get(i.dataId).values : new Float32Array([0]), m = new Float32Array(u.length), g = f.length, y = p.length, b = d.length, w = h.length;
  let x = 0, S = 0, v = 0, T = 0;
  for (let $ = 0; $ < u.length; ++$)
    m[$] = f[x++] + (u[$] - h[S++]) * p[v++] / Math.sqrt(d[T++] + c), x >= g && (x = 0), S >= w && (S = 0), v >= y && (v = 0), T >= b && (T = 0);
  return e.makeTensorInfo(r.shape, r.dtype, m);
}
const oM = {
  kernelName: Il,
  backendName: "cpu",
  kernelFunc: rM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, crops: i } = s;
  wt([r], "batchToSpaceND");
  const a = o.reduce((y, b) => y * b), l = kc(r.shape, o, a), c = Nc(l.length, o.length), u = Tc(r.shape, o, a), h = Zg(i, o.length), d = Bg(u, i, o.length), p = se({ inputs: { x: r }, backend: e, attrs: { shape: l } }), f = xn({ inputs: { x: p }, backend: e, attrs: { perm: c } }), m = se({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = ho({
    inputs: { x: m },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const aM = {
  kernelName: ul,
  backendName: "cpu",
  kernelFunc: iM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i } = s, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, c = US(a, l, o.dtype, o.shape, i);
  return e.makeTensorInfo([i], o.dtype, c);
}
const cM = {
  kernelName: oh,
  backendName: "cpu",
  kernelFunc: lM
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uM(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: r } = t, o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, a = Et(Array.from(o), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const hM = {
  kernelName: ih,
  backendName: "cpu",
  kernelFunc: uM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dM = Jt(hi, (n, t) => {
  const e = t;
  return n > e.clipValueMax ? e.clipValueMax : n < e.clipValueMin ? e.clipValueMin : n;
}), pM = {
  kernelName: hi,
  backendName: "cpu",
  kernelFunc: dM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fM = (n) => {
  const { x: t } = n.inputs, e = n.backend, s = new Float32Array(H(t.shape)), r = e.data.get(t.dataId), o = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, a = e.data.get(o.dataId).values, l = e.data.get(i.dataId).values;
  for (let c = 0; c < a.length; c++) {
    const u = a[c], h = l[c];
    s[c] = Math.hypot(u, h);
  }
  return e.makeOutput(s, t.shape, "float32");
}, mM = {
  kernelName: hl,
  backendName: "cpu",
  kernelFunc: fM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jo(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.data.get(s.dataId).complexTensorInfos.imag, o = e.data.get(r.dataId).values;
  return e.makeTensorInfo(r.shape, r.dtype, o);
}
const gM = {
  kernelName: kh,
  backendName: "cpu",
  kernelFunc: jo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jo(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s, o = At(r, t[0].shape)[0], i = t.map((m) => m.shape);
  Wg(i, o);
  let a = Gs(t.map((m) => m.shape), o);
  if (H(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((m) => H(m.shape) > 0);
  if (l.length === 1)
    return zs({ inputs: { x: l[0] }, backend: e });
  if (l[0].dtype === "complex64") {
    const m = l.map((x) => uo({ inputs: { input: x }, backend: e })), g = l.map((x) => jo({ inputs: { input: x }, backend: e })), y = Jo({ inputs: m, backend: e, attrs: { axis: o } }), b = Jo({ inputs: g, backend: e, attrs: { axis: o } }), w = Nn({ inputs: { real: y, imag: b }, backend: e });
    return m.forEach((x) => e.disposeIntermediateTensorInfo(x)), g.forEach((x) => e.disposeIntermediateTensorInfo(x)), e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(b), w;
  }
  const c = l.map((m) => {
    const y = [-1, H(m.shape.slice(o))];
    return se({ inputs: { x: m }, backend: e, attrs: { shape: y } });
  }), u = c.map((m) => ({ vals: e.data.get(m.dataId).values, shape: m.shape }));
  a = Gs(c.map((m) => m.shape), 1);
  const h = c[0].shape[0] === 1, d = VW(u, a, t[0].dtype, h), p = Gs(l.map((m) => m.shape), o), f = e.makeTensorInfo(p, t[0].dtype, d);
  return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const yM = {
  kernelName: dl,
  backendName: "cpu",
  kernelFunc: Jo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
  wt([r, o], "conv2d");
  const h = or(l), d = _e(r.shape, o.shape, i, c, a, u, !1, h), p = d.filterHeight, f = d.filterWidth, m = d.dilationHeight, g = d.dilationWidth, y = d.padInfo.left, b = d.padInfo.top, w = d.dataFormat === "channelsLast", x = new ve(d.outShape, r.dtype), S = xt(r.shape), v = xt(o.shape), T = S[0], $ = w ? S[1] : S[2], R = w ? S[2] : 1, E = w ? 1 : S[1], V = x.strides[0], X = w ? x.strides[1] : x.strides[2], _ = w ? x.strides[2] : 1, B = w ? 1 : x.strides[1], U = e.data.get(r.dataId).values, Y = e.data.get(o.dataId).values, tt = x.values;
  for (let J = 0; J < d.batchSize; ++J) {
    const et = J * T, rt = J * V;
    for (let ot = 0; ot < d.outHeight; ++ot) {
      const lt = rt + ot * X, it = ot * d.strideHeight - b;
      for (let ht = 0; ht < p; ++ht) {
        const ct = it + ht * m;
        if (ct < 0 || ct >= d.inHeight)
          continue;
        const ft = ht * v[0], gt = et + ct * $;
        for (let kt = 0; kt < d.outWidth; ++kt) {
          const Tt = lt + kt * _, Ft = kt * d.strideWidth - y;
          for (let Lt = 0; Lt < f; ++Lt) {
            const Ht = Ft + Lt * g;
            if (Ht < 0 || Ht >= d.inWidth)
              continue;
            const Qt = ft + Lt * v[1], Yt = gt + Ht * R;
            let ee = Qt;
            for (let Ut = 0; Ut < d.inChannels; ++Ut) {
              const he = U[Yt + Ut * E];
              for (let fe = 0; fe < d.outChannels; ++fe)
                tt[Tt + fe * B] += he * Y[ee + fe];
              ee += d.outChannels;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, tt);
}
const bM = {
  kernelName: pl,
  backendName: "cpu",
  kernelFunc: uv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
  wt([r, o], "conv2dBackpropFilter");
  const h = or(l), d = _e(r.shape, u, i, 1, a, c, !1, h), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = d, y = d.dataFormat === "channelsLast", b = new ve(d.filterShape, "float32"), w = d.padInfo.left, x = d.padInfo.top, S = e.data.get(r.dataId).values, v = e.data.get(o.dataId).values, T = new ve(r.shape, r.dtype, S), $ = new ve(o.shape, o.dtype, v);
  for (let R = 0; R < m; ++R) {
    const E = Math.max(0, Math.ceil((x - R) / p)), V = Math.min(d.outHeight, (d.inHeight + x - R) / p);
    for (let X = 0; X < g; ++X) {
      const _ = Math.max(0, Math.ceil((w - X) / f)), B = Math.min(d.outWidth, (d.inWidth + w - X) / f);
      for (let U = 0; U < d.inChannels; ++U)
        for (let Y = 0; Y < d.outChannels; ++Y) {
          let tt = 0;
          for (let J = 0; J < d.batchSize; ++J)
            for (let et = E; et < V; ++et) {
              const rt = R + et * p - x;
              for (let ot = _; ot < B; ++ot) {
                const lt = X + ot * f - w;
                y ? tt += T.get(J, rt, lt, U) * $.get(J, et, ot, Y) : tt += T.get(J, U, rt, lt) * $.get(J, Y, et, ot);
              }
            }
          b.set(tt, R, X, U, Y);
        }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const wM = {
  kernelName: lh,
  backendName: "cpu",
  kernelFunc: xM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s;
  wt([r, o], "conv2dBackpropInput");
  const h = xt(o.shape), d = xt(r.shape);
  let p = or(c);
  const f = _e(i, o.shape, a, 1, l, u, !1, p), m = new ve(f.inShape, "float32"), g = m.values, y = e.data.get(r.dataId).values, b = e.data.get(o.dataId).values, [w, x, S] = h, { batchSize: v, filterHeight: T, filterWidth: $, inChannels: R, inHeight: E, inWidth: V, outChannels: X, outHeight: _, outWidth: B, strideHeight: U, strideWidth: Y } = f;
  p = f.dataFormat;
  const tt = T - 1 - f.padInfo.top, J = $ - 1 - f.padInfo.left, et = p === "channelsLast", rt = m.strides[0], ot = et ? m.strides[1] : m.strides[2], lt = et ? m.strides[2] : 1, it = et ? 1 : m.strides[1], ht = d[0], ct = et ? d[1] : d[2], ft = et ? d[2] : 1, gt = et ? 1 : d[1];
  for (let kt = 0; kt < v; ++kt)
    for (let Tt = 0; Tt < R; ++Tt)
      for (let Ft = 0; Ft < E; ++Ft) {
        const Lt = Ft - tt, Ht = Math.max(0, Math.ceil(Lt / U)), Qt = Math.min(_, (T + Lt) / U);
        for (let Yt = 0; Yt < V; ++Yt) {
          const ee = Yt - J, Ut = Math.max(0, Math.ceil(ee / Y)), he = Math.min(B, ($ + ee) / Y);
          let fe = 0;
          for (let z = Ht; z < Qt; ++z) {
            const C = z * U - Lt;
            for (let L = Ut; L < he; ++L) {
              const O = L * Y - ee, F = ht * kt + ct * z + ft * L, Q = w * (T - 1 - C) + x * ($ - 1 - O) + S * Tt;
              for (let Z = 0; Z < X; ++Z) {
                const at = y[F + gt * Z], bt = b[Q + Z];
                fe += at * bt;
              }
            }
          }
          const hs = rt * kt + ot * Ft + lt * Yt + it * Tt;
          g[hs] = fe;
        }
      }
  return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const SM = {
  kernelName: fl,
  backendName: "cpu",
  kernelFunc: IM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s;
  wt([r, o], "conv3d");
  const c = Lr(r.shape, o.shape, i, l, a), { filterDepth: u, filterHeight: h, filterWidth: d, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, y = g.front, b = g.left, w = g.top, x = new ve(c.outShape, r.dtype), S = e.data.get(r.dataId).values, v = e.data.get(o.dataId).values, T = x.values, $ = xt(r.shape), R = xt(o.shape);
  for (let E = 0; E < c.batchSize; ++E) {
    const V = E * $[0], X = E * x.strides[0];
    for (let _ = 0; _ < c.outDepth; ++_) {
      const B = X + _ * x.strides[1], U = _ * c.strideDepth - y;
      for (let Y = 0; Y < u; ++Y) {
        const tt = U + Y * p;
        if (tt < 0 || tt >= c.inDepth)
          continue;
        const J = Y * R[0], et = V + tt * $[1];
        for (let rt = 0; rt < c.outHeight; ++rt) {
          const ot = B + rt * x.strides[2], lt = rt * c.strideHeight - w;
          for (let it = 0; it < h; ++it) {
            const ht = lt + it * f;
            if (ht < 0 || ht >= c.inHeight)
              continue;
            const ct = J + it * R[1], ft = et + ht * $[2];
            for (let gt = 0; gt < c.outWidth; ++gt) {
              const kt = ot + gt * c.outChannels, Tt = gt * c.strideWidth - b;
              for (let Ft = 0; Ft < d; ++Ft) {
                const Lt = Tt + Ft * m;
                if (Lt < 0 || Lt >= c.inWidth)
                  continue;
                const Ht = ct + Ft * R[2], Qt = ft + Lt * c.inChannels;
                let Yt = Ht;
                for (let ee = 0; ee < c.inChannels; ++ee) {
                  const Ut = S[Qt + ee];
                  for (let he = 0; he < c.outChannels; ++he)
                    T[kt + he] += Ut * v[Yt + he];
                  Yt += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const CM = {
  kernelName: ml,
  backendName: "cpu",
  kernelFunc: vM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, filterShape: l } = s;
  wt([r, o], "conv3dBackpropFilterV2");
  const c = xt(r.shape), u = xt(o.shape), h = Lr(r.shape, l, i, 1, a), d = h.strideDepth, p = h.strideHeight, f = h.strideWidth, m = h.filterDepth, g = h.filterHeight, y = h.filterWidth, b = new ve(h.filterShape, "float32"), w = b.values, [x, S, v, T] = b.strides, $ = e.data.get(o.dataId).values, [R, E, V, X] = u, _ = e.data.get(r.dataId).values, [B, U, Y, tt] = c, J = h.padInfo.front, et = h.padInfo.left, rt = h.padInfo.top;
  for (let ot = 0; ot < m; ++ot) {
    const lt = Math.max(0, Math.ceil((J - ot) / d)), it = Math.min(h.outDepth, (h.inDepth + J - ot) / d), ht = ot * x;
    for (let ct = 0; ct < g; ++ct) {
      const ft = Math.max(0, Math.ceil((rt - ct) / p)), gt = Math.min(h.outHeight, (h.inHeight + rt - ct) / p), kt = ct * S + ht;
      for (let Tt = 0; Tt < y; ++Tt) {
        const Ft = Math.max(0, Math.ceil((et - Tt) / f)), Lt = Math.min(h.outWidth, (h.inWidth + et - Tt) / f), Ht = Tt * v + kt;
        for (let Qt = 0; Qt < h.inChannels; ++Qt) {
          const Yt = Qt * T + Ht;
          for (let ee = 0; ee < h.outChannels; ++ee) {
            let Ut = 0;
            for (let he = 0; he < h.batchSize; ++he) {
              const fe = he * B, hs = he * R;
              for (let z = lt; z < it; ++z) {
                const L = (ot + z * d - J) * U + fe, O = z * E + hs;
                for (let F = ft; F < gt; ++F) {
                  const Z = (ct + F * p - rt) * Y + L, at = F * V + O;
                  for (let bt = Ft; bt < Lt; ++bt) {
                    const j = (Tt + bt * f - et) * tt + Z, Rt = bt * X + at;
                    Ut += _[j + Qt] * $[Rt + ee];
                  }
                }
              }
            }
            w[Yt + ee] = Ut;
          }
        }
      }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const NM = {
  kernelName: ch,
  backendName: "cpu",
  kernelFunc: kM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { pad: i, strides: a, inputShape: l } = s;
  wt([r], "conv3dBackpropInputV2");
  const c = xt(r.shape), u = xt(o.shape), h = Lr(l, o.shape, a, 1, i), d = new ve(h.inShape, "float32"), p = d.values, [f, m, g, y] = d.strides, b = e.data.get(r.dataId).values, [w, x, S, v] = c, T = e.data.get(o.dataId).values, [$, R, E, V] = u, { batchSize: X, filterDepth: _, filterHeight: B, filterWidth: U, inChannels: Y, inDepth: tt, inHeight: J, inWidth: et, outChannels: rt, outDepth: ot, outHeight: lt, outWidth: it, strideDepth: ht, strideHeight: ct, strideWidth: ft } = h, gt = _ - 1 - h.padInfo.front, kt = B - 1 - h.padInfo.top, Tt = U - 1 - h.padInfo.left;
  for (let Ft = 0; Ft < X; ++Ft)
    for (let Lt = 0; Lt < Y; ++Lt)
      for (let Ht = 0; Ht < tt; ++Ht) {
        const Qt = Ht - gt, Yt = Math.max(0, Math.ceil(Qt / ht)), ee = Math.min(ot, (_ + Qt) / ht);
        for (let Ut = 0; Ut < J; ++Ut) {
          const he = Ut - kt, fe = Math.max(0, Math.ceil(he / ct)), hs = Math.min(lt, (B + he) / ct);
          for (let z = 0; z < et; ++z) {
            const C = z - Tt, L = Math.max(0, Math.ceil(C / ft)), O = Math.min(it, (U + C) / ft);
            let F = 0;
            for (let Q = Yt; Q < ee; ++Q) {
              const Z = Q * ht - Qt;
              for (let at = fe; at < hs; ++at) {
                const bt = at * ct - he;
                for (let Ct = L; Ct < O; ++Ct) {
                  const j = Ct * ft - C, Rt = w * Ft + x * Q + S * at + v * Ct, Pt = $ * (_ - 1 - Z) + R * (B - 1 - bt) + E * (U - 1 - j) + V * Lt;
                  for (let We = 0; We < rt; ++We) {
                    const Ge = b[Rt + We], Bc = T[Pt + We];
                    F += Ge * Bc;
                  }
                }
              }
            }
            p[f * Ft + m * Ht + g * Ut + y * z + Lt] = F;
          }
        }
      }
  return e.makeTensorInfo(d.shape, d.dtype, d.values);
}
const $M = {
  kernelName: uh,
  backendName: "cpu",
  kernelFunc: TM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RM = Jt(di, (n) => Math.cos(n)), EM = {
  kernelName: di,
  backendName: "cpu",
  kernelFunc: RM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LM = Jt(pi, (n) => Math.cosh(n)), DM = {
  kernelName: pi,
  backendName: "cpu",
  kernelFunc: LM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, boxes: o, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, [u, h, d, p] = r.shape, f = o.shape[0], [m, g] = a, y = $t([f, m, g, p], "float32"), b = e.data.get(o.dataId).values, w = e.data.get(i.dataId).values, x = e.data.get(r.dataId).values, S = xt(r.shape), v = xt(y.shape);
  for (let T = 0; T < f; T++) {
    const $ = T * 4, R = b[$], E = b[$ + 1], V = b[$ + 2], X = b[$ + 3], _ = w[T];
    if (_ >= u)
      continue;
    const B = m > 1 ? (V - R) * (h - 1) / (m - 1) : 0, U = g > 1 ? (X - E) * (d - 1) / (g - 1) : 0;
    for (let Y = 0; Y < m; Y++) {
      const tt = m > 1 ? R * (h - 1) + Y * B : 0.5 * (R + V) * (h - 1);
      if (tt < 0 || tt > h - 1) {
        for (let J = 0; J < g; J++)
          for (let et = 0; et < p; et++) {
            const rt = et + J * v[2] + Y * v[1] + T * v[0];
            y.values[rt] = c;
          }
        continue;
      }
      if (l === "bilinear") {
        const J = Math.floor(tt), et = Math.ceil(tt), rt = tt - J;
        for (let ot = 0; ot < g; ot++) {
          const lt = g > 1 ? E * (d - 1) + ot * U : 0.5 * (E + X) * (d - 1);
          if (lt < 0 || lt > d - 1) {
            for (let ft = 0; ft < p; ft++) {
              const gt = ft + ot * v[2] + Y * v[1] + T * v[0];
              y.values[gt] = c;
            }
            continue;
          }
          const it = Math.floor(lt), ht = Math.ceil(lt), ct = lt - it;
          for (let ft = 0; ft < p; ft++) {
            let gt = ft + it * S[2] + J * S[1] + _ * S[0];
            const kt = x[gt];
            gt = ft + ht * S[2] + J * S[1] + _ * S[0];
            const Tt = x[gt];
            gt = ft + it * S[2] + et * S[1] + _ * S[0];
            const Ft = x[gt];
            gt = ft + ht * S[2] + et * S[1] + _ * S[0];
            const Lt = x[gt], Ht = kt + (Tt - kt) * ct, Qt = Ft + (Lt - Ft) * ct;
            gt = ft + ot * v[2] + Y * v[1] + T * v[0], y.values[gt] = Ht + (Qt - Ht) * rt;
          }
        }
      } else
        for (let J = 0; J < g; ++J) {
          const et = g > 1 ? E * (d - 1) + J * U : 0.5 * (E + X) * (d - 1);
          if (et < 0 || et > d - 1) {
            for (let lt = 0; lt < p; lt++) {
              const it = lt + J * v[2] + Y * v[1] + T * v[0];
              y.values[it] = c;
            }
            continue;
          }
          const rt = Math.round(et), ot = Math.round(tt);
          for (let lt = 0; lt < p; lt++) {
            const it = lt + rt * S[2] + ot * S[1] + _ * S[0], ht = lt + J * v[2] + Y * v[1] + T * v[0];
            y.values[ht] = x[it];
          }
        }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const FM = {
  kernelName: dh,
  backendName: "cpu",
  kernelFunc: GM
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  wt(r, "cumprod");
  const l = we([o], r.shape.length);
  let c = r;
  l != null && (c = xn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
  const u = Ne(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = ln(c.dtype, "int32"), d = th(H(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = i ? 1 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] * d[x] : p[w] * d[x];
      }
    }
  const g = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = Dr(l), b = xn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const AM = {
  kernelName: hh,
  backendName: "cpu",
  kernelFunc: OM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  wt(r, "cumsum");
  const l = we([o], r.shape.length);
  let c = r;
  l != null && (c = xn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
  const u = Ne(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = ln(c.dtype, "int32"), d = Ie(H(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = i ? 0 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] + d[x] : p[w] + d[x];
      }
    }
  const g = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = Dr(l), b = xn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const WM = {
  kernelName: gl,
  backendName: "cpu",
  kernelFunc: zM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i, binaryOutput: a } = s;
  if (r.shape.length === 1) {
    const l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = US(l, c, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = e.bufferSync(r), c = e.bufferSync(o), u = OW(l, c, i, a);
    return e.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const PM = {
  kernelName: ph,
  backendName: "cpu",
  kernelFunc: VM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockSize: o, dataFormat: i } = s;
  k(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  const a = r.shape[0], l = r.shape[1], c = r.shape[2], u = r.shape[3], h = l * o, d = c * o, p = u / (o * o), f = e.data.get(r.dataId).values, m = new Float32Array(a * h * d * p);
  let g = 0;
  for (let y = 0; y < a; ++y)
    for (let b = 0; b < h; ++b) {
      const w = Math.floor(b / o), x = b % o;
      for (let S = 0; S < d; ++S) {
        const v = Math.floor(S / o), T = S % o, $ = (x * o + T) * p;
        for (let R = 0; R < p; ++R) {
          const V = R + $ + u * (v + c * (w + l * y));
          m[g++] = f[V];
        }
      }
    }
  return e.makeTensorInfo([a, h, d, p], r.dtype, m);
}
const XM = {
  kernelName: fh,
  backendName: "cpu",
  kernelFunc: MM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  wt([r, o], "depthwiseConv2DNative");
  const u = xt(r.shape), h = xt(o.shape);
  let d = l;
  d == null && (d = [1, 1]), k(je(i, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);
  const p = _e(r.shape, o.shape, i, d, a, c, !0), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = p, w = b.left, x = b.top, S = p.outChannels / p.inChannels, v = new ve(p.outShape, r.dtype), T = e.data.get(r.dataId).values, $ = e.data.get(o.dataId).values, R = v.values;
  for (let E = 0; E < p.batchSize; ++E) {
    const V = E * u[0], X = E * v.strides[0];
    for (let _ = 0; _ < p.outHeight; ++_) {
      const B = X + _ * v.strides[1], U = _ * p.strideHeight - x;
      for (let Y = 0; Y < f; ++Y) {
        const tt = U + Y * g;
        if (tt < 0 || tt >= p.inHeight)
          continue;
        const J = Y * h[0], et = V + tt * u[1];
        for (let rt = 0; rt < p.outWidth; ++rt) {
          const ot = B + rt * v.strides[2], lt = rt * p.strideWidth - w;
          for (let it = 0; it < m; ++it) {
            const ht = lt + it * y;
            if (ht < 0 || ht >= p.inWidth)
              continue;
            const ct = J + it * h[1], ft = et + ht * p.inChannels;
            let gt = ot, kt = ct;
            for (let Tt = 0; Tt < p.inChannels; ++Tt) {
              const Ft = T[ft + Tt];
              for (let Lt = 0; Lt < S; ++Lt)
                R[gt + Lt] += Ft * $[kt + Lt];
              gt += S, kt += S;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const _M = {
  kernelName: yl,
  backendName: "cpu",
  kernelFunc: hv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s;
  wt([r, o], "depthwiseConv2dNativeBackpropFilter");
  const h = _e(r.shape, u, i, a, l, c, !0), { strideHeight: d, strideWidth: p, filterHeight: f, filterWidth: m } = h, g = new ve(h.filterShape, "float32"), y = h.padInfo.left, b = h.padInfo.top, w = h.outChannels / h.inChannels, x = e.data.get(r.dataId).values, S = new ve(r.shape, r.dtype, x), v = e.data.get(o.dataId).values, T = new ve(o.shape, o.dtype, v);
  for (let $ = 0; $ < f; ++$) {
    const R = Math.max(0, Math.ceil((b - $) / d)), E = Math.min(h.outHeight, (h.inHeight + b - $) / d);
    for (let V = 0; V < m; ++V) {
      const X = Math.max(0, Math.ceil((y - V) / p)), _ = Math.min(h.outWidth, (h.inWidth + y - V) / p);
      for (let B = 0; B < h.outChannels; ++B) {
        const U = Math.trunc(B / w), Y = B % w;
        let tt = 0;
        for (let J = 0; J < h.batchSize; ++J)
          for (let et = R; et < E; ++et) {
            const rt = $ + et * d - b;
            for (let ot = X; ot < _; ++ot) {
              const lt = V + ot * p - y;
              tt += S.get(J, rt, lt, U) * T.get(J, et, ot, B);
            }
          }
        g.set(tt, $, V, U, Y);
      }
    }
  }
  return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const ZM = {
  kernelName: mh,
  backendName: "cpu",
  kernelFunc: KM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s;
  wt([r, o], "depthwiseConv2DNativeBackpropInput");
  const h = xt(r.shape), d = xt(o.shape), p = _e(u, o.shape, i, a, l, c, !0), f = new ve(p.inShape, "float32"), m = f.values, [g, y, b] = f.strides, w = e.data.get(r.dataId).values, [x, S, v] = h, T = e.data.get(o.dataId).values, [$, R, E] = d, { batchSize: V, filterHeight: X, filterWidth: _, inChannels: B, inHeight: U, inWidth: Y, outChannels: tt, outHeight: J, outWidth: et, strideHeight: rt, strideWidth: ot } = p, lt = X - 1 - p.padInfo.top, it = _ - 1 - p.padInfo.left, ht = tt / B;
  for (let ct = 0; ct < V; ++ct)
    for (let ft = 0; ft < B; ++ft)
      for (let gt = 0; gt < U; ++gt) {
        const kt = gt - lt, Tt = Math.max(0, Math.ceil(kt / rt)), Ft = Math.min(J, (X + kt) / rt);
        for (let Lt = 0; Lt < Y; ++Lt) {
          const Ht = Lt - it, Qt = Math.max(0, Math.ceil(Ht / ot)), Yt = Math.min(et, (_ + Ht) / ot);
          let ee = 0;
          for (let Ut = Tt; Ut < Ft; ++Ut) {
            const he = Ut * rt - kt;
            for (let fe = Qt; fe < Yt; ++fe) {
              const hs = fe * ot - Ht, z = x * ct + S * Ut + v * fe, C = $ * (X - 1 - he) + R * (_ - 1 - hs) + E * ft;
              for (let L = 0; L < ht; ++L) {
                const O = ft * ht + L, F = w[z + O], Q = T[C + L];
                ee += F * Q;
              }
            }
          }
          m[g * ct + y * gt + b * Lt + ft] = ee;
        }
      }
  return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const HM = {
  kernelName: gh,
  backendName: "cpu",
  kernelFunc: BM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UM(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = H(s.shape), o = e.data.get(s.dataId).values, i = $t([r, r], s.dtype), a = i.values;
  for (let c = 0; c < o.length; c++)
    a[c * r + c] = o[c];
  const l = [...s.shape, ...s.shape];
  return e.makeTensorInfo(l, i.dtype, i.values);
}
const YM = {
  kernelName: yh,
  backendName: "cpu",
  kernelFunc: UM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jM = {
  kernelName: bl,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r } = n, { strides: o, pad: i, dilations: a } = e, l = t, c = l.data.get(s.dataId).values, u = s.shape.length, h = l.data.get(r.dataId).values, d = r.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: y, outWidth: b, padInfo: w, strideHeight: x, strideWidth: S, filterHeight: v, filterWidth: T, dilationHeight: $, dilationWidth: R, outShape: E } = ac(s.shape, r.shape, o, i, "NHWC", a), V = H(E), X = E.length, _ = Bt(s.dtype, V);
    for (let U = 0; U < p; ++U)
      for (let Y = 0; Y < y; ++Y) {
        const tt = Y * x - w.top;
        for (let J = 0; J < b; ++J) {
          const et = J * S - w.left;
          for (let rt = 0; rt < g; ++rt) {
            let ot = Number.MIN_SAFE_INTEGER;
            for (let it = 0; it < v; ++it) {
              const ht = tt + it * $;
              if (ht >= 0 && ht < f)
                for (let ct = 0; ct < T; ++ct) {
                  const ft = et + ct * R;
                  if (ft >= 0 && ft < m) {
                    const gt = Rn([U, ht, ft, rt], u, xt(s.shape)), kt = Rn([it, ct, rt], d, xt(r.shape)), Tt = c[gt] + h[kt];
                    Tt > ot && (ot = Tt);
                  }
                }
            }
            const lt = Rn([U, Y, J, rt], X, xt(E));
            _[lt] = ot;
          }
        }
      }
    return { dataId: l.write(sr(_, s.dtype), E, s.dtype), shape: E, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JM = {
  kernelName: Su,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r, dy: o } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = _n(s.shape, c.data.get(s.dataId).values), h = _n(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: v, dilationHeight: T, dilationWidth: $, outShape: R } = ac(s.shape, r.shape, i, a, "NHWC", l);
    k(o.rank === R.length, () => `Error in ${Su}, dy must have the same rank as output ${R.length}, but got ${o.rank}`);
    const E = _n(R, c.data.get(o.dataId).values), V = lm(r.shape, r.dtype);
    for (let _ = 0; _ < d; ++_)
      for (let B = 0; B < g; ++B) {
        const U = B * w - b.top;
        for (let Y = 0; Y < y; ++Y) {
          const tt = Y * x - b.left;
          for (let J = 0; J < m; ++J) {
            let et = Number.MIN_SAFE_INTEGER, rt = 0, ot = 0;
            for (let lt = 0; lt < S; ++lt) {
              const it = U + lt * T;
              if (it >= 0 && it < p)
                for (let ht = 0; ht < v; ++ht) {
                  const ct = tt + ht * $;
                  if (ct >= 0 && ct < f) {
                    const ft = u[_][it][ct][J] + h[lt][ht][J];
                    ft > et && (et = ft, rt = lt, ot = ht);
                  }
                }
            }
            V[rt][ot][J] += E[_][B][Y][J];
          }
        }
      }
    return { dataId: c.write(sr(V, s.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QM = {
  kernelName: Iu,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r, dy: o } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = _n(s.shape, c.data.get(s.dataId).values), h = _n(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: v, dilationHeight: T, dilationWidth: $, outShape: R } = ac(s.shape, r.shape, i, a, "NHWC", l);
    k(o.rank === R.length, () => `Error in ${Iu}, dy must have the same rank as output ${R.length}, but got ${o.rank}`);
    const E = _n(R, c.data.get(o.dataId).values), V = lm(s.shape, s.dtype);
    for (let _ = 0; _ < d; ++_)
      for (let B = 0; B < g; ++B) {
        const U = B * w - b.top;
        for (let Y = 0; Y < y; ++Y) {
          const tt = Y * x - b.left;
          for (let J = 0; J < m; ++J) {
            let et = Number.MIN_SAFE_INTEGER, rt = U < 0 ? 0 : U, ot = tt < 0 ? 0 : tt;
            for (let lt = 0; lt < S; ++lt) {
              const it = U + lt * T;
              if (it >= 0 && it < p)
                for (let ht = 0; ht < v; ++ht) {
                  const ct = tt + ht * $;
                  if (ct >= 0 && ct < f) {
                    const ft = u[_][it][ct][J] + h[lt][ht][J];
                    ft > et && (et = ft, rt = it, ot = ct);
                  }
                }
            }
            V[_][rt][ot][J] += E[_][B][Y][J];
          }
        }
      }
    return { dataId: c.write(sr(V, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wc(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  wt(r, "sum");
  let a;
  r.dtype === "bool" ? a = $r({ inputs: { x: r }, backend: e, attrs: { dtype: "int32" } }) : a = zs({ inputs: { x: r }, backend: e });
  const l = a.shape.length, c = At(o, a.shape), u = we(c, l);
  let h = c, d = a;
  u != null && (d = xn({ inputs: { x: a }, backend: e, attrs: { perm: u } }), h = Ne(h.length, l)), Je("sum", h, d.shape.length);
  const [p, f] = ze(d.shape, h), m = ln(d.dtype, "int32");
  let g = Xu(e, p, m);
  const y = H(f), b = e.data.get(g.dataId).values, w = e.data.get(d.dataId).values;
  for (let x = 0; x < b.length; ++x) {
    const S = x * y;
    let v = 0;
    for (let T = 0; T < y; ++T)
      v += w[S + T];
    b[x] = v;
  }
  if (i) {
    const x = ke(g.shape, c), S = g;
    g = se({ inputs: { x: g }, backend: e, attrs: { shape: x } }), e.disposeIntermediateTensorInfo(S);
  }
  return e.disposeIntermediateTensorInfo(a), u != null && e.disposeIntermediateTensorInfo(d), g;
}
const qM = {
  kernelName: Jl,
  backendName: "cpu",
  kernelFunc: Wc
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: r } = s, o = t, { allDims: i, summedDims: a, idDims: l } = ty(r, o.length);
  ny(i.length, l, o);
  const { path: c, steps: u } = sy(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = ey(p, l[g]);
      let w;
      ry(y) ? w = o[g] : (w = xn({ inputs: { x: o[g] }, backend: e, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let S = 0; S < b.length; ++S)
        x.splice(b[S], 0, 1);
      Vt(w.shape, x) || (w = se({ inputs: { x: w }, backend: e, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = Sp({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = Wc({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && e.disposeIntermediateTensorInfo(m);
  return d;
}
const eX = {
  kernelName: bh,
  backendName: "cpu",
  kernelFunc: tX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nX(n) {
  const { inputs: t, backend: e } = n, { dy: s, y: r } = t;
  wt([s, r], "eluGrad");
  const o = new Float32Array(H(r.shape)), i = e.data.get(r.dataId).values, a = e.data.get(s.dataId).values;
  for (let l = 0; l < i.length; ++l) {
    const c = i[l];
    c >= 1 ? o[l] = a[l] : o[l] = a[l] * (c + 1);
  }
  return e.makeTensorInfo(r.shape, "float32", o);
}
const sX = {
  kernelName: xh,
  backendName: "cpu",
  kernelFunc: nX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rX = Hg, oX = Ug, iX = Yg, aX = jg, lX = Jg, cX = Qg, uX = Jt(gi, (n) => {
  const t = Math.sign(n), e = Math.abs(n), s = 1 / (1 + rX * e);
  return t * (1 - ((((cX * s + lX) * s + aX) * s + iX) * s + oX) * s * Math.exp(-e * e));
}), hX = {
  kernelName: gi,
  backendName: "cpu",
  kernelFunc: uX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zu(n) {
  const { inputs: t, backend: e, attrs: s } = n, { input: r } = t, { dim: o } = s, i = r.shape.length, a = r.shape.slice();
  let l = o;
  return o < 0 && (k(-(i + 1) <= o, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + o + 1), a.splice(l, 0, 1), se({ inputs: { x: r }, backend: e, attrs: { shape: a } });
}
const dX = {
  kernelName: wl,
  backendName: "cpu",
  kernelFunc: Zu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pX = De((n, t) => n / t), t0 = Ke(fi, pX), jf = {
  kernelName: fi,
  backendName: "cpu",
  kernelFunc: t0
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dv(n, t, e) {
  const s = n.shape, r = s[0], o = s[1], i = e.data.get(n.dataId), a = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, c = [r, o], u = H(c), h = ue("float32", u), d = ue("float32", u);
  for (let g = 0; g < r; g++) {
    const y = ho({
      inputs: { x: a },
      backend: e,
      attrs: { begin: [g, 0], size: [1, o] }
    }), b = ho({
      inputs: { x: l },
      backend: e,
      attrs: { begin: [g, 0], size: [1, o] }
    }), w = Nn({ inputs: { real: y, imag: b }, backend: e }), { real: x, imag: S } = fX(w, t, e), v = tr(x, S);
    for (let T = 0; T < o; T++) {
      const $ = qg(v, T);
      h[g * o + T] = $.real, d[g * o + T] = $.imag;
    }
    e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(w);
  }
  const p = e.makeTensorInfo(c, "float32", h), f = e.makeTensorInfo(c, "float32", d), m = Nn({ inputs: { real: p, imag: f }, backend: e });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), m;
}
function fX(n, t, e) {
  const s = H(n.shape), r = e.data.get(n.dataId), o = e.data.get(r.complexTensorInfos.real.dataId).values, i = e.data.get(r.complexTensorInfos.imag.dataId).values;
  if (mX(s)) {
    const a = Jf(o, i, s, t, e), l = [n.shape[0], n.shape[1]];
    if (t) {
      const c = e.makeTensorInfo(l, "float32", a.real), u = e.makeTensorInfo(l, "float32", a.imag), h = e.makeTensorInfo([], "float32", Vs(s, "float32")), d = zs({ inputs: { x: h }, backend: e }), p = jf.kernelFunc({ inputs: { a: c, b: h }, backend: e }), f = jf.kernelFunc({ inputs: { a: u, b: d }, backend: e }), m = e.data.get(p.dataId).values, g = e.data.get(f.dataId).values;
      return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return a;
  } else {
    const a = tr(o, i), l = gX(a, s, t);
    return aI(l);
  }
}
function mX(n) {
  return (n & n - 1) === 0;
}
function Jf(n, t, e, s, r) {
  if (e === 1)
    return { real: n, imag: t };
  const o = tr(n, t), i = e / 2, a = lI(o), l = a.real, c = a.imag, u = [l.length], h = r.makeTensorInfo(u, "float32", l), d = r.makeTensorInfo(u, "float32", c), p = Nn({ inputs: { real: h, imag: d }, backend: r }), f = cI(o), m = f.real, g = f.imag, y = [m.length], b = r.makeTensorInfo(y, "float32", m), w = r.makeTensorInfo(y, "float32", g), x = Nn({ inputs: { real: b, imag: w }, backend: r }), S = Jf(l, c, i, s, r), v = S.real, T = S.imag, $ = [v.length], R = r.makeTensorInfo($, "float32", v), E = r.makeTensorInfo($, "float32", T), V = Nn({
    inputs: { real: R, imag: E },
    backend: r
  }), X = Jf(m, g, i, s, r), _ = X.real, B = X.imag, U = [_.length], Y = r.makeTensorInfo(U, "float32", _), tt = r.makeTensorInfo(U, "float32", B), J = Nn({ inputs: { real: Y, imag: tt }, backend: r }), et = hI(e, s), rt = [et.real.length], ot = r.makeTensorInfo(rt, "float32", et.real), lt = r.makeTensorInfo(rt, "float32", et.imag), it = Nn({ inputs: { real: ot, imag: lt }, backend: r }), ht = Sp({ inputs: { a: it, b: J }, backend: r }), ct = Yo({
    inputs: { a: V, b: ht },
    backend: r
  }), ft = Qb({
    inputs: { a: V, b: ht },
    backend: r
  }), gt = uo({ inputs: { input: ct }, backend: r }), kt = uo({ inputs: { input: ft }, backend: r }), Tt = jo({ inputs: { input: ct }, backend: r }), Ft = jo({ inputs: { input: ft }, backend: r }), Lt = Jo({
    inputs: [gt, kt],
    backend: r,
    attrs: { axis: 0 }
  }), Ht = Jo({
    inputs: [Tt, Ft],
    backend: r,
    attrs: { axis: 0 }
  }), Qt = r.data.get(Lt.dataId).values, Yt = r.data.get(Ht.dataId).values;
  return r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(b), r.disposeIntermediateTensorInfo(w), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(R), r.disposeIntermediateTensorInfo(E), r.disposeIntermediateTensorInfo(V), r.disposeIntermediateTensorInfo(Y), r.disposeIntermediateTensorInfo(tt), r.disposeIntermediateTensorInfo(J), r.disposeIntermediateTensorInfo(ot), r.disposeIntermediateTensorInfo(lt), r.disposeIntermediateTensorInfo(it), r.disposeIntermediateTensorInfo(ht), r.disposeIntermediateTensorInfo(ct), r.disposeIntermediateTensorInfo(ft), r.disposeIntermediateTensorInfo(gt), r.disposeIntermediateTensorInfo(Tt), r.disposeIntermediateTensorInfo(kt), r.disposeIntermediateTensorInfo(Ft), r.disposeIntermediateTensorInfo(Lt), r.disposeIntermediateTensorInfo(Ht), { real: Qt, imag: Yt };
}
function gX(n, t, e) {
  const s = new Float32Array(t * 2);
  for (let r = 0; r < t; r++) {
    let o = 0, i = 0;
    for (let a = 0; a < t; a++) {
      const l = dI(r * a, t, e), c = qg(n, a);
      o += c.real * l.real - c.imag * l.imag, i += c.real * l.imag + c.imag * l.real;
    }
    e && (o /= t, i /= t), uI(s, o, i, r);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yX(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = H(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = se({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, o] }
  }), l = dv(a, !1, e), c = se({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const bX = {
  kernelName: wh,
  backendName: "cpu",
  kernelFunc: yX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e0(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: r, dtype: o } = e, i = o || ei(r), a = Bt(i, H(s));
  return wX(a, r, i), t.makeTensorInfo(s, i, a);
}
const xX = {
  kernelName: Ih,
  backendName: "cpu",
  kernelFunc: e0
};
function wX(n, t, e) {
  n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IX = {
  kernelName: Sh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, r = e, o = ue(s.dtype, H(s.shape)), [i, a, l, c] = s.shape, u = r.data.get(s.dataId).values;
    for (let d = 0; d < i; d++) {
      const p = d * l * a * c;
      for (let f = 0; f < a; f++) {
        const m = f * (l * c);
        for (let g = 0; g < l; g++) {
          const y = g * c;
          for (let b = 0; b < c; b++) {
            const w = Math.round(l - g - 1), x = p + m + y + b;
            let S = u[x];
            if (w >= 0 && w < l) {
              const v = w * c, T = p + m + v + b;
              S = u[T];
            }
            o[x] = S;
          }
        }
      }
    }
    return { dataId: r.write(o, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SX = De((n, t) => Math.floor(n / t)), vX = Ke(wi, SX, null, "int32"), CX = {
  kernelName: wi,
  backendName: "cpu",
  kernelFunc: vX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = uv({
    inputs: { x: r, filter: o },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const g = m;
    if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
      const y = se({ inputs: { x: i }, backend: e, attrs: { shape: [i.shape[0], 1, 1] } });
      m = Yo({ inputs: { a: m, b: y }, backend: e }), e.disposeIntermediateTensorInfo(y);
    } else
      m = Yo({ inputs: { a: m, b: i }, backend: e });
    e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    if (u === "NCHW" && p === "prelu" && a.shape.length === 1 && a.shape[0] !== 1) {
      const y = se({
        inputs: { x: a },
        backend: e,
        attrs: { shape: [a.shape[0], 1, 1] }
      });
      m = Ku(e, m, p, y, f), e.disposeIntermediateTensorInfo(y);
    } else
      m = Ku(e, m, p, a, f);
    e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const NX = {
  kernelName: Pa,
  backendName: "cpu",
  kernelFunc: kX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = hv({
    inputs: { x: r, filter: o },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const g = m;
    m = Yo({ inputs: { a: m, b: i }, backend: e }), e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    m = Ku(e, m, p, a, f), e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const $X = {
  kernelName: Ma,
  backendName: "cpu",
  kernelFunc: TX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RX(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: r } = t, o = H(s.shape), i = r.shape, a = i[i.length - 1], [l, c, u, h] = id(s, r);
  if (c === 0)
    return e.makeTensorInfo(l, s.dtype, []);
  const d = e.data.get(r.dataId).values, p = e.bufferSync(s), f = jW(d, p, s.dtype, c, a, u, h, s.shape, o);
  return e.makeTensorInfo(l, s.dtype, f.values);
}
const EX = {
  kernelName: vh,
  backendName: "cpu",
  kernelFunc: RX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, indices: o } = t, { axis: i, batchDims: a } = s;
  wt([r, o], "gatherV2");
  const l = At(i, r.shape)[0], c = e.data.get(o.dataId).values, u = r.shape[l];
  for (let x = 0; x < c.length; ++x) {
    const S = c[x];
    k(S <= u - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${u - 1}]`);
  }
  let h = a;
  a == null && (h = 0);
  const d = H(o.shape), p = yy(r, o, l, h), f = se({
    inputs: { x: r },
    backend: e,
    attrs: {
      shape: [
        p.batchSize,
        p.outerSize,
        p.dimSize,
        p.sliceSize
      ]
    }
  }), m = se({
    inputs: { x: o },
    backend: e,
    attrs: { shape: [p.batchSize, d / p.batchSize] }
  }), g = [
    p.batchSize,
    p.outerSize,
    d / p.batchSize,
    p.sliceSize
  ], y = e.bufferSync(m), b = e.bufferSync(f), w = JW(b, y, g);
  return e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), e.makeTensorInfo(p.outputShape, w.dtype, w.values);
}
const DX = {
  kernelName: Sl,
  backendName: "cpu",
  kernelFunc: LX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GX(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = H(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = se({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, o] }
  }), l = dv(a, !0, e), c = se({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const FX = {
  kernelName: Ch,
  backendName: "cpu",
  kernelFunc: GX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OX = Jt(vi, (n) => Number.isFinite(n) ? 1 : 0, "bool"), AX = {
  kernelName: vi,
  backendName: "cpu",
  kernelFunc: OX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zX = Jt(Ci, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), WX = {
  kernelName: Ci,
  backendName: "cpu",
  kernelFunc: zX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VX = Jt(ki, (n) => Number.isNaN(n) ? 1 : 0, "bool"), PX = {
  kernelName: ki,
  backendName: "cpu",
  kernelFunc: VX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MX(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, num: o } = e, i = uV(s, r, o);
  return t.makeTensorInfo([i.length], "float32", i);
}
const XX = {
  kernelName: Nh,
  backendName: "cpu",
  kernelFunc: MX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _X = Jt(Ti, (n) => Math.log1p(n)), KX = {
  kernelName: Ti,
  backendName: "cpu",
  kernelFunc: _X
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZX = De((n, t) => n && t), BX = Ke(Tl, ZX, null, "bool"), HX = {
  kernelName: Tl,
  backendName: "cpu",
  kernelFunc: BX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UX = Jt($l, (n) => n ? 0 : 1, "bool"), YX = {
  kernelName: $l,
  backendName: "cpu",
  kernelFunc: UX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jX = De((n, t) => n || t), JX = Ke(Rl, jX, null, "bool"), QX = {
  kernelName: Rl,
  backendName: "cpu",
  kernelFunc: JX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { depthRadius: o, bias: i, alpha: a, beta: l } = s;
  wt(r, "LRN");
  const c = r.shape[3], u = c - 1, h = e.data.get(r.dataId).values, d = H(r.shape), p = new Float32Array(d);
  function f(m) {
    const g = m % c;
    let y = m - g + Math.max(0, g - o);
    const b = m - g + Math.min(g + o, u);
    let w = 0;
    for (; y <= b; y++) {
      const x = h[y];
      w += x * x;
    }
    return w;
  }
  for (let m = 0; m < d; m++) {
    const g = f(m), y = h[m] * Math.pow(i + a * g, -l);
    p[m] = y;
  }
  return e.makeTensorInfo(r.shape, r.dtype, p);
}
const t_ = {
  kernelName: El,
  backendName: "cpu",
  kernelFunc: qX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, y: o, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s;
  wt(i, "LRNGrad");
  const h = H(i.shape), d = i.shape[3], p = e.data.get(i.dataId).values, f = e.data.get(r.dataId).values, m = e.data.get(o.dataId).values, g = new Float32Array(h), y = h;
  for (let b = 0; b < y; b++) {
    const w = b % d, x = b - w + Math.max(0, w - a), S = b - w + Math.min(d, w + a + 1);
    let v = 0;
    for (let T = x; T < S; T++)
      v += Math.pow(f[T], 2);
    v = c * v + l;
    for (let T = x; T < S; T++) {
      let $ = -2 * c * u * f[T] * m[b] / v;
      b === T && ($ += Math.pow(v, -u)), $ *= p[b], g[T] += $;
    }
  }
  return e.makeTensorInfo(i.shape, r.dtype, g);
}
const n_ = {
  kernelName: Th,
  backendName: "cpu",
  kernelFunc: e_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reductionIndices: o, keepDims: i } = s, a = e;
  let l = r.shape;
  const c = l.length, u = At(o, l);
  let h = u;
  const d = we(h, c);
  let p = a.data.get(r.dataId).values;
  if (d != null) {
    const x = new Array(c);
    for (let S = 0; S < x.length; S++)
      x[S] = l[d[S]];
    p = QS(p, l, r.dtype, d, x), h = Ne(h.length, c), l = x;
  }
  wt(r, "max"), Je("max", h, c);
  const [f, m] = ze(l, h), g = H(m), y = fV(p, g, f, r.dtype), b = a.write(y, f, r.dtype);
  let w = f;
  return i && (w = ke(f, u)), { dataId: b, shape: w, dtype: r.dtype };
}
const s_ = {
  kernelName: Ll,
  backendName: "cpu",
  kernelFunc: pv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  wt(r, "maxPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(je(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = ls(r.shape, o, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && Vt(u.inShape, u.outShape))
    h = zs({ inputs: { x: r }, backend: e });
  else {
    const d = e.data.get(r.dataId).values, p = xt(r.shape), f = qb(d, r.shape, r.dtype, p, u, "max");
    h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const o_ = {
  kernelName: Dl,
  backendName: "cpu",
  kernelFunc: r_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  wt(r, "maxPool3d");
  const u = rr(r.shape, o, i, 1, a, l, c), h = e.data.get(r.dataId).values, d = cv(h, r.shape, r.dtype, xt(r.shape), u, "max");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const a_ = {
  kernelName: Gl,
  backendName: "cpu",
  kernelFunc: i_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  wt([r, o], "maxPool3DGrad");
  const u = rr(o.shape, i, a, 1, l, c), h = e.bufferSync(o), d = YP(h, u), p = u.strideDepth, f = u.strideHeight, m = u.strideWidth, g = u.dilationDepth, y = u.dilationHeight, b = u.dilationWidth, w = u.effectiveFilterDepth, x = u.effectiveFilterHeight, S = u.effectiveFilterWidth, v = w - 1 - u.padInfo.front, T = S - 1 - u.padInfo.left, $ = x - 1 - u.padInfo.top, R = $t(o.shape, "float32"), E = e.bufferSync(r);
  for (let V = 0; V < u.batchSize; ++V)
    for (let X = 0; X < u.inChannels; ++X)
      for (let _ = 0; _ < u.inDepth; ++_)
        for (let B = 0; B < u.inHeight; ++B)
          for (let U = 0; U < u.inWidth; ++U) {
            const Y = _ - v, tt = B - $, J = U - T;
            let et = 0;
            for (let rt = 0; rt < w; rt += g) {
              const ot = (Y + rt) / p;
              if (!(ot < 0 || ot >= u.outDepth || Math.floor(ot) !== ot))
                for (let lt = 0; lt < x; lt += y) {
                  const it = (tt + lt) / f;
                  if (!(it < 0 || it >= u.outHeight || Math.floor(it) !== it))
                    for (let ht = 0; ht < S; ht += b) {
                      const ct = (J + ht) / m;
                      if (ct < 0 || ct >= u.outWidth || Math.floor(ct) !== ct)
                        continue;
                      const ft = w * x * S - 1 - d.get(V, ot, it, ct, X), gt = rt * x * S + lt * S + ht, kt = ft === gt ? 1 : 0;
                      if (kt === 0)
                        continue;
                      const Tt = E.get(V, ot, it, ct, X);
                      et += Tt * kt;
                    }
                }
            }
            R.set(et, V, _, B, U, X);
          }
  return e.makeTensorInfo(R.shape, R.dtype, R.values);
}
const c_ = {
  kernelName: Rh,
  backendName: "cpu",
  kernelFunc: l_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o, output: i } = t, a = o;
  wt([o, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = ls(a.shape, l, c, 1, u, h), p = e.data.get(a.dataId).values, f = $t(d.outShape, a.dtype, lv(p, a.shape, a.dtype, d).values), m = d.strideHeight, g = d.strideWidth, y = d.dilationHeight, b = d.dilationWidth, w = d.effectiveFilterHeight, x = d.effectiveFilterWidth, S = x - 1 - d.padInfo.left, v = w - 1 - d.padInfo.top, T = $t(a.shape, "float32"), $ = e.data.get(r.dataId).values, R = $t(r.shape, "float32", $);
  for (let E = 0; E < d.batchSize; ++E)
    for (let V = 0; V < d.inChannels; ++V)
      for (let X = 0; X < d.inHeight; ++X)
        for (let _ = 0; _ < d.inWidth; ++_) {
          const B = X - v, U = _ - S;
          let Y = 0;
          for (let tt = 0; tt < w; tt += y) {
            const J = (B + tt) / m;
            if (!(J < 0 || J >= d.outHeight || Math.floor(J) !== J))
              for (let et = 0; et < x; et += b) {
                const rt = (U + et) / g;
                if (rt < 0 || rt >= d.outWidth || Math.floor(rt) !== rt)
                  continue;
                const ot = w * x - 1 - f.get(E, J, rt, V), lt = tt * x + et, it = ot === lt ? 1 : 0;
                if (it === 0)
                  continue;
                const ht = R.get(E, J, rt, V);
                Y += ht * it;
              }
          }
          T.set(Y, E, X, _, V);
        }
  return e.makeTensorInfo(T.shape, T.dtype, T.values);
}
const h_ = {
  kernelName: $h,
  backendName: "cpu",
  kernelFunc: u_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d_(n, t, e, s, r) {
  const o = xt(t), i = qb(n, t, e, o, r, "max"), a = lv(n, t, e, r, !0, s);
  return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p_ = {
  kernelName: Eh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t, l = e;
    wt(s, "MaxPoolWithArgmax");
    const c = l.data.get(s.dataId).values, u = ls(s.shape, r, o, [1, 1], i), [h, d] = d_(c, s.shape, s.dtype, a, u), p = l.write(h, u.outShape, s.dtype), f = l.write(d, u.outShape, s.dtype);
    return [
      { dataId: p, shape: u.outShape, dtype: s.dtype },
      { dataId: f, shape: u.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = At(o, r.shape), c = ze(r.shape, a)[1], u = H(c), h = [], d = e.makeTensorInfo([], "float32", new Float32Array([u]));
  h.push(d);
  const p = $r({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } });
  h.push(p);
  const f = t0({ inputs: { a: p, b: d }, backend: e });
  h.push(f);
  const m = Wc({ inputs: { x: f }, backend: e, attrs: { axis: o, keepDims: i } });
  return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), m;
}
const m_ = {
  kernelName: Fl,
  backendName: "cpu",
  kernelFunc: f_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  wt(r, "min");
  const a = At(o, r.shape);
  let l = a;
  const c = we(l, r.shape.length);
  let u = r;
  c != null && (u = xn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = Ne(l.length, r.shape.length)), Je("min", l, u.shape.length);
  const [h, d] = ze(u.shape, l), p = H(d), f = Ie(H(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      (Number.isNaN(S) || S < w) && (w = S);
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = ke(h, a), b = se({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const y_ = {
  kernelName: Ol,
  backendName: "cpu",
  kernelFunc: g_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, mode: i } = s;
  wt(r, "mirrorPad");
  const a = o.map((w, x) => w[0] + r.shape[x] + w[1]), l = o.map((w) => w[0]), c = o.map((w, x) => w[0] + r.shape[x]), u = i === "reflect" ? 0 : 1, h = e.data.get(r.dataId).values, d = r.shape.length, p = xt(r.shape), f = H(a), m = a.length, g = xt(a), y = ue(r.dtype, f);
  for (let w = 0; w < f; w++) {
    let x = Ws(w, m, g);
    for (let v = 0; v < m; v++)
      x[v] < l[v] ? x[v] = l[v] * 2 - x[v] - u : x[v] >= c[v] && (x[v] = (c[v] - 1) * 2 - x[v] + u);
    x = x.map((v, T) => v - l[T]);
    const S = Rn(x, d, p);
    y[w] = h[S];
  }
  return { dataId: e.write(y, a, r.dtype), shape: a, dtype: r.dtype };
}
const x_ = {
  kernelName: Al,
  backendName: "cpu",
  kernelFunc: b_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w_ = De((n, t) => {
  const e = n % t;
  return n < 0 && t < 0 || n >= 0 && t >= 0 ? e : (e + t) % t;
}), I_ = Ke(Ei, w_), S_ = {
  kernelName: Ei,
  backendName: "cpu",
  kernelFunc: I_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { dim: o } = s, i = r.shape.length;
  let a = o;
  if (a === -1 && (a = i - 1), a !== i - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);
  const l = At([a], r.shape), c = pv({
    inputs: { x: r },
    backend: e,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), u = ke(c.shape, l), h = se({ inputs: { x: c }, backend: e, attrs: { shape: u } }), d = Qb({ inputs: { a: r, b: h }, backend: e }), p = jS({ inputs: { x: d }, backend: e }), f = Wc({ inputs: { x: p }, backend: e, attrs: { axis: l, keepDims: !1 } }), m = se({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = t0({ inputs: { a: p, b: m }, backend: e });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const v_ = {
  kernelName: tc,
  backendName: "cpu",
  kernelFunc: fv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { numSamples: o, seed: i, normalized: a } = s;
  wt(r, "multinomial");
  const l = a ? r : fv({ inputs: { logits: r }, backend: e, attrs: { dim: -1 } }), c = l.shape[0], u = l.shape[1], h = e.data.get(l.dataId).values, d = [c, o], p = Ie(H(d), "int32");
  for (let f = 0; f < c; ++f) {
    const m = f * u, g = new Float32Array(u - 1);
    g[0] = h[m];
    for (let w = 1; w < g.length; ++w)
      g[w] = g[w - 1] + h[m + w];
    const y = oa.alea(i.toString()), b = f * o;
    for (let w = 0; w < o; ++w) {
      const x = y();
      p[b + w] = g.length;
      for (let S = 0; S < g.length; S++)
        if (x < g[S]) {
          p[b + w] = S;
          break;
        }
    }
  }
  return a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(d, "int32", p);
}
const k_ = {
  kernelName: Lh,
  backendName: "cpu",
  kernelFunc: C_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N_ = Xd;
function T_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
  wt(r, "NonMaxSuppression");
  const c = e.data.get(r.dataId).values, u = e.data.get(o.dataId).values, { selectedIndices: h } = N_(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const $_ = {
  kernelName: Dh,
  backendName: "cpu",
  kernelFunc: T_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const R_ = _d;
function E_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s;
  wt(r, "NonMaxSuppressionPadded");
  const u = e.data.get(r.dataId).values, h = e.data.get(o.dataId).values, { selectedIndices: d, validOutputs: p } = R_(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const L_ = {
  kernelName: Gh,
  backendName: "cpu",
  kernelFunc: E_
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D_ = Kd;
function G_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s;
  wt(r, "NonMaxSuppressionWithScore");
  const u = e.data.get(r.dataId).values, h = e.data.get(o.dataId).values, d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = D_(u, h, d, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const F_ = {
  kernelName: Fh,
  backendName: "cpu",
  kernelFunc: G_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function O_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r } = t, { dtype: o, depth: i, onValue: a, offValue: l } = s;
  wt(r, "oneHot");
  const c = H(r.shape), u = new Float32Array(c * i);
  u.fill(l);
  const h = e.data.get(r.dataId).values;
  for (let d = 0; d < c; ++d)
    h[d] >= 0 && h[d] < i && (u[d * i + h[d]] = a);
  return e.makeTensorInfo([...r.shape, i], o, u);
}
const A_ = {
  kernelName: Pl,
  backendName: "cpu",
  kernelFunc: O_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bu(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = uo({ inputs: { input: s }, backend: e }), o = Bu({ inputs: { x: r }, backend: e }), i = jo({ inputs: { input: s }, backend: e }), a = Bu({ inputs: { x: i }, backend: e }), l = Nn({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return e0({ backend: e, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const z_ = {
  kernelName: sc,
  backendName: "cpu",
  kernelFunc: Bu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mv(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = uo({ inputs: { input: s }, backend: e }), o = mv({ inputs: { x: r }, backend: e }), i = jo({ inputs: { input: s }, backend: e }), a = Bu({ inputs: { x: i }, backend: e }), l = Nn({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return e0({ backend: e, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const W_ = {
  kernelName: Vl,
  backendName: "cpu",
  kernelFunc: mv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s;
  if (t.length === 1)
    return Zu({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
  const o = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Ye(o, u.shape, "All tensors passed to stack must have matching shapes"), k(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = Zu({ inputs: { input: u }, backend: e, attrs: { dim: r } });
    return a.push(h), h;
  }), c = Jo({ inputs: l, backend: e, attrs: { axis: r } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const V_ = {
  kernelName: Ml,
  backendName: "cpu",
  kernelFunc: gv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, constantValue: i } = s;
  wt(r, "pad");
  const a = o.map((b, w) => b[0] + r.shape[w] + b[1]), l = o.map((b) => b[0]), c = e.data.get(r.dataId).values, u = H(r.shape), h = r.shape.length, d = xt(r.shape), p = H(a), f = a.length, m = xt(a), g = ue(r.dtype, p);
  i !== 0 && g.fill(i);
  for (let b = 0; b < u; b++) {
    const x = Ws(b, h, d).map((v, T) => v + l[T]), S = Rn(x, f, m);
    g[S] = c[b];
  }
  return { dataId: e.write(g, a, r.dtype), shape: a, dtype: r.dtype };
}
const yv = {
  kernelName: Xl,
  backendName: "cpu",
  kernelFunc: P_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M_ = De((n, t) => Math.pow(n, t)), X_ = Ke(Di, M_), __ = {
  kernelName: Di,
  backendName: "cpu",
  kernelFunc: X_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t, a = r.map((g) => e.data.get(g.dataId).values), l = r.map((g) => g.shape), c = e.data.get(o.dataId).values, u = e.data.get(i.dataId).values, [h, d, p] = VV(a, l, c, o.shape, o.dtype, u, i.shape), f = h.map((g) => e.makeTensorInfo([g.length], "int32", g)), m = e.makeTensorInfo(p, o.dtype, d);
  return f.concat([m]);
}
const Z_ = {
  kernelName: Oh,
  backendName: "cpu",
  kernelFunc: K_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.data.get(r.dataId).values, u = e.data.get(o.dataId).values, h = e.data.get(i.dataId).values, d = a.map((g) => e.data.get(g.dataId).values), p = a.map((g) => g.shape), [f, m] = PV(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, o.dtype, m);
}
const H_ = {
  kernelName: Ah,
  backendName: "cpu",
  kernelFunc: B_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U_(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, dtype: o, step: i } = e, a = MV(s, r, i, o);
  return t.makeTensorInfo([a.length], o, a);
}
const Y_ = {
  kernelName: zh,
  backendName: "cpu",
  kernelFunc: U_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j_ = Jt(Gi, (n) => 1 / n), J_ = {
  kernelName: Gi,
  backendName: "cpu",
  kernelFunc: j_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s;
  wt(r, "resizeBilinear");
  const l = xt(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = e.data.get(r.dataId).values, g = new Float32Array(H([h, c, u, f])), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ];
  let w = 0;
  const x = y[0] / b[0], S = y[1] / b[1];
  for (let v = 0; v < h; v++)
    for (let T = 0; T < c; T++) {
      let $;
      i ? $ = x * (T + 0.5) - 0.5 : $ = x * T;
      const R = Math.max(0, Math.floor($)), E = $ - R, V = Math.min(d - 1, Math.ceil($)), X = v * l[0] + R * l[1], _ = v * l[0] + V * l[1];
      for (let B = 0; B < u; B++) {
        let U;
        i ? U = S * (B + 0.5) - 0.5 : U = S * B;
        const Y = Math.max(0, Math.floor(U)), tt = U - Y, J = Math.min(p - 1, Math.ceil(U)), et = X + Y * l[2], rt = _ + Y * l[2], ot = X + J * l[2], lt = _ + J * l[2];
        for (let it = 0; it < f; it++) {
          const ht = m[et + it], ct = m[rt + it], ft = m[ot + it], gt = m[lt + it], kt = ht + (ft - ht) * tt, Tt = ct + (gt - ct) * tt, Ft = kt + (Tt - kt) * E;
          g[w++] = Ft;
        }
      }
    }
  return e.makeTensorInfo([h, c, u, f], "float32", g);
}
const q_ = {
  kernelName: Hl,
  backendName: "cpu",
  kernelFunc: Q_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s;
  wt([o, r], "resizeBilinearGrad");
  const a = xt(r.shape), [l, c, u, h] = r.shape, [, d, p] = o.shape, f = new Float32Array(l * c * u * h), m = [
    i && d > 1 ? c - 1 : c,
    i && p > 1 ? u - 1 : u
  ], g = [
    i && d > 1 ? d - 1 : d,
    i && p > 1 ? p - 1 : p
  ], y = m[0] / g[0], b = m[1] / g[1], w = e.data.get(o.dataId).values;
  let x = 0;
  for (let S = 0; S < l; S++) {
    const v = S * a[0];
    for (let T = 0; T < d; T++) {
      const $ = T * y, R = Math.floor($), E = Math.min(Math.ceil($), c - 1), V = v + R * a[1], X = v + E * a[1], _ = $ - R, B = 1 - _;
      for (let U = 0; U < p; U++) {
        const Y = U * b, tt = Math.floor(Y), J = Math.min(Math.ceil(Y), u - 1), et = Y - tt, rt = 1 - et, ot = V + tt * a[2], lt = V + J * a[2], it = X + tt * a[2], ht = X + J * a[2], ct = B * rt, ft = B * et, gt = _ * rt, kt = _ * et;
        for (let Tt = 0; Tt < h; Tt++) {
          const Ft = w[x++];
          f[ot + Tt] += Ft * ct, f[lt + Tt] += Ft * ft, f[it + Tt] += Ft * gt, f[ht + Tt] += Ft * kt;
        }
      }
    }
  }
  return e.makeTensorInfo([l, u, c, h], "float32", f);
}
const eK = {
  kernelName: Ph,
  backendName: "cpu",
  kernelFunc: tK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s;
  wt(r, "resizeNearestNeighbor");
  const l = xt(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = e.data.get(r.dataId).values, g = new Float32Array(h * c * u * f), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ], w = y[0] / b[0], x = y[1] / b[1];
  let S = 0;
  for (let v = 0; v < h; v++) {
    const T = v * l[0];
    for (let $ = 0; $ < c; $++) {
      const R = i ? w * ($ + 0.5) : w * $;
      let E = Math.min(d - 1, o ? Math.round(R) : Math.floor(R));
      i && (E = Math.max(0, E));
      const V = T + E * l[1];
      for (let X = 0; X < u; X++) {
        const _ = i ? x * (X + 0.5) : x * X;
        let B = Math.min(p - 1, o ? Math.round(_) : Math.floor(_));
        i && (B = Math.max(0, B));
        const U = V + B * l[2];
        for (let Y = 0; Y < f; Y++) {
          const tt = m[U + Y];
          g[S++] = tt;
        }
      }
    }
  }
  return e.makeTensorInfo([h, c, u, f], r.dtype, g);
}
const sK = {
  kernelName: Bl,
  backendName: "cpu",
  kernelFunc: nK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s;
  wt([o, r], "resizeNearestNeighborGrad");
  const a = xt(r.shape), l = xt(o.shape), [c, u, h, d] = r.shape, [, p, f] = o.shape, m = new Float32Array(c * u * h * d), g = e.data.get(o.dataId).values, y = [
    i && p > 1 ? u - 1 : u,
    i && f > 1 ? h - 1 : h
  ], b = [
    i && p > 1 ? p - 1 : p,
    i && f > 1 ? f - 1 : f
  ], w = y[0] / b[0], x = y[1] / b[1], S = 1 / w, v = 1 / x, T = Math.ceil(S) * 2 + 2, $ = Math.ceil(v) * 2 + 2;
  for (let R = 0; R < c; R++) {
    const E = R * a[0];
    for (let V = 0; V < u; V++) {
      const X = E + V * a[1], _ = Math.floor(V * S), B = Math.floor(_ - T / 2);
      for (let U = 0; U < h; U++) {
        const Y = X + U * a[2], tt = Math.floor(U * v), J = Math.floor(tt - $ / 2);
        for (let et = 0; et < d; et++) {
          let rt = 0;
          for (let ot = 0; ot < T; ot++) {
            const lt = ot + B;
            if (lt < 0 || lt >= p)
              continue;
            const it = E + lt * l[1], ht = lt * w, ct = Math.min(u - 1, i ? Math.round(ht) : Math.floor(ht));
            if (V === ct)
              for (let ft = 0; ft < $; ft++) {
                const gt = ft + J;
                if (gt < 0 || gt >= f)
                  continue;
                const kt = it + gt * l[2], Tt = gt * x, Ft = Math.min(h - 1, i ? Math.round(Tt) : Math.floor(Tt));
                U === Ft && (rt += g[kt + et]);
              }
          }
          m[Y + et] = rt;
        }
      }
    }
  }
  return e.makeTensorInfo(r.shape, r.dtype, m);
}
const oK = {
  kernelName: Vh,
  backendName: "cpu",
  kernelFunc: rK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dims: o } = s;
  wt(r, "reverse");
  const i = r.shape.length, a = At(o, r.shape);
  if (i === 0)
    return zs({ inputs: { x: r }, backend: e });
  const l = new ve(r.shape, r.dtype), c = e.bufferSync(r);
  for (let u = 0; u < l.size; u++) {
    const h = l.indexToLoc(u), d = h.slice();
    a.forEach((p) => d[p] = r.shape[p] - 1 - d[p]), l.set(c.get(...d), ...h);
  }
  return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const aK = {
  kernelName: Ul,
  backendName: "cpu",
  kernelFunc: iK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lK = {
  kernelName: nd,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: i } = t, a = e, l = ue(s.dtype, H(s.shape)), [c, u, h, d] = s.shape, [p, f] = Kg(i, u, h), m = 255, g = Math.sin(r), y = Math.cos(r), b = a.data.get(s.dataId).values;
    for (let x = 0; x < c; x++) {
      const S = x * h * u * d;
      for (let v = 0; v < u; v++) {
        const T = v * (h * d);
        for (let $ = 0; $ < h; $++) {
          const R = $ * d;
          for (let E = 0; E < d; E++) {
            const V = [c, v, $, E], X = V[2], _ = V[1];
            let B = (X - p) * y - (_ - f) * g, U = (X - p) * g + (_ - f) * y;
            B = Math.round(B + p), U = Math.round(U + f);
            let Y = o;
            if (typeof o != "number" && (E === 3 ? Y = m : Y = o[E]), B >= 0 && B < h && U >= 0 && U < u) {
              const J = U * (h * d), et = B * d, rt = S + J + et + E;
              Y = b[rt];
            }
            const tt = S + T + R + E;
            l[tt] = Y;
          }
        }
      }
    }
    return { dataId: a.write(l, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cK = Jt(Ai, (n) => {
  const t = Math.floor(n);
  return n - t < 0.5 ? Math.floor(n) : n - t > 0.5 ? Math.ceil(n) : t % 2 === 0 ? t : t + 1;
}), uK = {
  kernelName: Ai,
  backendName: "cpu",
  kernelFunc: cK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r, updates: o } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = Ji(o, r, i), d = !0, p = e.bufferSync(r), f = e.bufferSync(o), m = Ga(p, f, i, h, c, l, a, u, 0, d);
  return e.makeTensorInfo(i, m.dtype, m.values);
}
const dK = {
  kernelName: Mh,
  backendName: "cpu",
  kernelFunc: hK
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pK(n, t) {
  let e = 0, s = n.length, r = 0;
  for (; e < s; )
    r = Math.floor((e + s) / 2), n[r] < t ? e = r + 1 : s = r;
  return s;
}
function fK(n, t) {
  let e = 0, s = n.length, r = 0;
  for (; e < s; )
    r = Math.floor((e + s) / 2), n[r] <= t ? e = r + 1 : s = r;
  return s;
}
function mK(n, t, e, s, r, o) {
  const i = Bt("int32", e * r);
  for (let a = 0; a < e; ++a) {
    const l = n.slice(a * s, (a + 1) * s), c = a * r;
    for (let u = 0; u < r; ++u)
      i[c + u] = o === "left" ? pK(l, t[u + c]) : fK(l, t[u + c]);
  }
  return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: r, values: o } = t, { side: i } = s, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, c = mK(a, l, r.shape[0], r.shape[1], o.shape[1], i);
  return e.makeTensorInfo(o.shape, "int32", c);
}
const yK = {
  kernelName: Xh,
  backendName: "cpu",
  kernelFunc: gK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bK(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: r, e: o } = t;
  wt([s, r, o], "select");
  const i = s.shape.length, a = e.data.get(s.dataId).values, l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = ln(r.dtype, o.dtype), h = Ie(H(r.shape), u);
  let d = 0;
  const p = i === 0 || i > 1 || r.shape.length === 1 ? 1 : H(r.shape.slice(1));
  for (let f = 0; f < a.length; f++)
    for (let m = 0; m < p; m++)
      a[f] === 1 ? h[d++] = l[f] : h[d++] = c[f];
  return e.makeTensorInfo(r.shape, u, h);
}
const xK = {
  kernelName: Yl,
  backendName: "cpu",
  kernelFunc: bK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wK = Qd, IK = qd, SK = Jt(Wi, (n) => n >= 0 ? IK * n : wK * (Math.exp(n) - 1)), vK = {
  kernelName: Wi,
  backendName: "cpu",
  kernelFunc: SK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CK = Jt(Mi, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), kK = {
  kernelName: Mi,
  backendName: "cpu",
  kernelFunc: CK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NK = Jt(Vi, (n) => Math.sin(n)), TK = {
  kernelName: Vi,
  backendName: "cpu",
  kernelFunc: NK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $K = Jt(Pi, (n) => Math.sinh(n)), RK = {
  kernelName: Pi,
  backendName: "cpu",
  kernelFunc: $K
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EK = 11920928955078125e-23, gx = Math.log(EK) + 2, LK = Jt(_i, (n) => {
  const t = n > -gx, e = n < gx, s = Math.exp(n);
  let r;
  return e ? r = s : t ? r = n : r = Math.log(1 + s), r;
}), DK = {
  kernelName: _i,
  backendName: "cpu",
  kernelFunc: LK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, paddings: i } = s;
  wt([r], "spaceToBatchND");
  const a = H(o), l = [[0, 0]];
  l.push(...i);
  for (let v = 1 + o.length; v < r.shape.length; ++v)
    l.push([0, 0]);
  const c = yv.kernelFunc({
    inputs: { x: r },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), u = kc(c.shape, o, a, !1), h = Nc(u.length, o.length, !1), d = Tc(c.shape, o, a, !1), m = se({ inputs: { x: c }, backend: e, attrs: { shape: u } }), b = xn({ inputs: { x: m }, backend: e, attrs: { perm: h } }), S = se({ inputs: { x: b }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(b), S;
}
const FK = {
  kernelName: Ql,
  backendName: "cpu",
  kernelFunc: GK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OK(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: r, denseShape: o, defaultValue: i } = t;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.data.get(s.dataId).values, l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = e.data.get(i.dataId).values[0], [h, d, p, f, m] = UV(a, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], r.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const AK = {
  kernelName: _h,
  backendName: "cpu",
  kernelFunc: OK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zK(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: r, newShape: o } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const i = Array.from(e.data.get(r.dataId).values), a = e.data.get(s.dataId).values, l = Array.from(e.data.get(o.dataId).values), [c, u, h] = YV(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const WK = {
  kernelName: Kh,
  backendName: "cpu",
  kernelFunc: zK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VK(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, [c, u] = tv(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const PK = {
  kernelName: Zh,
  backendName: "cpu",
  kernelFunc: VK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MK(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, [c, u] = tv(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const XK = {
  kernelName: Bh,
  backendName: "cpu",
  kernelFunc: MK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _K(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = Ji(o, r, a), p = !1, f = e.bufferSync(r);
  let m;
  switch (o.dtype) {
    case "bool": {
      const g = e.bufferSync(o), y = Boolean(e.data.get(i.dataId).values[0]);
      m = Ga(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "float32": {
      const g = e.bufferSync(o), y = e.data.get(i.dataId).values[0];
      m = Ga(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "int32": {
      const g = e.bufferSync(o), y = e.data.get(i.dataId).values[0];
      m = Ga(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "string": {
      const g = e.bufferSync(o), y = Us(e.data.get(i.dataId).values[0]);
      m = Ga(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${o.dtype}`);
  }
  return e.makeTensorInfo(a, m.dtype, m.values);
}
const KK = {
  kernelName: Hh,
  backendName: "cpu",
  kernelFunc: _K
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { numOrSizeSplits: o, axis: i } = s, a = At(i, r.shape)[0], l = oy(r, o, a), c = new Array(r.shape.length).fill(0), u = r.shape.slice();
  return l.map((h) => {
    const d = [...u];
    d[a] = h;
    const p = ho({ inputs: { x: r }, backend: e, attrs: { begin: c, size: d } });
    return c[a] += h, p;
  });
}
const BK = {
  kernelName: ql,
  backendName: "cpu",
  kernelFunc: ZK
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HK = {
  kernelName: Uh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { x: e } = n, s = t;
    wt(e, "square");
    const r = s.data.get(e.dataId).values, o = new Float32Array(r.length);
    for (let a = 0; a < r.length; ++a) {
      const l = r[a];
      o[a] = l * l;
    }
    return { dataId: s.write(o, e.shape, e.dtype), shape: e.shape, dtype: e.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UK = Jt(ji, (n, t) => {
  const e = t;
  return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
}), YK = {
  kernelName: ji,
  backendName: "cpu",
  kernelFunc: UK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s;
  wt(r, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Fm(r.shape, o, i, a, l, c, u, h, d);
  let S;
  if (m)
    S = se({ inputs: { x: r }, backend: e, attrs: { shape: f } });
  else if (g || y) {
    k(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const v = Gm(b, w, x), T = ho({ inputs: { x: r }, backend: e, attrs: { begin: b, size: v } });
    S = se({ inputs: { x: T }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(T);
  } else {
    const v = e.bufferSync(r), T = eP(p, v, x, b);
    S = e.makeTensorInfo(f, T.dtype, T.values);
  }
  return S;
}
const JK = {
  kernelName: Yh,
  backendName: "cpu",
  kernelFunc: jK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.data.get(u.dataId).values, p = e.data.get(h.dataId).values, [f, m] = sP(d, p, r, o, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", m)
  ];
}
const qK = {
  kernelName: jh,
  backendName: "cpu",
  kernelFunc: QK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: i } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.data.get(o.dataId).values, l = e.data.get(i.dataId).values[0], [c, u, h] = oP(a, l, r), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const eZ = {
  kernelName: Jh,
  backendName: "cpu",
  kernelFunc: tZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: r } = s, { input: o } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.data.get(o.dataId).values, a = iP(i, r);
  return e.makeTensorInfo(o.shape, "int32", a);
}
const sZ = {
  kernelName: Qh,
  backendName: "cpu",
  kernelFunc: nZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rZ = Jt(Hi, (n) => Math.tan(n)), oZ = {
  kernelName: Hi,
  backendName: "cpu",
  kernelFunc: rZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iZ = Jt(Ui, (n) => Math.tanh(n)), aZ = {
  kernelName: Ui,
  backendName: "cpu",
  kernelFunc: iZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reps: o } = s;
  wt(r, "tile");
  const i = uP(e.bufferSync(r), o);
  return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const cZ = {
  kernelName: Yi,
  backendName: "cpu",
  kernelFunc: lZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { k: o, sorted: i } = s;
  wt(r, "topk");
  const a = e.data.get(r.dataId).values, [l, c] = hP(a, r.shape, r.dtype, o, i);
  return [
    e.makeTensorInfo(l.shape, l.dtype, l.values),
    e.makeTensorInfo(c.shape, c.dtype, c.values)
  ];
}
const hZ = {
  kernelName: qh,
  backendName: "cpu",
  kernelFunc: uZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dZ(n) {
  const { inputs: t, attrs: e, backend: s } = n, { image: r, transforms: o } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e, [u, h, d, p] = r.shape, [f, m] = c != null ? c : [h, d], g = [u, f, m, p], y = xt(r.shape), b = y[0], w = y[1], x = y[2], S = xt(g), v = S[0], T = S[1], $ = S[2], R = ue(r.dtype, H(g));
  R.fill(l);
  const E = s.data.get(r.dataId).values, V = s.data.get(o.dataId).values;
  for (let _ = 0; _ < u; ++_) {
    const B = o.shape[0] === 1 ? V : V.subarray(_ * 8, _ * 8 + 8);
    for (let U = 0; U < f; ++U)
      for (let Y = 0; Y < m; ++Y)
        for (let tt = 0; tt < p; ++tt) {
          let J;
          const et = B[6] * Y + B[7] * U + 1;
          if (et === 0)
            continue;
          const rt = (B[0] * Y + B[1] * U + B[2]) / et, ot = (B[3] * Y + B[4] * U + B[5]) / et, lt = yx(rt, d, a), it = yx(ot, h, a);
          switch (i) {
            case "nearest":
              J = bZ(E, h, d, b, w, x, _, it, lt, tt, l);
              break;
            case "bilinear":
              J = xZ(E, h, d, b, w, x, _, it, lt, tt, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
          }
          const ht = _ * v + U * T + Y * $ + tt;
          R[ht] = J;
        }
    return s.makeTensorInfo(g, r.dtype, R);
  }
  return { dataId: s.write(R, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
const pZ = {
  kernelName: td,
  backendName: "cpu",
  kernelFunc: dZ
};
function yx(n, t, e) {
  switch (e) {
    case "reflect":
      return fZ(n, t);
    case "wrap":
      return mZ(n, t);
    case "nearest":
      return yZ(n, t);
    case "constant":
    default:
      return gZ(n);
  }
}
function fZ(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e < s && (e = s * Math.trunc(-e / s) + e), e = e < -t ? e + s : -e - 1;
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e -= s * Math.trunc(e / s), e >= t && (e = s - e - 1);
    }
  return wr(0, e, t - 1);
}
function mZ(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e += t * (Math.trunc(-e / s) + 1);
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e -= t * Math.trunc(e / s);
    }
  return wr(0, e, t - 1);
}
function gZ(n, t) {
  return n;
}
function yZ(n, t) {
  return wr(0, n, t - 1);
}
function Oa(n, t, e, s, r, o, i, a, l, c, u) {
  const h = i * s + a * r + l * o + c;
  return 0 <= a && a < t && 0 <= l && l < e ? n[h] : u;
}
function bZ(n, t, e, s, r, o, i, a, l, c, u) {
  const h = Math.round(a), d = Math.round(l);
  return Oa(n, t, e, s, r, o, i, h, d, c, u);
}
function xZ(n, t, e, s, r, o, i, a, l, c, u) {
  const h = Math.floor(a), d = Math.floor(l), p = h + 1, f = d + 1, m = (f - l) * Oa(n, t, e, s, r, o, i, h, d, c, u) + (l - d) * Oa(n, t, e, s, r, o, i, h, f, c, u), g = (f - l) * Oa(n, t, e, s, r, o, i, p, d, c, u) + (l - d) * Oa(n, t, e, s, r, o, i, p, f, c, u);
  return (p - a) * m + (a - h) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wZ(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: r } = e, { x: o } = t;
  wt(o, "unique");
  const i = s.data.get(o.dataId).values, { outputValues: a, outputShape: l, indices: c } = dP(i, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const IZ = {
  kernelName: ed,
  backendName: "cpu",
  kernelFunc: wZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: r } = t;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const i = r.shape.length, a = r.shape[o], l = new Array(i - 1);
  let c = 0;
  for (let p = 0; p < i; p++)
    p !== o && (l[c++] = r.shape[p]);
  const u = new Array(i).fill(0), h = r.shape.slice();
  h[o] = 1;
  const d = new Array(a);
  for (let p = 0; p < d.length; p++) {
    u[o] = p;
    const f = ho({ inputs: { x: r }, backend: e, attrs: { begin: u, size: h } });
    d[p] = se({ inputs: { x: f }, backend: e, attrs: { shape: l } }), e.disposeIntermediateTensorInfo(f);
  }
  return d;
}
const vZ = {
  kernelName: ec,
  backendName: "cpu",
  kernelFunc: SZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, segmentIds: o } = t, { numSegments: i } = s;
  wt(r, "unsortedSegmentSum");
  const a = r.shape.length, l = o.shape.length, c = [], u = [], h = a - l;
  let d = o;
  for (let f = 0; f < h; ++f) {
    const m = Zu({ inputs: { input: d }, backend: e, attrs: { dim: f + 1 } });
    d = m, u.push(m);
  }
  for (let f = 0; f < i; ++f) {
    const m = Vs(f, "int32"), g = e.makeTensorInfo([], "int32", m), y = YS({ inputs: { a: g, b: d }, backend: e }), b = $r({ inputs: { x: y }, backend: e, attrs: { dtype: "float32" } }), w = Sp({ inputs: { a: b, b: r }, backend: e }), x = Wc({ inputs: { x: w }, backend: e, attrs: { axis: 0, keepDims: !1 } });
    c.push(x), u.push(g), u.push(y), u.push(b), u.push(w), u.push(x);
  }
  const p = gv({ inputs: c, backend: e, attrs: { axis: 0 } });
  return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const kZ = {
  kernelName: nc,
  backendName: "cpu",
  kernelFunc: CZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NZ = [
  vP,
  NW,
  kP,
  TP,
  FW,
  RP,
  LP,
  GP,
  OP,
  zP,
  VP,
  MP,
  _P,
  BP,
  UP,
  JP,
  qP,
  eM,
  sM,
  IP,
  oM,
  aM,
  cM,
  hM,
  LW,
  WW,
  pM,
  TW,
  mM,
  yM,
  bM,
  wM,
  SM,
  CM,
  NM,
  $M,
  EM,
  DM,
  FM,
  AM,
  WM,
  PM,
  XM,
  _M,
  ZM,
  HM,
  YM,
  jM,
  JM,
  QM,
  eX,
  fP,
  sX,
  MW,
  hX,
  _W,
  dX,
  BW,
  bX,
  xX,
  IX,
  YW,
  CX,
  NX,
  $X,
  EX,
  DX,
  tV,
  sV,
  $W,
  FX,
  gM,
  AX,
  WX,
  PX,
  mP,
  iV,
  cV,
  XX,
  pV,
  KX,
  HX,
  YX,
  QX,
  t_,
  n_,
  s_,
  yV,
  o_,
  a_,
  c_,
  h_,
  p_,
  m_,
  y_,
  wV,
  x_,
  S_,
  k_,
  SV,
  kV,
  $_,
  L_,
  F_,
  $V,
  A_,
  W_,
  V_,
  yv,
  __,
  yP,
  DV,
  Z_,
  H_,
  Y_,
  RW,
  jf,
  J_,
  bP,
  xP,
  wP,
  q_,
  eK,
  sK,
  oK,
  aK,
  lK,
  uK,
  KV,
  dK,
  yK,
  xK,
  vK,
  ZV,
  kK,
  TK,
  RK,
  HV,
  v_,
  DK,
  FK,
  AK,
  WK,
  PK,
  XK,
  KK,
  BK,
  JV,
  HK,
  tP,
  YK,
  JK,
  qK,
  eZ,
  sZ,
  cP,
  qM,
  oZ,
  aZ,
  cZ,
  hZ,
  pZ,
  RV,
  IZ,
  vZ,
  kZ,
  z_
];
for (const n of NZ)
  wn(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kr = {}, nu = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function TZ(n, t) {
  Kr[n] = t;
}
function Is(n, t) {
  if (!(n in Kr) || t != null) {
    const s = RZ(n, t);
    if (s !== null)
      Kr[n] = s;
    else
      return console.log("Could not get context for WebGL version", n), null;
  }
  const e = Kr[n];
  return e == null || e.isContextLost() ? (delete Kr[n], Is(n)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Kr[n]);
}
function $Z(n) {
  if (typeof OffscreenCanvas < "u" && n === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function RZ(n, t) {
  if (n !== 1 && n !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const e = t == null ? $Z(n) : t;
  return e.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete Kr[n];
  }, !1), K().getBool("SOFTWARE_WEBGL_ENABLED") && (nu.failIfMajorPerformanceCaveat = !1), n === 1 ? e.getContext("webgl", nu) || e.getContext("experimental-webgl", nu) : e.getContext("webgl2", nu);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var qa;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(qa || (qa = {}));
var Xn;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(Xn || (Xn = {}));
var He;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(He || (He = {}));
function Vc(n, t) {
  return [t, n];
}
function EZ(n, t) {
  return n * t;
}
function su(n) {
  const t = H(n), e = Math.ceil(t / 4);
  return yu(e);
}
function ga(n, t) {
  return [
    Math.max(1, Math.ceil(t / 2)),
    Math.max(1, Math.ceil(n / 2))
  ];
}
function LZ(n, t) {
  const [e, s] = ga(n, t);
  return e * s * 4;
}
function n0(n, t) {
  const e = n;
  let s, r, o, i, a, l, c, u, h, d;
  return K().getNumber("WEBGL_VERSION") === 2 ? (s = e.R32F, r = e.R16F, o = e.RGBA16F, i = e.RGBA32F, a = e.RED, c = 4, u = 1, h = e.HALF_FLOAT, d = e.FLOAT, l = e.RGBA8) : (s = n.RGBA, r = n.RGBA, o = n.RGBA, i = e.RGBA, a = n.RGBA, c = 4, u = 4, h = t != null ? t.HALF_FLOAT_OES : null, d = n.FLOAT, l = n.RGBA), {
    internalFormatFloat: s,
    internalFormatHalfFloat: r,
    internalFormatPackedHalfFloat: o,
    internalFormatPackedFloat: i,
    textureFormatFloat: a,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: c,
    defaultNumChannels: u,
    textureTypeHalfFloat: h,
    textureTypeFloat: d
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function It(n, t) {
  const e = t();
  return K().getBool("DEBUG") && DZ(n), e;
}
function DZ(n) {
  const t = n.getError();
  if (t !== n.NO_ERROR)
    throw new Error("WebGL Error: " + AZ(n, t));
}
const GZ = 596e-10, FZ = 65504;
function OZ(n) {
  return !!(K().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || GZ < Math.abs(n) && Math.abs(n) < FZ);
}
function AZ(n, t) {
  switch (t) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function ru(n, t) {
  return cr(n, () => n.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function zZ(n, t) {
  const e = cr(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (It(n, () => n.shaderSource(e, t)), It(n, () => n.compileShader(e)), n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw console.log(n.getShaderInfoLog(e)), new Error("Failed to compile vertex shader.");
  return e;
}
function WZ(n, t) {
  const e = cr(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (It(n, () => n.shaderSource(e, t)), It(n, () => n.compileShader(e)), K().get("ENGINE_COMPILE_ONLY"))
    return e;
  if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw bv(t, n.getShaderInfoLog(e)), new Error("Failed to compile fragment shader.");
  return e;
}
const VZ = /ERROR: [0-9]+:([0-9]+):/g;
function bv(n, t) {
  const e = VZ.exec(t);
  if (e == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(n);
    return;
  }
  const s = +e[1], r = n.split(`
`), o = r.length.toString().length + 2, i = r.map((h, d) => Yr((d + 1).toString(), o) + h);
  let a = 0;
  for (let h = 0; h < i.length; h++)
    a = Math.max(i[h].length, a);
  const l = i.slice(0, s - 1), c = i.slice(s - 1, s), u = i.slice(s);
  console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${Yr(c[0], a)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
}
function PZ(n) {
  return cr(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function MZ(n, t) {
  if (It(n, () => n.linkProgram(t)), !K().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(t, n.LINK_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function Pp(n, t) {
  if (It(n, () => n.validateProgram(t)), n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function XZ(n, t) {
  const e = cr(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return It(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), It(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function _Z(n, t) {
  const e = cr(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return It(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)), It(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function KZ(n) {
  return cr(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function ZZ(n, t) {
  const e = K().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || t <= 0) {
    const s = `[${n}x${t}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > e || t > e) {
    const s = `[${n}x${t}]`, r = `[${e}x${e}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function BZ(n) {
  return cr(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function bx(n, t, e, s, r, o, i) {
  const a = n.getAttribLocation(t, e);
  return a === -1 ? !1 : (It(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), It(n, () => n.vertexAttribPointer(a, r, n.FLOAT, !1, o, i)), It(n, () => n.enableVertexAttribArray(a)), !0);
}
function HZ(n, t, e) {
  QZ(n, e), It(n, () => n.activeTexture(n.TEXTURE0 + e)), It(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function UZ(n, t, e) {
  return cr(n, () => n.getUniformLocation(t, e), 'uniform "' + e + '" not present in program.');
}
function YZ(n, t, e) {
  return n.getUniformLocation(t, e);
}
function jZ(n, t, e, s) {
  It(n, () => HZ(n, t, s)), It(n, () => n.uniform1i(e, s));
}
function Mp(n, t, e) {
  It(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), It(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0));
}
function xx(n, t) {
  It(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), It(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function ou(n) {
  const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (t !== n.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + JZ(n, t));
}
function JZ(n, t) {
  switch (t) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function cr(n, t, e) {
  const s = It(n, () => t());
  if (s == null)
    throw new Error(e);
  return s;
}
function QZ(n, t) {
  const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = t + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > e) {
    const r = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function Qo(n, t = 2) {
  return H(n.slice(0, n.length - t));
}
function qo(n) {
  if (n.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    n.length > 1 ? n[n.length - 2] : 1,
    n[n.length - 1]
  ];
}
function Xp(n) {
  let t = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (t = [Qo(n), ...qo(n)]), t;
}
function qZ(n, t = !1) {
  let e = K().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = K().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && K().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = e / 2), t && (e = e * 2, s = s * 2, n = n.map((a, l) => l >= n.length - 2 ? qu(n[l]) : n[l]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = nr(n).newShape);
  let r = H(n), o = null;
  n.length <= 1 && r <= e ? o = [1, r] : n.length === 2 && n[0] <= e && n[1] <= e ? o = n : n.length === 3 && n[0] * n[1] <= e && n[2] <= e ? o = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= e && n[1] * n[2] <= e ? o = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e ? o = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= e && n[1] * n[2] * n[3] <= e && (o = [n[0], n[1] * n[2] * n[3]]);
  const i = o != null && Math.max(...o) > s && Math.min(...o) <= (t ? 2 : 1) && Math.min(...o) > 0;
  if (o == null || i)
    if (t) {
      const a = Qo(n);
      let l = 2, c = 2;
      n.length && ([l, c] = qo(n)), r = a * (l / 2) * (c / 2), o = yu(r).map((u) => u * 2);
    } else
      o = yu(r);
  return o;
}
function iu(n) {
  return n % 2 === 0;
}
function Hu(n, t) {
  if (n = n.slice(-2), t = t.slice(-2), Vt(n, t) || !n.length || !t.length || n[0] === 0 || n[1] === 0 || t[0] === 0 || t[1] === 0)
    return !0;
  if (n.length !== t.length) {
    const e = n.slice(-1)[0], s = t.slice(-1)[0];
    if (e === s || iu(e) && iu(s) && (n[0] === 1 || t[0] === 1))
      return !0;
  }
  return n[1] === t[1] && iu(n[0]) && iu(t[0]);
}
let _p, Kp;
function tB(n) {
  if (_p == null) {
    const t = Is(n);
    _p = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return _p;
}
function eB(n) {
  if (Kp == null) {
    const t = Is(n);
    Kp = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Kp);
}
function nB(n) {
  if (n === 0)
    return 0;
  let t;
  const e = Is(n);
  return rs(e, "EXT_disjoint_timer_query_webgl2") && n === 2 ? t = 2 : rs(e, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function rs(n, t) {
  return n.getExtension(t) != null;
}
function wx(n) {
  try {
    if (Is(n) != null)
      return !0;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), !1;
  }
  return !1;
}
function sB(n) {
  if (n === 0)
    return !1;
  const t = Is(n);
  if (n === 1) {
    if (!rs(t, "OES_texture_float"))
      return !1;
  } else if (!rs(t, "EXT_color_buffer_float"))
    return !1;
  return Qf(t);
}
function rB(n) {
  if (n === 0)
    return !1;
  const t = Is(n);
  if (n === 1) {
    if (!rs(t, "OES_texture_float") || !rs(t, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (rs(t, "EXT_color_buffer_float"))
      return Qf(t);
    const s = "EXT_color_buffer_half_float";
    if (rs(t, s)) {
      const r = t.getExtension(s);
      return oB(t, r);
    }
    return !1;
  }
  return Qf(t);
}
function Qf(n) {
  const t = n0(n), e = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, e);
  const s = 1, r = 1;
  n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatFloat, s, r, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  const o = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, o), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(e), n.deleteFramebuffer(o), i;
}
function oB(n, t) {
  const e = n0(n, t), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s);
  const r = 1, o = 1;
  n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatHalfFloat, r, o, 0, e.textureFormatFloat, e.textureTypeHalfFloat, null);
  const i = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, i), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const a = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(i), a;
}
function iB(n) {
  return n !== 2 ? !1 : Is(n).fenceSync != null;
}
function Pc(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && k(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vt = K();
vt.registerFlag("HAS_WEBGL", () => vt.getNumber("WEBGL_VERSION") > 0);
vt.registerFlag("WEBGL_VERSION", () => wx(2) ? 2 : wx(1) ? 1 : 0);
vt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
vt.registerFlag("WEBGL_BUFFER_SUPPORTED", () => vt.get("WEBGL_VERSION") === 2);
vt.registerFlag("WEBGL_CPU_FORWARD", () => !0);
vt.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
vt.registerFlag("WEBGL_PACK", () => vt.getBool("HAS_WEBGL"));
vt.registerFlag("WEBGL_PACK_NORMALIZATION", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_CLIP", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_PACK_REDUCE", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_LAZILY_UNPACK", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_CONV_IM2COL", () => vt.getBool("WEBGL_PACK"));
vt.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => tB(vt.getNumber("WEBGL_VERSION")));
vt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => eB(vt.getNumber("WEBGL_VERSION")));
vt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = vt.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : nB(n);
});
vt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => vt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !mm());
vt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => sB(vt.getNumber("WEBGL_VERSION")));
vt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => vt.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : vt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
vt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => rB(vt.getNumber("WEBGL_VERSION")));
vt.registerFlag("WEBGL_FENCE_API_ENABLED", () => iB(vt.getNumber("WEBGL_VERSION")));
vt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => vt.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
vt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
vt.registerFlag("WEBGL_FLUSH_THRESHOLD", () => mm() ? 1 : -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
vt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
vt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
vt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
vt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
vt.registerFlag("WEBGL_EXP_CONV", () => !1);
vt.registerFlag("SOFTWARE_WEBGL_ENABLED", () => vt.getBool("IS_TEST"));
vt.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
vt.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
vt.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hn() {
  let n, t, e, s, r, o, i, a, l, c;
  return K().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", t = "in", e = "out", s = "in", r = "texture", o = "outputColor", i = "out vec4 outputColor;", a = K().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", t = "attribute", e = "varying", s = "varying", r = "texture2D", o = "gl_FragColor", i = "", a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: n,
    attribute: t,
    varyingVs: e,
    varyingFs: s,
    texture2D: r,
    output: o,
    defineOutput: i,
    defineSpecialNaN: a,
    defineSpecialInf: l,
    defineRound: c
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ko(n, t, e = "index") {
  const s = xt(t);
  return s.map((r, o) => {
    const i = `int ${n[o]} = ${e} / ${r}`, a = o === s.length - 1 ? `int ${n[o + 1]} = ${e} - ${n[o]} * ${r}` : `index -= ${n[o]} * ${r}`;
    return `${i}; ${a};`;
  }).join("");
}
function vp(n, t, e = "index") {
  const s = xt(t);
  return s.map((r, o) => {
    const i = `int ${n[o]} = ${e} / outShapeStrides[${o}]`, a = o === s.length - 1 ? `int ${n[o + 1]} = ${e} - ${n[o]} * outShapeStrides[${o}]` : `index -= ${n[o]} * outShapeStrides[${o}]`;
    return `${i}; ${a};`;
  }).join("");
}
function aB(n, t) {
  const e = n.length, s = n.map((o) => `${t}[${o}]`), r = new Array(e - 1);
  r[e - 2] = s[e - 1];
  for (let o = e - 3; o >= 0; --o)
    r[o] = `(${r[o + 1]} * ${s[o + 1]})`;
  return r;
}
function lB(n, t, e = "index") {
  const s = n.map((o, i) => i), r = aB(s, t);
  return r.map((o, i) => {
    const a = `int ${n[i]} = ${e} / ${r[i]}`, l = i === r.length - 1 ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${r[i]}` : `index -= ${n[i]} * ${r[i]}`;
    return `${a}; ${l};`;
  }).join("");
}
function s0(n) {
  const t = xt(n).map((e) => e.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function r0() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const xv = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: wv } = mI;
function cB(n, t, e) {
  const s = [];
  if (n.forEach((p) => {
    const f = H(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), e.enableShapeUniforms) {
      const { uniformShape: m } = o0(e.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), e.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  e.customUniforms && e.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const r = s.join(`
`), o = n.map((p) => uB(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`), i = t.texShape, a = hn(), l = pB(a);
  let c, u, h = gB(a);
  return t.isPacked ? (c = hB(t.logicalShape, i, e.enableShapeUniforms), u = mB(a)) : (c = dB(t.logicalShape, i, e.enableShapeUniforms), u = fB(a)), e.packedInputs && (h += wB), [
    h,
    l,
    u,
    r,
    c,
    o,
    e.userCode
  ].join(`
`);
}
function ya(n, t = !1) {
  const e = n.shapeInfo.logicalShape;
  switch (e.length) {
    case 0:
      return DB(n, t);
    case 1:
      return FB(n, t);
    case 2:
      return AB(n, t);
    case 3:
      return WB(n, t);
    case 4:
      return PB(n, t);
    case 5:
      return MB(n);
    case 6:
      return XB(n);
    default:
      throw new Error(`${e.length}-D input sampling is not yet supported`);
  }
}
function Iv(n, t) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return LB(n);
    case 1:
      return GB(n, t);
    case 2:
      return OB(n, t);
    case 3:
      return zB(n, t);
    default:
      return VB(n, t);
  }
}
function uB(n, t, e = !1, s) {
  let r = "";
  e ? r += Iv(n, s) : r += ya(n, s);
  const o = n.shapeInfo.logicalShape, i = t.logicalShape;
  return o.length <= i.length && (e ? r += _B(n, t) : r += KB(n, t)), r;
}
function hB(n, t, e) {
  switch (n.length) {
    case 0:
      return Sv();
    case 1:
      return IB(n, t, e);
    case 2:
      return RB(n, t, e);
    case 3:
      return vB(n, t, e);
    default:
      return kB(n, t, e);
  }
}
function dB(n, t, e) {
  switch (n.length) {
    case 0:
      return Sv();
    case 1:
      return SB(n, t, e);
    case 2:
      return EB(n, t, e);
    case 3:
      return CB(n, t, e);
    case 4:
      return NB(n, t, e);
    case 5:
      return TB(n, t);
    case 6:
      return $B(n, t);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function pB(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function fB(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function mB(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function gB(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${yB}
    ${bB}
    ${xB}
  `;
}
const yB = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, bB = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, xB = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, wB = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Sv() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function IB(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return s[0] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function SB(n, t, e) {
  return t[0] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function vB(n, t, e) {
  if (e)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(n[2] / 2), o = r * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function CB(n, t, e) {
  if (e)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${vp(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = ko(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function kB(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(n[n.length - 1] / 2), o = r * Math.ceil(n[n.length - 2] / 2);
  let i = o, a = "", l = "b, r, c";
  for (let c = 2; c < n.length - 1; c++)
    i *= n[n.length - c - 1], a = `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a, l = `b${c}, ` + l;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function NB(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${vp(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = ko(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function TB(n, t) {
  const e = ko(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function $B(n, t) {
  const e = ko(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function RB(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if (Vt(n, t))
    return e ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const r = Math.ceil(n[1] / 2);
  return e ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function EB(n, t, e) {
  return Vt(n, t) ? e ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : n[1] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : e ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function No(n) {
  return `offset${n}`;
}
function LB(n) {
  const t = n.name, e = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = hn();
  return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function DB(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `float ${s}() {return ${e};}`;
  const [r, o] = n.shapeInfo.texShape;
  if (r === 1 && o === 1)
    return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const i = No(e);
  if (t)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
  const [a, l] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function GB(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = n.shapeInfo.texShape, o = hn();
  if (t)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
  const i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function FB(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${ba(n)}
      }
    `;
  const r = n.shapeInfo.texShape, o = r[0], i = r[1];
  if (i === 1 && o === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const a = No(e);
  return i === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);
        return sampleTexture(${e}, uv);
      }
    ` : o === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : t ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function OB(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, i = o[0], a = o[1], l = hn();
  if (o != null && Vt(e, o))
    return t ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
  if (t)
    return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], u = Math.ceil(e[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function AB(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape;
  if (o != null && Vt(e, o)) {
    if (t)
      return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const d = o[0], p = o[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: i, keptDims: a } = nr(e), l = i;
  if (l.length < e.length) {
    const d = xa(n, l), p = ["row", "col"];
    return `
      ${ya(d, t)}
      float ${r}(int row, int col) {
        return ${r}(${wa(p, a)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${ba(n)}
      }
    `;
  const c = o[0], u = o[1], h = No(s);
  return u === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : t ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function zB(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  if (e[0] === 1) {
    const d = e.slice(1), p = [1, 2], f = xa(n, d), m = ["b", "row", "col"];
    return `
        ${Iv(f, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${wa(m, p)});
        }
      `;
  }
  const a = hn();
  if (t)
    return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
  const l = i[0], c = i[1], u = Math.ceil(e[2] / 2), h = u * Math.ceil(e[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function WB(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = e[1] * e[2], i = e[2], { newShape: a, keptDims: l } = nr(e), c = a;
  if (c.length < e.length) {
    const m = xa(n, c), g = ["row", "col", "depth"];
    return `
        ${ya(m, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${wa(g, l)});
        }
      `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${i}, 1)));
        ${ba(n)}
      }
    `;
  const u = n.shapeInfo.texShape, h = u[0], d = u[1], p = n.shapeInfo.flatOffset;
  if (d === o && p == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (d === i && p == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = No(s);
  return t ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function VB(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = hn();
  if (t)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);
    }
  `;
  const o = n.shapeInfo.logicalShape, i = o.length, a = n.shapeInfo.texShape, l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = l[0], u = l[1], h = Math.ceil(o[i - 1] / 2);
  let d = h * Math.ceil(o[i - 2] / 2), p = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
  for (let m = 2; m < i - 1; m++)
    p = `int b${m}, ` + p, d *= o[i - m - 1], f = `b${m} * ${d} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function PB(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = e[3], i = e[2] * o, a = e[1] * i, { newShape: l, keptDims: c } = nr(e);
  if (l.length < e.length) {
    const b = xa(n, l), w = ["row", "col", "depth", "depth2"];
    return `
      ${ya(b, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${wa(w, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${o}, 1)));
        ${ba(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === a && u == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === o && u == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const y = No(s);
  return t ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
}
function MB(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = t[4], o = t[3] * r, i = t[2] * o, a = t[1] * i, { newShape: l, keptDims: c } = nr(t);
  if (l.length < t.length) {
    const m = xa(n, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${ya(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${wa(g, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${o}, ${r})) +
          depth3;
        ${ba(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1];
  if (p === a && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${o}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (p === r && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const f = No(e);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${o} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function XB(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), { newShape: r, keptDims: o } = nr(t);
  if (r.length < t.length) {
    const g = xa(n, r), y = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${ya(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${wa(y, o)});
      }
    `;
  }
  const i = t[5], a = t[4] * i, l = t[3] * a, c = t[2] * l, u = t[1] * c;
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${ba(n)}
      }
    `;
  const h = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, p = d[0], f = d[1];
  if (f === u && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (f === i && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const m = No(e);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function ba(n) {
  const t = n.name, e = H(n.shapeInfo.logicalShape);
  return e < 2 ? `return ${t};` : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function _B(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), r = "get" + s + "AtOutCoords", o = n.shapeInfo.logicalShape.length, i = t.logicalShape.length, a = wv(n.shapeInfo.logicalShape, t.logicalShape), l = re(i), c = i - o;
  let u;
  const h = ["x", "y", "z", "w", "u", "v"];
  o === 0 ? u = "" : i < 2 && a.length >= 1 ? u = "coords = 0;" : u = a.map((b) => `coords.${h[b + c]} = 0;`).join(`
`);
  let d = "";
  i < 2 && o > 0 ? d = "coords" : d = n.shapeInfo.logicalShape.map((b, w) => `coords.${h[w + c]}`).join(", ");
  let p = "return outputValue;";
  const m = H(n.shapeInfo.logicalShape) === 1, y = H(t.logicalShape) === 1;
  if (o === 1 && !m && !y)
    p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !y)
    i === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (a.length) {
    const b = o - 2, w = o - 1;
    a.indexOf(b) > -1 && a.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : a.indexOf(b) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : a.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
}
function KB(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), r = "get" + s + "AtOutCoords", o = t.texShape, i = n.shapeInfo.texShape, a = n.shapeInfo.logicalShape.length, l = t.logicalShape.length;
  if (!n.shapeInfo.isUniform && a === l && n.shapeInfo.flatOffset == null && Vt(i, o))
    return `
      float ${r}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
  const c = re(l), u = wv(n.shapeInfo.logicalShape, t.logicalShape), h = l - a;
  let d;
  const p = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? d = "" : l < 2 && u.length >= 1 ? d = "coords = 0;" : d = u.map((m) => `coords.${p[m + h]} = 0;`).join(`
`);
  let f = "";
  return l < 2 && a > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + h]}`).join(", "), `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
}
function re(n) {
  if (n <= 1)
    return "int";
  if (n === 2)
    return "ivec2";
  if (n === 3)
    return "ivec3";
  if (n === 4)
    return "ivec4";
  if (n === 5)
    return "ivec5";
  if (n === 6)
    return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function o0(n, t, e) {
  const { newShape: s, keptDims: r } = nr(t), o = t.length, i = n && o === 3 && t[0] === 1, a = i ? t.slice(1) : s, l = !n && o > 1 && !Vt(t, e) && s.length < o || i;
  return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: r };
}
function xa(n, t) {
  const e = JSON.parse(JSON.stringify(n));
  return e.shapeInfo.logicalShape = t, e;
}
function wa(n, t) {
  return t.map((e) => n[e]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZB(n, t, e, s) {
  const r = e.map((u, h) => {
    const d = {
      logicalShape: u.shape,
      texShape: u.isUniform ? null : u.texData.texShape,
      isUniform: u.isUniform,
      isPacked: u.isUniform ? !1 : u.texData.isPacked,
      flatOffset: null
    };
    return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (d.flatOffset = u.texData.slice.flatOffset), { name: t.variableNames[h], shapeInfo: d };
  }), o = r.map((u) => u.shapeInfo), i = {
    logicalShape: s.shape,
    texShape: s.texData.texShape,
    isUniform: !1,
    isPacked: s.texData.isPacked,
    flatOffset: null
  }, a = cB(r, i, t), l = WZ(n.gl, a), c = n.createProgram(l);
  return K().get("ENGINE_COMPILE_ONLY") ? {
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: i,
    uniformLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    inShapesLocations: null,
    inTexShapesLocations: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : Object.assign({
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: i
  }, vv(n, t, c));
}
function vv(n, t, e) {
  const s = {}, r = {}, o = {}, i = [];
  let a, l, c, u = null, h = null;
  h = n.getUniformLocation(e, "NAN", !1), K().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(e, "INFINITY", !1));
  const d = !1;
  for (let p = 0; p < t.variableNames.length; p++) {
    const f = t.variableNames[p];
    s[f] = n.getUniformLocation(e, f, d), s[`offset${f}`] = n.getUniformLocation(e, `offset${f}`, d), t.enableShapeUniforms && (r[`${f}Shape`] = n.getUniformLocation(e, `${f}Shape`, d), o[`${f}TexShape`] = n.getUniformLocation(e, `${f}TexShape`, d));
  }
  return t.enableShapeUniforms && (a = n.getUniformLocation(e, "outShape", d), c = n.getUniformLocation(e, "outShapeStrides", d), l = n.getUniformLocation(e, "outTexShape", d)), t.customUniforms && t.customUniforms.forEach((p, f) => {
    i[f] = n.getUniformLocation(e, p.name, d);
  }), {
    uniformLocations: s,
    customUniformLocations: i,
    infLoc: u,
    nanLoc: h,
    inShapesLocations: r,
    inTexShapesLocations: o,
    outShapeLocation: a,
    outShapeStridesLocation: c,
    outTexShapeLocation: l
  };
}
function Ix(n, t) {
  if (n.length !== t.length)
    throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);
  n.forEach((e, s) => {
    const r = e.logicalShape, o = t[s], i = o.shape;
    if (!Vt(r, i))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);
    if (e.isUniform && o.isUniform)
      return;
    const a = e.texShape, l = o.isUniform ? null : o.texData.texShape;
    if (!Vt(a, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`);
  });
}
function BB(n, t, e, s, r) {
  t.program.enableShapeUniforms || (Ix(t.inShapeInfos, e), Ix([t.outShapeInfo], [s]));
  const o = s.texData.texture, i = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(o.texture, i[0], i[1]) : n.setOutputMatrixTexture(o.texture, i[0], i[1]), n.setProgram(t.webGLProgram), K().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && n.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN), e.forEach((l, c) => {
    const u = t.program.variableNames[c], h = t.uniformLocations[u], d = t.uniformLocations[`offset${u}`], p = t.inShapesLocations[`${u}Shape`], f = t.inTexShapesLocations[`${u}TexShape`];
    if (p) {
      const { uniformShape: m } = o0(t.program.packedInputs, l.shape, l.texData.texShape);
      switch (m.length) {
        case 1:
          n.gl.uniform1iv(p, new Int32Array(m));
          break;
        case 2:
          n.gl.uniform2iv(p, new Int32Array(m));
          break;
        case 3:
          n.gl.uniform3iv(p, new Int32Array(m));
          break;
        case 4:
          n.gl.uniform4iv(p, new Int32Array(m));
          break;
      }
    }
    if (f && n.gl.uniform2i(f, l.texData.texShape[0], l.texData.texShape[1]), h != null) {
      if (l.isUniform) {
        if (H(l.shape) < 2)
          n.gl.uniform1f(h, l.uniformValues[0]);
        else {
          let m = l.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), n.gl.uniform1fv(h, m);
        }
        return;
      }
      l.texData.slice != null && d != null && n.gl.uniform1i(d, l.texData.slice.flatOffset), n.setInputMatrixTexture(l.texData.texture.texture, h, c);
    }
  });
  const a = t.outShapeLocation;
  if (a)
    switch (s.shape.length) {
      case 1:
        n.gl.uniform1iv(a, new Int32Array(s.shape));
        break;
      case 2:
        n.gl.uniform2iv(a, new Int32Array(s.shape));
        break;
      case 3:
        n.gl.uniform3iv(a, new Int32Array(s.shape));
        break;
      case 4:
        n.gl.uniform4iv(a, new Int32Array(s.shape));
        break;
    }
  if (t.outShapeStridesLocation) {
    const l = xt(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  t.outTexShapeLocation && n.gl.uniform2i(t.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), t.program.customUniforms && r && t.program.customUniforms.forEach((l, c) => {
    const u = t.customUniformLocations[c], h = r[c];
    if (l.type === "float")
      n.gl.uniform1fv(u, h);
    else if (l.type === "vec2")
      n.gl.uniform2fv(u, h);
    else if (l.type === "vec3")
      n.gl.uniform3fv(u, h);
    else if (l.type === "vec4")
      n.gl.uniform4fv(u, h);
    else if (l.type === "int")
      n.gl.uniform1iv(u, h);
    else if (l.type === "ivec2")
      n.gl.uniform2iv(u, h);
    else if (l.type === "ivec3")
      n.gl.uniform3iv(u, h);
    else if (l.type === "ivec4")
      n.gl.uniform4iv(u, h);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), n.executeProgram();
}
function HB(n, t, e) {
  let s = "";
  t.concat(e).forEach((i) => {
    const a = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !i.isUniform) {
      const l = i.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: h } = o0(n.packedInputs, i.shape, l);
      let d = "", p = "", f = "";
      if (u.length === 1 && n.packedInputs) {
        const S = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        d = `${S[0] > 1}_${S[1] > 1}`;
      } else if (u.length === 2 && !n.packedInputs)
        p = `${u[0] > 1}_${u[1] > 1}`;
      else if (u.length > 2 && !n.packedInputs) {
        const S = xt(u);
        f = `${S[0] === l[1]}_${S[S.length - 1] === l[1]}`;
      }
      const m = i.shape.length, g = u.length === 2 && Vt(i.shape, l), y = H(i.shape) === 1, b = Js(i.shape, e.shape), w = !n.packedInputs && m === e.shape.length && Vt(l, e.texData.texShape), x = n.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      s += `${m}_${w}_${c ? h : ""}_${u.length}_${y}_${b}_${g}_${d}_${p}_${f}_${x}_${a}`;
    } else {
      const l = i.isUniform ? "uniform" : i.texData.texShape;
      s += `${i.shape}_${l}_${a}`;
    }
  });
  const r = n.userCode;
  let o = n.constructor.name;
  return o += "_" + s + "_" + r + `${K().getNumber("WEBGL_VERSION")}`, o;
}
function dn(n) {
  return K().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UB {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = hn();
    this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? vp(["r", "c", "d"], t) : ko(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class YB {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = hn();
    this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? vp(["r", "c", "d"], t) : ko(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jB {
  constructor(t) {
    this.variableNames = ["A"], this.outTexUsage = Xn.DOWNLOAD;
    const e = hn();
    this.outputShape = t, this.userCode = `
      ${xv}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JB {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = Xn.DOWNLOAD;
    const e = hn();
    this.outputShape = t, this.userCode = `
      ${xv}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class QB {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = hn();
    this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length);
    let r = "result";
    e && (r = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? r0() : s0(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${s.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${s.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qB {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = hn();
    this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length);
    let r = "", o = "result";
    e && (o = "floor(result * 255. + 0.5)");
    for (let i = 0; i <= 1; i++)
      for (let a = 0; a <= 1; a++) {
        const l = i * 2 + a;
        r += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms ? "outShape[2]" : `${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms ? "outShape[1]" : `${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? r0() : s0(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${o};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tH(n) {
  const t = hn(), e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return zZ(n, e);
}
function eH(n) {
  const t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return XZ(n, t);
}
function nH(n) {
  const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return _Z(n, t);
}
function Mc(n, t, e, s, r, o) {
  ZZ(t, e);
  const i = KZ(n), a = n.TEXTURE_2D;
  return It(n, () => n.bindTexture(a, i)), It(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), It(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), It(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)), It(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)), K().getNumber("WEBGL_VERSION") === 1 ? It(n, () => n.texImage2D(a, 0, s, t, e, 0, r, o, null)) : It(n, () => n.texStorage2D(a, 1, s, t, e)), It(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: i, texShape: [e, t] };
}
function Cv(n) {
  return n.internalFormatFloat;
}
function sH(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Mc(n, r, o, Cv(s), s.textureFormatFloat, n.FLOAT);
}
function kv(n) {
  return n.internalFormatHalfFloat;
}
function rH(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Mc(n, r, o, kv(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function Nv(n) {
  return n.downloadTextureFormat;
}
function oH(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Mc(n, r, o, Nv(s), n.RGBA, n.UNSIGNED_BYTE);
}
function Tv(n) {
  return n.internalFormatPackedFloat;
}
function iH(n, t, e, s) {
  const [r, o] = ga(t, e);
  return Mc(n, r, o, Tv(s), n.RGBA, n.FLOAT);
}
function $v(n) {
  return n.internalFormatPackedHalfFloat;
}
function aH(n, t, e, s) {
  const [r, o] = ga(t, e);
  return Mc(n, r, o, $v(s), n.RGBA, s.textureTypeHalfFloat);
}
function lH(n, t, e) {
  return It(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), bx(n, t, "clipSpacePos", e, 3, 20, 0) && bx(n, t, "uv", e, 2, 20, 12);
}
function cH(n, t, e, s, r, o) {
  It(n, () => n.bindTexture(n.TEXTURE_2D, t));
  let i, a, l;
  r instanceof Uint8Array ? (i = new Uint8Array(e * s * 4), a = n.UNSIGNED_BYTE, l = n.RGBA) : (i = new Float32Array(e * s * 4), a = n.FLOAT, l = o.internalFormatPackedFloat), i.set(r), K().getNumber("WEBGL_VERSION") === 2 ? It(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)) : It(n, () => n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)), It(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function uH(n, t, e) {
  It(n, () => n.bindTexture(n.TEXTURE_2D, t)), e.data instanceof Uint8Array ? K().getNumber("WEBGL_VERSION") === 2 ? It(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e.width, e.height, n.RGBA, n.UNSIGNED_BYTE, e.data)) : It(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, e.width, e.height, 0, n.RGBA, n.UNSIGNED_BYTE, e.data)) : K().getNumber("WEBGL_VERSION") === 2 ? It(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, e)) : It(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, e)), It(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function hH(n, t, e, s) {
  const r = n.createBuffer();
  It(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, r));
  const a = 4 * 4 * t * e;
  return It(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)), It(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)), It(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), r;
}
function dH(n, t, e) {
  const s = n, r = new Float32Array(e);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, t), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
}
function pH(n, t, e, s) {
  const [r, o] = Vc(t, e), i = 4, a = new Uint8Array(EZ(t * e, i));
  return It(n, () => n.readPixels(0, 0, r, o, s.downloadTextureFormat, n.UNSIGNED_BYTE, a)), new Float32Array(a.buffer);
}
function fH(n, t, e, s, r, o, i, a) {
  const l = n, c = new Float32Array(LZ(o, i));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
}
function mH(n, t, e) {
  const s = new Float32Array(t * e * 4);
  return It(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Zp {
  constructor(t) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];
    const e = K().getNumber("WEBGL_VERSION");
    t != null ? (this.gl = t, TZ(e, t)) : this.gl = Is(e);
    let s = "WEBGL_color_buffer_float";
    const r = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), K().getNumber("WEBGL_VERSION") === 1) {
      const o = "OES_texture_float", i = "OES_texture_half_float";
      if (this.textureFloatExtension = ru(this.gl, o), rs(this.gl, i))
        this.textureHalfFloatExtension = ru(this.gl, i);
      else if (K().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), rs(this.gl, r))
        this.colorBufferHalfFloatExtension = ru(this.gl, r);
      else if (K().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", rs(this.gl, s))
      this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (rs(this.gl, r))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = eH(this.gl), this.indexBuffer = nH(this.gl), this.framebuffer = BZ(this.gl), this.textureConfig = n0(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return K().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const t = this.gl;
    It(t, () => t.finish()), It(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)), It(t, () => t.deleteFramebuffer(this.framebuffer)), It(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)), It(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)), It(t, () => t.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(t, e) {
    return this.throwIfDisposed(), sH(this.gl, t, e, this.textureConfig);
  }
  createFloat16MatrixTexture(t, e) {
    return this.throwIfDisposed(), rH(this.gl, t, e, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(t, e) {
    return this.throwIfDisposed(), oH(this.gl, t, e, this.textureConfig);
  }
  uploadPixelDataToTexture(t, e) {
    this.throwIfDisposed(), uH(this.gl, t, e);
  }
  uploadDenseMatrixToTexture(t, e, s, r) {
    this.throwIfDisposed(), cH(this.gl, t, e, s, r, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), aH(this.gl, t, e, this.textureConfig);
  }
  createPackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), iH(this.gl, t, e, this.textureConfig);
  }
  deleteMatrixTexture(t) {
    this.throwIfDisposed(), this.outputTexture === t && (xx(this.gl, this.framebuffer), this.outputTexture = null), It(this.gl, () => this.gl.deleteTexture(t));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => pH(this.gl, e, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(t, e, s, r, o, i) {
    return fH(this.gl, t, e, s, r, o, i, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(t, e) {
    return dH(this.gl, t, e);
  }
  createBufferFromTexture(t, e, s) {
    this.bindTextureToFrameBuffer(t);
    const r = hH(this.gl, e, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r;
  }
  createAndWaitForFence() {
    const t = this.createFence(this.gl);
    return this.pollFence(t);
  }
  createFence(t) {
    let e, s;
    if (K().getBool("WEBGL_FENCE_API_ENABLED")) {
      const r = t, o = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t.flush(), s = () => {
        const i = r.clientWaitSync(o, 0, 0);
        return i === r.ALREADY_SIGNALED || i === r.CONDITION_SATISFIED;
      }, e = o;
    } else
      K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(e, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => !0;
    return { query: e, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => mH(this.gl, e, s));
  }
  createProgram(t) {
    this.throwIfDisposed();
    const e = this.gl;
    this.vertexShader == null && (this.vertexShader = tH(e));
    const s = PZ(e);
    return It(e, () => e.attachShader(s, this.vertexShader)), It(e, () => e.attachShader(s, t)), MZ(e, s), this.debug && Pp(e, s), this.vertexAttrsAreBound || (this.setProgram(s), this.vertexAttrsAreBound = lH(e, this.program, this.vertexBuffer)), s;
  }
  deleteProgram(t) {
    this.throwIfDisposed(), t === this.program && (this.program = null), t != null && It(this.gl, () => this.gl.deleteProgram(t));
  }
  setProgram(t) {
    this.throwIfDisposed(), this.program = t, this.program != null && this.debug && Pp(this.gl, this.program), It(this.gl, () => this.gl.useProgram(t));
  }
  getUniformLocation(t, e, s = !0) {
    return this.throwIfDisposed(), s ? UZ(this.gl, t, e) : YZ(this.gl, t, e);
  }
  getAttributeLocation(t, e) {
    return this.throwIfDisposed(), It(this.gl, () => this.gl.getAttribLocation(t, e));
  }
  getUniformLocationNoThrow(t, e) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
  }
  setInputMatrixTexture(t, e, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), jZ(this.gl, t, e, s);
  }
  setOutputMatrixTexture(t, e, s) {
    this.setOutputMatrixTextureDriver(t, s, e);
  }
  setOutputPackedMatrixTexture(t, e, s) {
    this.throwIfDisposed();
    const [r, o] = ga(e, s);
    this.setOutputMatrixTextureDriver(t, r, o);
  }
  setOutputMatrixWriteRegion(t, e, s, r) {
    this.setOutputMatrixWriteRegionDriver(s, t, r, e);
  }
  setOutputPackedMatrixWriteRegion(t, e, s, r) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Pp(this.gl, this.program), ou(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const t = this.gl;
    this.debug && this.debugValidate(), It(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), It(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = ru(this.gl, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.createQuery();
      return s.beginQuery(r.TIME_ELAPSED_EXT, o), o;
    }
    const t = this.getQueryTimerExtensionWebGL1(), e = t.createQueryEXT();
    return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
  }
  endQuery() {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const e = this.gl, s = this.getQueryTimerExtensionWebGL2();
      e.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const t = this.getQueryTimerExtensionWebGL1();
    t.endQueryEXT(t.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(t) {
    return await lf(() => this.disposed || this.isQueryAvailable(t, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(t, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(t, e) {
    if (e === 0)
      return null;
    if (e === 2) {
      const s = this.gl;
      return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(t, e) {
    if (e === 0)
      return !0;
    if (e === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), r = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
    }
  }
  pollFence(t) {
    return new Promise((e) => {
      this.addItemToPoll(() => t.isFencePassed(), () => e());
    });
  }
  pollItems() {
    const t = gH(this.itemsToPoll.map((e) => e.isDoneFn));
    for (let e = 0; e <= t; ++e) {
      const { resolveFn: s } = this.itemsToPoll[e];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t + 1);
  }
  addItemToPoll(t, e) {
    if (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }), this.itemsToPoll.length > 1)
      return;
    let s;
    "setTimeoutCustom" in K().platform && (s = K().platform.setTimeoutCustom.bind(K().platform)), lf(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(t) {
    this.throwIfDisposed(), Mp(this.gl, t, this.framebuffer), this.debug && ou(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Mp(this.gl, this.outputTexture, this.framebuffer), this.debug && ou(this.gl)) : xx(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(t, e) {
    this.bindTextureToFrameBuffer(t);
    const s = e();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(t, e, s) {
    this.throwIfDisposed();
    const r = this.gl;
    Mp(r, t, this.framebuffer), this.debug && ou(r), this.outputTexture = t, It(r, () => r.viewport(0, 0, e, s)), It(r, () => r.scissor(0, 0, e, s));
  }
  setOutputMatrixWriteRegionDriver(t, e, s, r) {
    this.throwIfDisposed(), It(this.gl, () => this.gl.scissor(t, e, s, r));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function gH(n) {
  let t = 0;
  for (; t < n.length && n[t](); ++t)
    ;
  return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yH(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hn(n) {
  return (t, e, s, r, o) => {
    const i = Et(t, e), a = i.length, l = xt(i), c = H(i), u = ue(o, c), h = t.length, d = e.length, p = xt(t), f = xt(e), m = Js(t, i), g = Js(e, i);
    if (m.length + g.length === 0)
      for (let y = 0; y < u.length; ++y)
        u[y] = n(s[y % s.length], r[y % r.length]);
    else
      for (let y = 0; y < u.length; ++y) {
        const b = Ws(y, a, l), w = b.slice(-h);
        m.forEach((T) => w[T] = 0);
        const x = Rn(w, h, p), S = b.slice(-d);
        g.forEach((T) => S[T] = 0);
        const v = Rn(S, d, f);
        u[y] = n(s[x], r[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bH(n, t, e, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [t, "int32", r];
  }
  if (s === "bool") {
    const r = sr([0], e), [o, i] = Hn((a, l) => a !== l ? 1 : 0)(t, [], n, r, "bool");
    return [i, "bool", o];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xH = Hn((n, t) => n + t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wH(n, t, e, s, r) {
  const o = H(s), i = Ie(r, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= r || (o > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function IH(n, t, e, s = !1) {
  const r = n.shape[0], o = n.shape[1], i = $t([r, e], t.dtype);
  for (let a = 0; a < r; a++)
    for (let l = 0; l < o; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ar(n) {
  return (t, e, s) => {
    const r = ue(e, t.length);
    for (let o = 0; o < t.length; ++o)
      r[o] = n(t[o], s);
    return r;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SH = Ar((n) => Math.ceil(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vH(n, t, e, s) {
  const r = Bt(e, H(t));
  if (s && e !== "string") {
    let o = 0;
    n.forEach((i) => {
      const a = H(i.shape);
      r.set(i.vals, o), o += a;
    });
  } else {
    let o = 0;
    n.forEach((i) => {
      const a = e === "string" ? er(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + o;
        for (let h = 0; h < i.shape[1]; ++h)
          r[u + h] = a[l++];
      }
      o += i.shape[1];
    });
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CH = Hn((n, t) => n === t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kH = Ar((n) => Math.exp(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NH = Ar((n) => Math.expm1(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TH = Ar((n) => Math.floor(n));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $H(n, t, e, s, r, o, i, a, l) {
  const c = $t([s, o], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < r; p++) {
      const f = n[u * r + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / o)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < o; p++)
      c.values[u * o + p] = t.get(...t.indexToLoc(d * o + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RH(n, t, e) {
  const s = $t(e, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const i = s.indexToLoc(r).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EH = Hn((n, t) => n > t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LH = Hn((n, t) => n >= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DH = Hn((n, t) => n < t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GH = Hn((n, t) => n <= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FH(n, t, e) {
  const s = (t - n) / (e - 1), r = Ie(e, "float32");
  r[0] = n;
  for (let o = 1; o < r.length; o++)
    r[o] = r[o - 1] + s;
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OH = Ar((n) => Math.log(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AH(n, t, e, s) {
  const r = ue(s, H(e));
  for (let o = 0; o < r.length; ++o) {
    const i = o * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    r[o] = a;
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zH = Hn((n, t) => Math.max(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WH = Hn((n, t) => Math.min(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rv = Hn((n, t) => n * t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VH(n, t, e) {
  const s = Vs(-1, e);
  return Rv([], t, s, n, e);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PH = Hn((n, t) => n !== t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MH(n, t, e, s, r) {
  const o = t.length, i = H(t), a = xt(t), l = xt(r), c = ue(e, H(r));
  for (let u = 0; u < i; ++u) {
    const h = Ws(u, o, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = Rn(d, o, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XH(n, t, e, s) {
  const [r, o] = ze(n, s), i = ln(t, "int32"), a = Ie(H(r), i), l = H(o);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: r, outDtype: i };
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _H(n, t, e) {
  n.forEach((s, r) => {
    if (s < 0 || s >= e) {
      const o = Ws(r, t.length, xt(t)).join(",");
      throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`);
    }
  });
}
function KH(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], r = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r)
      throw new Error("Ragged splits must not point past values");
    for (let o = 1; o < s.length; ++o)
      if (s[o - 1] > s[o])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function ZH(n, t, e, s) {
  const r = [];
  let o = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  KH(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const m = a[f], g = m[m.length - 1] - p[u];
        for (let y = u; y < h; ++y)
          a[f].push(p[y + 1] + g);
      }
      u = p[u], h = p[h];
    }
    h !== u && (r.push([u, h]), o += h - u);
  }
  return { outSplits: a, valueSlices: r, numValues: o };
}
function BH(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, r = Bt("int32", s);
    t.push(r), n[e].forEach((o, i) => r[i] = o);
  }
  return t;
}
function Sx(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function HH(n, t, e, s, r, o) {
  const i = Sx(t, 2)[1], a = Sx(o, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        r[l * a + h] = n[u * i + h];
      ++l;
    }
}
function UH(n, t, e, s, r) {
  const o = t.slice();
  o[0] = r;
  const i = Bt(e, H(o)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return HH(n, t, s, l, i, o), [i, o];
}
function YH(n, t, e, s, r, o, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (_H(o, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = ZH(o, i, n, c), p = BH(u), f = UH(e, s, r, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var jn = qn;
class Uu {
  constructor(t, e, s, r, o, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Pg(u), this.raggedRank = Mg(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === jn.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === jn.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case jn.VALUE_ROWIDS:
        return Uu.getMaxWidthValueRowID(e);
      case jn.ROW_SPLITS:
        return Uu.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${jn[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let r = 0; r < e - 1; ++r) {
      const o = t[r + 1] - t[r];
      o > s && (s = o);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, r = t[0], o = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== r && (r = a, o = Math.max(i - s, o), s = i);
    }
    return Math.max(e - s, o);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return Cx(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    Xg(s, e);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = Vg(this.raggedRank, r, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  calculateFirstParentOutputIndex(t, e, s) {
    const r = Math.min(t, s), o = [];
    let i = 0;
    for (let a = 0; a < r; ++a, i += e)
      o.push(i);
    for (let a = r; a < t; ++a)
      o.push(-1);
    return k(o.length === t, () => "Final length of result must be equal to firstDimension."), o;
  }
  calculateOutputIndexRowSplit(t, e, s, r) {
    const o = t.length, i = [];
    for (let a = 0; a < o - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(r, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (o > 0 && i.length !== t[o - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  calculateOutputIndexValueRowID(t, e, s, r) {
    const o = t.length, i = [];
    if (o === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < o; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < r ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, r) {
    const o = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case jn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(o, e, s, r);
      case jn.ROW_SPLITS:
        if (o.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(o, e, s, r);
      default:
        throw new Error(`Unsupported partition type: ${jn[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case jn.FIRST_DIM_SIZE:
        return t[0];
      case jn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case jn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${jn[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let l = r.length - 2; l >= 0; --l)
      r[l] = r[l + 1] * s[l + 1];
    const o = Cx(s, !1), i = Bt(this.valuesDType, H(o));
    if (r[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
      this.setOutput(this.raggedRank, l, i, o);
    }
    return [o, i];
  }
  setOutput(t, e, s, r) {
    if (s.length === 0)
      return;
    const o = this.values, i = s;
    let a = r.slice();
    a = a.slice(t + 1);
    const l = H(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      M(() => {
        const m = W(u, f);
        u = gr(m, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? e[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const g = o.subarray(h * l), y = i.subarray(d * l), b = (p - d) * l;
        vx(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = i.slice(p * l);
            vx(g, u, l), ++p;
          }
      m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function vx(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function Cx(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function jH(n, t, e, s, r, o, i, a, l, c) {
  return new Uu(n, t, e, s, r, o, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JH(n, t, e, s) {
  const r = n === t, o = n < t && e < 0, i = t < n && e > 1;
  if (r || o || i)
    return Ie(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = Ie(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QH = Ar((n) => 1 / Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qH(n, t, e, s, r, o, i, a, l, c) {
  const u = [s / r, r], h = n.values, d = t.values;
  if (s === 0)
    return $t(e, t.dtype);
  const p = $t(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < o; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < i; y++) {
      const b = h[f * i + y];
      m.push(b), g += b * a[y];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${e}`);
    for (let y = 0; y < r; y++)
      c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = t.rank === 0 ? d[0] : d[f * r + y];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tU = Ar((n) => 1 / (1 + Math.exp(-n)));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eU(n, t, e, s, r) {
  const o = ad(s, t, e), i = H(e), a = xt(s);
  if (o) {
    const h = ld(t, a);
    return r === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = r === "string" ? er(n) : n, c = $t(s, r, l), u = $t(e, r);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, m) => f + t[m]);
    u.set(c.get(...p), ...d);
  }
  return r === "string" ? by(u.values) : u.values;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nU(n, t, e, s, r, o, i) {
  const a = t[0], l = o[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(iy(a));
    const g = Bt(e, 0), y = Bt(r, 0);
    return [
      g,
      [0, h],
      y,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < a; ++g) {
    const y = n[g * h];
    if (y < 0)
      throw new Error(ay(g, y));
    if (y >= l)
      throw new Error(ly(g, y, l));
    ++f[y], d = d && y >= p, p = y;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    const g = n, y = s;
    for (let b = 0; b < a; ++b)
      u[b] = b;
    return [
      g,
      [a, h],
      y,
      c,
      u
    ];
  } else {
    const g = f[l - 1], y = Bt(e, g * h), b = Bt(r, g), w = new Array(l).fill(0);
    for (let x = 0; x < a; ++x) {
      const S = n[x * h], v = w[S], T = (S === 0 ? 0 : f[S - 1]) + v;
      w[S]++;
      for (let $ = 0; $ < h; ++$)
        y[T * h + $] = n[x * h + $];
      b[T] = s[x], u[x] = T;
    }
    for (let x = 0; x < l; ++x)
      if (w[x] === 0) {
        const v = x === 0 ? 0 : f[x - 1];
        y[v * h + 0] = x;
        for (let T = 1; T < h; ++T)
          y[v * h + T] = 0;
        b[v] = i;
      }
    return [
      y,
      [g, h],
      b,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sU(n, t, e, s, r) {
  const o = H(s), i = t[0], a = r.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < a; ++g) {
    const y = r[g];
    if (y === -1) {
      if (u !== -1)
        throw new Error(cy(u, g));
      u = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(uy(g, y));
      c *= y, l.push(y);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(hy());
    const g = Math.trunc(o / c);
    if (c * g !== o)
      throw new Error(dy(s, l));
    l[u] = g;
  }
  if (H(l) !== o)
    throw new Error(py(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let g = a - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = Bt(e, i * a);
  for (let g = 0; g < i; ++g) {
    let y = 0;
    for (let b = 0; b < d; ++b)
      y += n[g * d + b] * p[b];
    for (let b = 0; b < a; ++b)
      m[g * a + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rU(n, t, e, s, r, o = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? r[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(Ya());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, x) => w * x, 1), f = Bt(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(Ya());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let w = 0;
    if (g < a) {
      if (w = r[g], b === w) {
        ++g;
        continue;
      }
      if (b >= w)
        throw new Error(fy());
    }
    if (b < 0 || b >= h)
      throw new Error(my(b, h));
    b > y && f.fill(i, y * c, b * c);
    for (let x = m; x < g; ++x) {
      const S = s[x];
      if (S < 0 || S >= l[0])
        throw new Error(gy(x, s[x], l[0]));
      for (let v = 0; v < c; v++)
        f[b * c + v] += n[S * c + v];
    }
    if (o)
      for (let x = 0; x < c; x++)
        f[b * c + x] /= g - m;
    if (m = g, ++g, y = b + 1, b = w, g > a)
      break;
  }
  return y < h && f.fill(i, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oU = Ar((n) => Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iU = Hn((n, t) => {
  const e = n - t;
  return e * e;
});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aU(n, t, e, s) {
  const r = $t(n, t.dtype);
  for (let o = 0; o < r.size; o++) {
    const i = r.indexToLoc(o), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    r.set(t.get(...a), ...i);
  }
  return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lU {
  constructor(t, e, s, r, o, i) {
    this.separator = Kn(t), this.nGramWidths = e, this.leftPad = Kn(s), this.rightPad = Kn(r), this.padWidth = o, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, r, o, i) {
    for (let a = 0; a < o; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (o - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < h; ++b)
        p += t[d + b].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[r + a] = new Uint8Array(p);
      const m = s[r + a];
      let g = 0;
      const y = (b) => b.forEach((w) => m[g++] = w);
      for (let b = 0; b < c; ++b)
        y(this.leftPad), y(this.separator);
      for (let b = 0; b < h - 1; ++b)
        y(t[d + b]), y(this.separator);
      if (h > 0) {
        y(t[d + h - 1]);
        for (let b = 0; b < u; ++b)
          y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(t, e) {
    const s = t.length, r = e.length;
    if (r > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < r; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const o = r - 1, i = Bt("int32", r);
    if (s === 0 || r === 0) {
      const l = new Array(s);
      for (let c = 0; c <= o; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= o; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[o]);
    for (let l = 0; l < o; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
}
function cU(n, t, e, s, r, o, i, a) {
  return new lU(e, s, r, o, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uU(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let o = 0; o < n.length; ++o)
      s.push(n.subarray(o, o + 1));
    return;
  }
  if (t.length === 1) {
    const o = t[0];
    let i = n.indexOf(o);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(o);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let o = 0; o < n.length + 1; o++)
    if (o === n.length || t.indexOf(n[o]) !== -1) {
      const i = n.subarray(r, o);
      (!e || i.length !== 0) && s.push(i), r = o + 1;
    }
}
function hU(n, t, e) {
  const s = n.length, r = [];
  let o = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = r.length;
    uU(n[d], t, e, r);
    const f = r.length - p;
    a[d] = f, o += f, i = Math.max(i, f);
  }
  const l = Bt("int32", o * 2), c = new Array(o), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dU(n, t) {
  const e = Bt("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = fm(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pU = Hn((n, t) => n - t);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fU(n, t) {
  const e = new Array(n.rank);
  for (let r = 0; r < e.length; r++)
    e[r] = n.shape[r] * t[r];
  const s = $t(e, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const o = s.indexToLoc(r), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = o[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[r] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Aa = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function Ev(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      Ev(n, t, d, p);
    }
    const r = n[t];
    let o = e, i = s;
    for (kn(n, e, t), Aa(n[s], r) > 0 && kn(n, e, s); o < i; ) {
      for (kn(n, o, i), o++, i--; Aa(n[o], r) < 0; )
        o = o + 1;
      for (; Aa(n[i], r) > 0; )
        i = i - 1;
    }
    Aa(n[e], r) === 0 ? kn(n, e, i) : (i = i + 1, kn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function mU(n, t, e, s, r) {
  const o = t[t.length - 1], [i, a] = [n.length / o, o], l = ue(e, i * s), c = ue("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((b, w) => f[w] = { value: b, index: w }), s < f.length && (Ev(f, s), f = f.slice(0, s)), r && f.sort(Aa);
    const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++)
      g[b] = f[b].value, y[b] = f[b].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    $t(u, e, l),
    $t(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gU(n, t, e, s) {
  const r = At(t, e)[0], o = [1, e[0], 1];
  for (let f = 0; f < r; f++)
    o[0] *= e[f];
  o[1] = e[r];
  for (let f = r + 1; f < e.length; f++)
    o[2] *= e[f];
  const i = {}, a = new Int32Array(e[r]), l = new ve(o, s, n), c = [], u = o[0] === 1 && o[2] === 1;
  for (let f = 0; f < e[r]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let y = 0; y < o[0]; y++)
        for (let b = 0; b < o[2]; b++)
          g.push(l.get(y, f, b));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      a[f] = i[m];
    else {
      const g = Object.keys(i).length;
      i[m] = g, a[f] = g, c.push(f);
    }
  }
  const h = o.slice();
  h[1] = Object.keys(i).length;
  const d = new ve(h, s);
  c.forEach((f, m) => {
    for (let g = 0; g < o[0]; g++)
      for (let y = 0; y < o[2]; y++)
        d.set(l.get(g, f, y), g, m, y);
  });
  const p = e.slice();
  return p[r] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yU = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  simpleAbsImpl: yH,
  addImpl: xH,
  bincountImpl: wH,
  bincountReduceImpl: IH,
  castImpl: bH,
  ceilImpl: SH,
  concatImpl: vH,
  equalImpl: CH,
  expImpl: kH,
  expm1Impl: NH,
  floorImpl: TH,
  gatherNdImpl: $H,
  gatherV2Impl: RH,
  greaterImpl: EH,
  greaterEqualImpl: LH,
  lessImpl: DH,
  lessEqualImpl: GH,
  linSpaceImpl: FH,
  logImpl: OH,
  maxImpl: AH,
  maximumImpl: zH,
  minimumImpl: WH,
  multiplyImpl: Rv,
  negImpl: VH,
  notEqualImpl: PH,
  prodImpl: XH,
  raggedGatherImpl: YH,
  raggedTensorToTensorImpl: jH,
  rangeImpl: JH,
  rsqrtImpl: QH,
  scatterImpl: qH,
  sigmoidImpl: tU,
  sliceImpl: eU,
  sparseFillEmptyRowsImpl: nU,
  sparseReshapeImpl: sU,
  sparseSegmentReductionImpl: rU,
  sqrtImpl: oU,
  squaredDifferenceImpl: iU,
  stridedSliceImpl: aU,
  stringNGramsImpl: cU,
  stringSplitImpl: hU,
  stringToHashBucketFastImpl: dU,
  subImpl: pU,
  tileImpl: fU,
  topKImpl: mU,
  transposeImpl: MH,
  uniqueImpl: gU
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: bU, bincountImpl: Lv, bincountReduceImpl: xU, castImpl: wU, ceilImpl: IU, concatImpl: SU, equalImpl: vU, expImpl: CU, expm1Impl: kU, floorImpl: NU, gatherNdImpl: TU, gatherV2Impl: $U, greaterImpl: RU, greaterEqualImpl: EU, lessImpl: LU, lessEqualImpl: DU, linSpaceImpl: GU, logImpl: FU, maxImpl: OU, maximumImpl: AU, minimumImpl: zU, multiplyImpl: WU, negImpl: VU, notEqualImpl: PU, prodImpl: MU, raggedGatherImpl: XU, raggedTensorToTensorImpl: _U, rangeImpl: KU, rsqrtImpl: ZU, scatterImpl: BU, sigmoidImpl: HU, simpleAbsImpl: Dv, sliceImpl: UU, sparseFillEmptyRowsImpl: YU, sparseReshapeImpl: jU, sparseSegmentReductionImpl: Gv, sqrtImpl: JU, stridedSliceImpl: QU, stringNGramsImpl: qU, stringSplitImpl: t9, stringToHashBucketFastImpl: e9, subImpl: n9, tileImpl: s9, topKImpl: r9, transposeImpl: i0, uniqueImpl: o9 } = yU;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fv(n, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((e) => `${n}.${e}`);
}
function an(n, t) {
  return t === 1 ? [n] : Fv(n, t);
}
function i9(n, t) {
  if (n === 1)
    return "rc";
  let e = "";
  for (let s = 0; s < n; s++)
    e += t[s], s < n - 1 && (e += ",");
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class a9 {
  constructor(t) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.enableShapeUniforms = dn(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const e = an("rc", this.rank), s = re(this.rank), r = this.getOutOfBoundsCondition(e), o = this.getSetup(e), i = this.getOutput(e);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${o}

            setOutput(vec4(${i}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(t) {
    const e = [];
    for (let s = 0; s <= 1; s++)
      for (let r = 0; r <= 1; r++) {
        let o = `${s === 0 ? "r" : "rp1"}, ${r === 0 ? "c" : "cp1"}`;
        for (let i = 2; i < this.rank; i++)
          o = `${t[t.length - 1 - i]},` + o;
        e.push(o);
      }
    return e;
  }
  getOutOfBoundsCondition(t) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let e = "";
    for (let s = this.rank - 2; s < this.rank; s++)
      e += `${t[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (e += "||");
    return e;
  }
  getSetup(t) {
    if (this.rank === 1)
      return "";
    const e = t.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], r = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
  }
  getOutput(t) {
    const e = this.getSourceCoordsArr(t);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ov {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length);
    let s = "";
    for (let r = 0; r < 4; r++) {
      let o = "thisRC = rc;";
      r % 2 === 1 && (o += "thisRC.z += 1;"), r > 1 && (o += "thisRC.y += 1;"), s += `
        ${o}
        ${r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${l9(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? r0() : s0(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function l9(n, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? lB(["r", "c", "d"], "inputShape") : ko(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class c9 {
  constructor(t) {
    this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
  }
  acquireTexture(t, e, s) {
    const r = Nx(e, s), o = Tx(t, r, s);
    o in this.freeTextures || (this.freeTextures[o] = []), o in this.usedTextures || (this.usedTextures[o] = []);
    const i = kx(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[o].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= i, this.log();
      const l = this.freeTextures[o].shift();
      return this.usedTextures[o].push(l), l;
    }
    let a;
    return r === He.PACKED_2X2_FLOAT32 ? a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : r === He.PACKED_2X2_FLOAT16 ? a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : r === He.UNPACKED_FLOAT32 ? a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : r === He.UNPACKED_FLOAT16 ? a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : r === He.PACKED_4X1_UNSIGNED_BYTE && (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[o].push(a), this.numUsedTextures++, this._numBytesAllocated += i, this.log(), a;
  }
  releaseTexture(t, e, s, r) {
    if (this.freeTextures == null)
      return;
    const o = Nx(s, r), i = Tx(e, o, r);
    i in this.freeTextures || (this.freeTextures[i] = []);
    const a = kx(e, o, this.gpgpu.gl, this.gpgpu.textureConfig, r), l = K().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(t.texture), this._numBytesAllocated -= a) : (this.freeTextures[i].push(t), this.numFreeTextures++, this._numBytesFree += a), this.numUsedTextures--;
    const c = this.usedTextures[i], u = c.indexOf(t);
    if (u < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    c.splice(u, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const t = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${t})`);
    const e = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const t in this.freeTextures)
        this.freeTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      for (const t in this.usedTextures)
        this.usedTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function u9(n, t) {
  const e = n;
  if (t === e.R32F)
    return 4;
  if (t === e.R16F)
    return 2;
  if (t === e.RGBA32F)
    return 16;
  if (t === n.RGBA)
    return 16;
  if (t === e.RGBA16F)
    return 8;
  if (t === e.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function kx(n, t, e, s, r) {
  const o = h9(t, s);
  let i;
  if (r) {
    const [l, c] = ga(n[0], n[1]);
    i = l * c;
  } else {
    const [l, c] = Vc(n[0], n[1]);
    i = l * c;
  }
  const a = u9(e, o);
  return i * a;
}
function h9(n, t) {
  switch (n) {
    case He.PACKED_2X2_FLOAT32:
      return Tv(t);
    case He.PACKED_2X2_FLOAT16:
      return $v(t);
    case He.UNPACKED_FLOAT32:
      return Cv(t);
    case He.UNPACKED_FLOAT16:
      return kv(t);
    case He.PACKED_4X1_UNSIGNED_BYTE:
      return Nv(t);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function d9(n) {
  return K().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? He.PACKED_2X2_FLOAT32 : He.UNPACKED_FLOAT32 : n ? He.PACKED_2X2_FLOAT16 : He.UNPACKED_FLOAT16;
}
function Nx(n, t) {
  if (n === Xn.UPLOAD)
    return He.PACKED_2X2_FLOAT32;
  if (n === Xn.RENDER || n == null)
    return d9(t);
  if (n === Xn.DOWNLOAD || n === Xn.PIXELS)
    return He.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function Tx(n, t, e) {
  return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Zs {
  constructor(t, e) {
    this.variableNames = ["A"], this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const us = "if (isnan(x)) return x;", p9 = "return x;", $x = "return abs(x);", f9 = "return (x >= 0.0) ? x : (exp(x) - 1.0);", m9 = us + `
  return (x < 0.0) ? 0.0 : x;
`, g9 = us + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Ro = "return x;", y9 = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b9 = "return x;", x9 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, w9 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, I9 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, S9 = "return 1.0 / (1.0 + exp(-1.0 * x));";
class Ur {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class v9 {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length);
    const e = t.length, s = an("rc", e), r = re(e), o = i9(e, s), i = s.slice(-2), a = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
    this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${o});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C9 = Ad, k9 = 1e-7, N9 = 1e-4, au = {};
function T9(n) {
  return n in au || (au[n] = {}), au[n];
}
const $9 = K().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), R9 = 600;
function E9() {
  return K().global.screen == null ? 1024 : K().global.screen.height * K().global.screen.width * window.devicePixelRatio * R9 / 1024 / 1024;
}
class Cp extends Qu {
  constructor(t) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !K().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let e;
    if (t != null) {
      if (t instanceof Zp)
        e = t;
      else {
        const s = Is(K().getNumber("WEBGL_VERSION"), t);
        e = new Zp(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const s = Is(K().getNumber("WEBGL_VERSION"));
      e = new Zp(s), this.binaryCache = T9(K().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = e, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new c9(this.gpgpu), this.numMBBeforeWarning = E9(), this.texData = new rm(this, oe());
  }
  nextDataId() {
    return Cp.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(t, e, s) {
    if ((K().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || K().getBool("DEBUG")) && this.checkNumericalProblems(t), s === "complex64" && t != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const r = { id: this.nextDataId() };
    return this.texData.set(r, { shape: e, dtype: s, values: t, usage: Xn.UPLOAD, refCount: 1 }), r;
  }
  refCount(t) {
    return this.texData.has(t) ? this.texData.get(t).refCount : 0;
  }
  incRef(t) {
    const e = this.texData.get(t);
    e.refCount++;
  }
  decRef(t) {
    if (this.texData.has(t)) {
      const e = this.texData.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, r, o) {
    if (K().getBool("DEBUG") && this.checkNumericalProblems(e), r === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t, { shape: s, dtype: r, values: e, usage: Xn.UPLOAD, refCount: o });
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  readSync(t) {
    const e = this.texData.get(t), { values: s, dtype: r, complexTensorInfos: o, slice: i, shape: a, isPacked: l } = e;
    if (i != null) {
      let d;
      l ? d = new Ur(a, Ro) : d = new Zs(a, Ro);
      const p = this.runWebGLProgram(d, [{ dataId: t, shape: a, dtype: r }], r), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (r === "string")
      return s;
    const c = this.activeTimers != null;
    let u;
    c && (u = Ze());
    let h;
    if (r === "complex64") {
      const d = this.readSync(o.real.dataId), p = this.readSync(o.imag.dataId);
      h = tr(d, p);
    } else
      h = this.getValuesFromTexture(t);
    return c && (this.downloadWaitMs += Ze() - u), this.convertAndCacheOnCPU(t, h);
  }
  async read(t) {
    if (this.pendingRead.has(t)) {
      const f = this.pendingRead.get(t);
      return new Promise((m) => f.push(m));
    }
    const e = this.texData.get(t), { values: s, shape: r, slice: o, dtype: i, complexTensorInfos: a, isPacked: l } = e;
    if (o != null) {
      let f;
      l ? f = new Ur(r, Ro) : f = new Zs(r, Ro);
      const m = this.runWebGLProgram(f, [{ dataId: t, shape: r, dtype: i }], i), g = this.read(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (K().getBool("DEBUG") && !K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && K().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, u;
    if (i !== "complex64" && K().get("WEBGL_BUFFER_SUPPORTED")) {
      u = this.decode(t);
      const f = this.texData.get(u.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...su(r));
    }
    this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let h;
    if (i === "complex64") {
      const f = await Promise.all([
        this.read(a.real.dataId),
        this.read(a.imag.dataId)
      ]), m = f[0], g = f[1];
      h = tr(m, g);
    } else if (c == null)
      h = this.getValuesFromTexture(t);
    else {
      const f = H(r);
      h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
      const f = this.gpgpu.gl;
      It(f, () => f.deleteBuffer(c));
    }
    const d = this.convertAndCacheOnCPU(t, h), p = this.pendingRead.get(t);
    return this.pendingRead.delete(t), p.forEach((f) => f(d)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && oe().removeDataId(t, this), this.pendingDeletes--), d;
  }
  readToGPU(t, e = {}) {
    const s = this.texData.get(t), { values: r, shape: o, slice: i, dtype: a, isPacked: l, texture: c } = s;
    if (a === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (i != null) {
      let p;
      l ? p = new Ur(o, Ro) : p = new Zs(o, Ro);
      const f = this.runWebGLProgram(p, [{ dataId: t, shape: o, dtype: a }], a), m = this.readToGPU(f, e);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (c == null)
      throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const u = this.decode(t, e.customTexShape), h = oe().makeTensorFromTensorInfo(u), d = this.texData.get(u.dataId);
    return Object.assign({ tensorRef: h }, d.texture);
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((r) => Us(r));
        return $t(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return $t(t.shape, t.dtype, e);
  }
  checkNumericalProblems(t) {
    if (t != null)
      for (let e = 0; e < t.length; e++) {
        const s = t[e];
        if (!OZ(s))
          throw K().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(t) {
    const { shape: e, dtype: s, isPacked: r } = this.texData.get(t), o = H(e);
    if (K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const d = this.decode(t), p = this.texData.get(d.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...su(e)).subarray(0, o);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    const i = K().getBool("WEBGL_PACK") && r === !0, a = i ? Xp(e) : e, l = i ? new JB(a) : new jB(a), c = this.runWebGLProgram(l, [{ shape: a, dtype: s, dataId: t }], "float32"), u = this.texData.get(c.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, o);
    return this.disposeIntermediateTensorInfo(c), h;
  }
  timerAvailable() {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t) {
    const e = this.activeTimers, s = [];
    let r = !1;
    this.programTimersStack == null ? (this.programTimersStack = s, r = !0) : this.activeTimers.push(s), this.activeTimers = s, t();
    const o = Hs(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = Hs(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = e, r && (this.programTimersStack = null);
    const a = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
    };
    return (async () => {
      if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(o);
        a.kernelMs = n1(l), a.getExtraProfileInfo = () => l.map((c, u) => ({ name: i[u], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else
        a.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, a;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: Ze(), endMs: null };
  }
  endTimer(t) {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = Ze(), t);
  }
  async getQueryTime(t) {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(t);
    const e = t;
    return e.endMs - e.startMs;
  }
  disposeData(t, e = !1) {
    if (this.pendingDisposal.has(t))
      return !1;
    if (!this.texData.has(t))
      return !0;
    if (e ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !e && this.texData.get(t).refCount > 0)
      return !1;
    if (this.pendingRead.has(t))
      return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
    this.releaseGPUData(t);
    const { complexTensorInfos: s } = this.texData.get(t);
    return s != null && (this.disposeData(s.real.dataId, e), this.disposeData(s.imag.dataId, e)), this.texData.delete(t), !0;
  }
  releaseGPUData(t) {
    const { texture: e, dtype: s, texShape: r, usage: o, isPacked: i, slice: a } = this.texData.get(t), l = a && a.origDataId || t, c = this.dataRefCount.get(l);
    c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), e != null && (this.numBytesInGPU -= this.computeBytes(r, s), this.textureManager.releaseTexture(e, r, o, i)));
    const u = this.texData.get(t);
    u.texture = null, u.texShape = null, u.isPacked = !1, u.slice = null;
  }
  getTexture(t) {
    return this.uploadToGPU(t), this.texData.get(t).texture.texture;
  }
  getDataInfo(t) {
    return this.texData.get(t);
  }
  shouldExecuteOnCPU(t, e = $9) {
    return K().getBool("WEBGL_CPU_FORWARD") && t.every((s) => this.texData.get(s.dataId).texture == null && H(s.shape) < e);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t) {
    Vn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const e = t.dataSync();
    return C9(t.shape, e);
  }
  packedUnaryOp(t, e, s) {
    const r = new Ur(t.shape, e), o = this.compileAndRun(r, [t], s);
    return oe().makeTensorFromTensorInfo(o);
  }
  abs(t) {
    if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
      const r = Dv(this.texData.get(t.dataId).values);
      return this.makeOutput(t.shape, t.dtype, r);
    }
    if (K().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(t, $x, t.dtype);
    const e = new Zs(t.shape, $x), s = this.compileAndRun(e, [t]);
    return oe().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(t, e, s) {
    let r;
    if (e === "string" && s != null && s.length > 0 && Ls(s[0])) {
      const o = s.map((i) => Kn(i));
      r = this.write(o, t, e);
    } else
      r = this.write(s, t, e);
    return this.texData.get(r).usage = null, { dataId: r, shape: t, dtype: e };
  }
  makeOutput(t, e, s) {
    return oe().makeTensorFromTensorInfo(this.makeTensorInfo(t, e, s), this);
  }
  unpackTensor(t) {
    const e = new v9(t.shape);
    return this.runWebGLProgram(e, [t], t.dtype);
  }
  packTensor(t) {
    const e = new a9(t.shape), s = !0;
    return this.runWebGLProgram(e, [t], t.dtype, null, s);
  }
  packedReshape(t, e) {
    const s = [
      Qo(t.shape),
      ...qo(t.shape)
    ], r = {
      dtype: t.dtype,
      shape: s,
      dataId: t.dataId
    }, o = [
      Qo(e),
      ...qo(e)
    ], i = new Ov(o, s), a = !0, l = [s], c = this.runWebGLProgram(i, [r], t.dtype, l, a);
    return { dataId: c.dataId, shape: e, dtype: c.dtype };
  }
  decode(t, e) {
    const s = this.texData.get(t), { isPacked: r, shape: o, dtype: i } = s;
    if (e != null) {
      const d = H(o), p = e[0] * e[1] * 4;
      k(d <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const a = Xp(o);
    let l;
    r ? l = new YB(a) : l = new UB(a);
    const c = !0, u = [e != null ? e : su(a)], h = this.runWebGLProgram(l, [{ shape: a, dtype: i, dataId: t }], i, u, c, e);
    return { dtype: i, shape: o, dataId: h.dataId };
  }
  runWebGLProgram(t, e, s, r, o = !1, i) {
    const a = this.makeTensorInfo(t.outputShape, s), l = this.texData.get(a.dataId);
    if (t.packedOutput && (l.isPacked = !0), t.outPackingScheme === qa.DENSE) {
      const y = i != null ? i : su(t.outputShape);
      l.texShape = y.map((b) => b * 2);
    }
    if (t.outTexUsage != null && (l.usage = t.outTexUsage), H(a.shape) === 0)
      return l.values = ue(a.dtype, 0), a;
    const c = [], u = e.map((y) => {
      if (y.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(y.dataId);
      if (b.texture == null) {
        if (!t.packedInputs && H(y.shape) <= K().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: y.shape,
            texData: null,
            isUniform: !0,
            uniformValues: b.values
          };
        t.packedInputs && (b.isPacked = !0, b.shape = y.shape);
      }
      if (this.uploadToGPU(y.dataId), !!b.isPacked != !!t.packedInputs)
        y = b.isPacked ? this.unpackTensor(y) : this.packTensor(y), c.push(y), b = this.texData.get(y.dataId);
      else if (b.isPacked && !Hu(b.shape, y.shape)) {
        const w = y, x = y.shape;
        y.shape = b.shape, y = this.packedReshape(y, x), c.push(y), b = this.texData.get(y.dataId), w.shape = x;
      }
      return { shape: y.shape, texData: b, isUniform: !1 };
    });
    this.uploadToGPU(a.dataId);
    const h = { shape: a.shape, texData: l, isUniform: !1 }, d = HB(t, u, h), p = this.getAndSaveBinary(d, () => ZB(this.gpgpu, t, u, h)), f = this.activeTimers != null;
    let m;
    f && (m = this.startTimer()), K().get("ENGINE_COMPILE_ONLY") || BB(this.gpgpu, p, u, h, r), c.forEach((y) => this.disposeIntermediateTensorInfo(y)), f && (m = this.endTimer(m), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(m) }));
    const g = K().get("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      const y = Ze();
      y - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = y);
    }
    if (!K().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && o === !1) {
      const y = this.unpackTensor(a);
      return this.disposeIntermediateTensorInfo(a), y;
    }
    return a;
  }
  compileAndRun(t, e, s, r, o = !1) {
    return s = s || e[0].dtype, this.runWebGLProgram(t, e, s, r, o);
  }
  getAndSaveBinary(t, e) {
    return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (K().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((e) => {
      this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram), delete this.binaryCache[e];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = M(() => {
      if (!K().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const t = K().getBool("DEBUG");
        K().set("DEBUG", !1);
        const e = this.abs(Nt(1e-8)).dataSync()[0];
        if (K().set("DEBUG", t), e > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? k9 : N9;
  }
  uploadToGPU(t) {
    const e = this.texData.get(t), { shape: s, dtype: r, values: o, texture: i, usage: a, isPacked: l } = e;
    if (i != null)
      return;
    const c = this.activeTimers != null;
    let u;
    c && (u = Ze());
    let h = e.texShape;
    if (h == null && (h = qZ(s, l), e.texShape = h), o != null) {
      const d = Xp(s);
      let p, f = h[1], m = h[0];
      const g = o instanceof Uint8Array || o instanceof Uint8ClampedArray;
      (l || !g) && ([f, m] = ga(h[0], h[1])), l ? p = new qB(d, g) : p = new QB(d, g);
      const y = g ? [m, f] : h, b = this.makeTensorInfo(y, r), w = this.texData.get(b.dataId);
      g ? w.usage = Xn.PIXELS : w.usage = Xn.UPLOAD, w.texShape = y, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, m, o);
      const x = [[m, f]], S = !0, v = this.runWebGLProgram(p, [b], r, x, S), T = this.texData.get(v.dataId);
      e.texShape = T.texShape, e.isPacked = T.isPacked, e.usage = T.usage, K().get("ENGINE_COMPILE_ONLY") ? this.disposeData(v.dataId) : (e.texture = T.texture, e.values = null, this.texData.delete(v.dataId)), this.disposeIntermediateTensorInfo(b), c && (this.uploadWaitMs += Ze() - u);
    } else {
      const d = this.acquireTexture(h, a, r, l);
      e.texture = d;
    }
  }
  convertAndCacheOnCPU(t, e) {
    const s = this.texData.get(t), { dtype: r } = s;
    return this.releaseGPUData(t), e != null && (s.values = L9(e, r)), s.values;
  }
  acquireTexture(t, e, s, r) {
    if (this.numBytesInGPU += this.computeBytes(t, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t, e, r);
  }
  computeBytes(t, e) {
    return t[0] * t[1] * bu(e);
  }
  checkCompileCompletion() {
    for (const [, t] of Object.entries(this.binaryCache))
      this.checkCompletion_(t);
  }
  async checkCompileCompletionAsync() {
    const t = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, e] of Object.entries(this.binaryCache))
        t.push(this.checkCompletionAsync_(e));
      return Promise.all(t);
    } else {
      for (const [, e] of Object.entries(this.binaryCache)) {
        const s = new Promise((r) => {
          try {
            this.checkCompletion_(e), r(!0);
          } catch (o) {
            throw o;
          }
        });
        t.push(s);
      }
      return Promise.all(t);
    }
  }
  async checkCompletionAsync_(t) {
    return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await Cc(), this.checkCompletionAsync_(t));
  }
  checkCompletion_(t) {
    if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (bv(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const [, t] of Object.entries(this.binaryCache)) {
      const { uniformLocations: e, customUniformLocations: s, infLoc: r, nanLoc: o, inShapesLocations: i, inTexShapesLocations: a, outShapeLocation: l, outShapeStridesLocation: c, outTexShapeLocation: u } = vv(this.gpgpu, t.program, t.webGLProgram);
      t.uniformLocations = e, t.customUniformLocations = s, t.infLoc = r, t.nanLoc = o, t.inShapesLocations = i, t.inTexShapesLocations = a, t.outShapeLocation = l, t.outShapeStridesLocation = c, t.outTexShapeLocation = u;
    }
  }
}
Cp.nextDataId = 0;
function L9(n, t) {
  if (t === "float32" || t === "complex64")
    return n;
  if (t === "int32" || t === "bool") {
    const e = t === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      e[s] = Math.round(n[s]);
    return e;
  } else
    throw new Error(`Unknown dtype ${t}`);
}
/** @license See the LICENSE file. */
const D9 = "3.21.0";
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
gm() && Tm("webgl", () => new Cp(), 2);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a0 = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class ti {
  constructor(t, e, s) {
    this.variableNames = ["A", "B"], this.outputShape = Et(e, s), this.enableShapeUniforms = dn(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xc = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class _c {
  constructor(t, e, s, r = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Et(e, s);
    const o = this.outputShape.length;
    this.enableShapeUniforms = dn(o);
    let i = "";
    if (r)
      if (o === 0 || H(this.outputShape) === 1)
        i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (i = `
          ${re(o)} coords = getOutputCoords();
        `, o === 1)
        this.enableShapeUniforms ? i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = an("coords", o);
        this.enableShapeUniforms ? i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= outShape[${o} - 2];
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= outShape[${o} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= ${this.outputShape[o - 2]};
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= ${this.outputShape[o - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function On(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const G9 = {
  kernelName: Si,
  backendName: "webgl",
  kernelFunc: On
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zr(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: r } = t, o = e.makeTensorInfo(s.shape, "complex64"), i = e.texData.get(o.dataId), a = On({ inputs: { x: s }, backend: e }), l = On({ inputs: { x: r }, backend: e });
  return i.complexTensorInfos = { real: a, imag: l }, o;
}
const F9 = {
  kernelName: ah,
  backendName: "webgl",
  kernelFunc: zr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Av = "return (a < 0.) ? b * a : a;", zv = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function O9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { alpha: o } = s, i = e.makeTensorInfo([], "float32", Vs(o, "float32")), a = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(zv, r.shape, i.shape) : new ti(Av, r.shape, i.shape), l = e.runWebGLProgram(a, [r, i], "float32");
  return e.disposeIntermediateTensorInfo(i), l;
}
const A9 = {
  kernelName: Cl,
  backendName: "webgl",
  kernelFunc: O9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wv = "return (a < 0.) ? b * a : a;", Vv = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function z9(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: r } = t, o = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(Vv, s.shape, r.shape) : new ti(Wv, s.shape, r.shape);
  return e.runWebGLProgram(o, [s, r], "float32");
}
const W9 = {
  kernelName: _l,
  backendName: "webgl",
  kernelFunc: z9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ia = "if (isnan(x)) return x;";
function Zt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
  return ({ inputs: r, backend: o }) => {
    const { x: i } = r, a = o, l = s || i.dtype;
    if (a.shouldExecuteOnCPU([i]) && e != null) {
      const h = a.texData.get(i.dataId), d = e(h.values, l);
      return a.makeTensorInfo(i.shape, l, d);
    }
    const c = K().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null;
    let u;
    return c ? u = new Ur(i.shape, t) : u = new Zs(i.shape, n), a.runWebGLProgram(u, [i], l);
  };
}
function Qe({ opSnippet: n, packedOpSnippet: t, checkOutOfBounds: e = !1, supportsComplex: s = !1, cpuKernelImpl: r, dtype: o }) {
  return ({ inputs: i, backend: a }) => {
    const { a: l, b: c } = i, u = a;
    if (s && l.dtype === "complex64") {
      const f = u.texData.get(l.dataId), m = u.texData.get(c.dataId), [g, y] = [
        [f.complexTensorInfos.real, m.complexTensorInfos.real],
        [f.complexTensorInfos.imag, m.complexTensorInfos.imag]
      ].map((w) => {
        const [x, S] = w, v = {
          dataId: x.dataId,
          dtype: x.dtype,
          shape: l.shape
        }, T = {
          dataId: S.dataId,
          dtype: S.dtype,
          shape: c.shape
        }, $ = new ti(n, l.shape, c.shape);
        return u.runWebGLProgram($, [v, T], ln(x.dtype, S.dtype));
      }), b = zr({ inputs: { real: g, imag: y }, backend: u });
      return u.disposeIntermediateTensorInfo(g), u.disposeIntermediateTensorInfo(y), b;
    }
    const h = o || ln(l.dtype, c.dtype);
    if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([l, c])) && r != null) {
      const f = u.texData.get(l.dataId).values, m = u.texData.get(c.dataId).values, g = l.dtype === "string" ? er(f) : f, y = l.dtype === "string" ? er(m) : m, [b, w] = r(l.shape, c.shape, g, y, h), x = u.makeTensorInfo(w, h), S = u.texData.get(x.dataId);
      return S.values = b, x;
    }
    const d = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null;
    let p;
    return d ? p = new _c(t, l.shape, c.shape, e) : p = new ti(n, l.shape, c.shape), u.runWebGLProgram(p, [l, c], h);
  };
}
function tl(n, t = !1) {
  if (n === "linear")
    return t ? b9 : p9;
  if (n === "relu")
    return t ? w9 : m9;
  if (n === "elu")
    return t ? x9 : f9;
  if (n === "relu6")
    return t ? I9 : g9;
  if (n === "prelu")
    return t ? Vv : Wv;
  if (n === "leakyrelu")
    return t ? zv : Av;
  if (n === "sigmoid")
    return t ? S9 : y9;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pv {
  constructor(t, e, s, r = !1, o = !1, i = !1, a = null, l = !1, c = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s, this.enableShapeUniforms = dn(this.outputShape.length);
    const u = r ? t[1] : t[2], h = Math.ceil(u / 2), d = r ? "i * 2, rc.y" : "rc.y, i * 2", p = o ? "rc.z, i * 2" : "i * 2, rc.z", f = r ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = o ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let g = "", y = "";
    a && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }` : g = `vec4 activation(vec4 x) {
          ${a}
        }`, y = "result = activation(result);");
    const b = i ? "result += getBiasAtOutCoords();" : "";
    i && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let w = "rc.x", x = "rc.x";
    t[0] < e[0] ? w = `int(min(float(rc.x), ${t[0] - 1}.))` : e[0] < t[0] && (x = `int(min(float(rc.x), ${e[0] - 1}.))`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${h}; i++) {
          int batchA = ${w};
          int batchB = ${x};
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rx = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class Ex {
  constructor(t, e, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = Et(e, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lx = "return a * b;";
function l0(n) {
  const { inputs: t, backend: e } = n, { a: s, b: r } = t, o = ln(s.dtype, r.dtype);
  if (s.dtype === "complex64") {
    const a = e.texData.get(s.dataId), l = e.texData.get(r.dataId), c = new Ex(Rx.REAL, s.shape, r.shape), u = new Ex(Rx.IMAG, s.shape, r.shape), h = [
      {
        dataId: a.complexTensorInfos.real.dataId,
        dtype: a.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: a.complexTensorInfos.imag.dataId,
        dtype: a.complexTensorInfos.imag.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: r.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: r.shape
      }
    ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = zr({ inputs: { real: d, imag: p }, backend: e });
    return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
  }
  if (e.shouldExecuteOnCPU([s, r])) {
    const a = e.texData.get(s.dataId), l = e.texData.get(r.dataId), [c, u] = WU(s.shape, r.shape, a.values, l.values, o), h = e.makeTensorInfo(u, o), d = e.texData.get(h.dataId);
    return d.values = c, h;
  }
  let i;
  return K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new _c(Lx, s.shape, r.shape) : i = new ti(Lx, s.shape, r.shape), e.runWebGLProgram(i, [s, r], o);
}
const V9 = {
  kernelName: Li,
  backendName: "webgl",
  kernelFunc: l0
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P9(n, t, e) {
  const s = [
    Qo(n.shape),
    ...qo(n.shape)
  ], r = {
    dtype: n.dtype,
    shape: s,
    dataId: n.dataId
  }, o = [
    Qo(t),
    ...qo(t)
  ], i = new Ov(o, s), a = !0, l = [s], c = e.runWebGLProgram(i, [r], n.dtype, l, a);
  return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pt(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { shape: o } = s, i = e, a = H(r.shape), l = im(o, a), c = H(l);
  k(a === c, () => `The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);
  const u = i.texData.get(r.dataId);
  return u.isPacked && !Hu(r.shape, l) && !(u.texture !== null && Hu(u.shape, l)) ? P9(r, l, i) : (i.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype });
}
const M9 = {
  kernelName: Zl,
  backendName: "webgl",
  kernelFunc: pt
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dx {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
    this.outputShape = [r, i];
    const a = Math.floor(s / 4) * 4, l = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (e != null) {
      const h = 1 / e;
      c = `sumValue += dot(values * ${to(h) ? h.toPrecision(2) : h}, ones);`;
    }
    let u = "";
    o % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class X9 {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
    this.outputShape = [r, i];
    let a = "0.0", l = "";
    e === "prod" ? a = "1.0" : e === "min" ? (a = "1.0 / 1e-20", l = "min") : e === "max" && (a = "-1.0 / 1e-20", l = "max");
    let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "sum" ? c = "sumValue" : e === "prod" ? c = "prodValue" : e === "all" ? c = "allValue" : e === "any" && (c = "anyValue");
    const u = Math.floor(s / 4) * 4, h = s % 4;
    let d = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    e === "all" ? (a = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : e === "any" && (a = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _9(n) {
  const t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    const e = t.length ? t[t.length - 1].outSize : n[1], s = Jd(e);
    t.push({
      inSize: e,
      windowSize: s,
      outSize: Math.ceil(e / s)
    });
  }
  return t;
}
function To(n, t, e, s) {
  const r = _9(n.shape);
  let o = n;
  for (let i = 0; i < r.length; i++) {
    const { inSize: a, windowSize: l, outSize: c } = r[i];
    let u, h;
    e === "mean" ? u = i === 0 ? new Dx({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, a) : new Dx({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }) : u = new X9({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, e), h = o, o = s.runWebGLProgram(u, [o], t), h.dataId !== n.dataId && s.disposeIntermediateTensorInfo(h);
  }
  return o;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class K9 {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[e[i]];
    this.outputShape = s, this.rank = s.length;
    const r = re(this.rank), o = Z9(e);
    this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${o}));
    }
    `;
  }
}
function Z9(n) {
  const t = n.length;
  if (t > 6)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(t);
  for (let r = 0; r < n.length; r++)
    s[n[r]] = e[r];
  return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class B9 {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const s = new Array(t.length);
    for (let u = 0; u < s.length; u++)
      s[u] = t[e[u]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const r = re(this.rank), o = Fv("rc", this.rank), i = new Array(this.rank);
    for (let u = 0; u < e.length; u++)
      i[e[u]] = o[u];
    const a = `vec2(${i.slice(-2).join()})`, l = `++${o[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${i.join()}), ${a})`;
    this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${o[this.rank - 1]};
      if(++${o[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kp(n, t, e) {
  const s = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new B9(n.shape, t) : new K9(n.shape, t);
  return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H9(n, t, e, s) {
  const r = t, o = n.shape.length, i = At(r, n.shape);
  let a = i;
  const l = we(a, o), c = l != null;
  let u = n;
  c && (u = kp(n, l, s), a = Ne(a.length, o)), Je("sum", a, o);
  const [h, d] = ze(u.shape, a);
  let p = h;
  e && (p = ke(h, i));
  const f = H(d), g = H(n.shape) / f, y = pt({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }), b = sd(n.dtype), w = To(y, b, "sum", s), x = pt({ inputs: { x: w }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(y), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), x;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Np(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  return H9(r, o, i, e);
}
const U9 = {
  kernelName: Jl,
  backendName: "webgl",
  kernelFunc: Np
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cn(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { perm: o } = s, i = e, a = r.shape.length, l = new Array(a);
  for (let u = 0; u < l.length; u++)
    l[u] = r.shape[o[u]];
  let c;
  if (i.shouldExecuteOnCPU([r])) {
    const h = i.texData.get(r.dataId).values, d = i0(h, r.shape, r.dtype, o, l);
    c = i.makeTensorInfo(l, r.dtype);
    const p = i.texData.get(c.dataId);
    p.values = d;
  } else
    c = kp(r, o, i);
  return c;
}
const Y9 = {
  kernelName: jr,
  backendName: "webgl",
  kernelFunc: cn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mv = 1e3;
function Yu({ a: n, b: t, transposeA: e, transposeB: s, backend: r, bias: o = null, preluActivationWeights: i = null, leakyreluAlpha: a = 0, activation: l = null }) {
  const c = n.shape.length, u = t.shape.length, h = e ? n.shape[c - 2] : n.shape[c - 1], d = s ? t.shape[u - 1] : t.shape[u - 2], p = e ? n.shape[c - 1] : n.shape[c - 2], f = s ? t.shape[u - 2] : t.shape[u - 1], m = n.shape.slice(0, -2), g = t.shape.slice(0, -2), y = H(m), b = H(g), x = Et(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
  k(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const S = e ? [y, h, p] : [y, p, h], v = s ? [b, f, d] : [b, d, f], T = pt({ inputs: { x: n }, backend: r, attrs: { shape: S } }), $ = pt({ inputs: { x: t }, backend: r, attrs: { shape: v } }), R = [T, $], E = Math.max(y, b), V = e ? T.shape[1] : T.shape[2], X = o != null, _ = i != null, B = l === "leakyrelu", U = l != null ? tl(l, !0) : null, Y = X || _ || B || U != null;
  let tt;
  if ((p === 1 || f === 1) && V > Mv && Y === !1) {
    let et = T, rt = $;
    e && (et = cn({ inputs: { x: T }, backend: r, attrs: { perm: [0, 2, 1] } }), R.push(et)), s && (rt = cn({ inputs: { x: $ }, backend: r, attrs: { perm: [0, 2, 1] } }), R.push(rt));
    const ot = f !== 1, lt = f === 1;
    let it = et;
    ot && (it = pt({
      inputs: { x: et },
      backend: r,
      attrs: { shape: [E, V, 1] }
    }), R.push(it));
    const ht = f === 1 ? 2 : 1;
    let ct = rt;
    lt && (ct = pt({
      inputs: { x: rt },
      backend: r,
      attrs: { shape: [E, 1, V] }
    }), R.push(ct));
    const ft = l0({ inputs: { a: it, b: ct }, backend: r });
    tt = Np({ inputs: { x: ft }, backend: r, attrs: { axis: ht, keepDims: !0 } }), R.push(ft);
  } else {
    const et = ln(n.dtype, t.dtype), rt = new Pv(S, v, [E, p, f], e, s, X, U, _, B), ot = [T, $];
    if (o != null && ot.push(o), _ && ot.push(i), B) {
      const lt = r.makeTensorInfo([], "float32", Vs(a, "float32"));
      ot.push(lt), R.push(lt);
    }
    tt = r.runWebGLProgram(rt, ot, et);
  }
  const J = pt({ inputs: { x: tt }, backend: r, attrs: { shape: x } });
  R.push(tt);
  for (const et of R)
    r.disposeIntermediateTensorInfo(et);
  return J;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  return Yu({
    a: r,
    b: o,
    transposeA: l,
    transposeB: c,
    backend: e,
    bias: i,
    preluActivationWeights: a,
    leakyreluAlpha: h,
    activation: u
  });
}
const J9 = {
  kernelName: Va,
  backendName: "webgl",
  kernelFunc: j9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gx = "return abs(x);";
function Q9(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const o = e.texData.get(s.dataId), i = Dv(o.values);
    return e.makeTensorInfo(s.shape, s.dtype, i);
  }
  let r;
  return K().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Ur(s.shape, Gx) : r = new Zs(s.shape, Gx), e.runWebGLProgram(r, [s], s.dtype);
}
const q9 = {
  kernelName: sl,
  backendName: "webgl",
  kernelFunc: Q9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t4 = us + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, e4 = Zt({ opSnippet: t4 }), n4 = {
  kernelName: ni,
  backendName: "webgl",
  kernelFunc: e4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s4 = us + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, r4 = Zt({ opSnippet: s4 }), o4 = {
  kernelName: si,
  backendName: "webgl",
  kernelFunc: r4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fx = "return a + b;", i4 = Qe({
  opSnippet: Fx,
  packedOpSnippet: Fx,
  supportsComplex: !0,
  cpuKernelImpl: bU
}), a4 = {
  kernelName: mo,
  backendName: "webgl",
  kernelFunc: i4
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class l4 {
  constructor(t, e) {
    this.outputShape = [], this.outputShape = t, this.variableNames = e.map((o, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`float v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class c4 {
  constructor(t, e) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map((o, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`vec4 v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gu(n) {
  const { inputs: t, backend: e } = n, s = t;
  if (s.length === 1)
    return On({ inputs: { x: s[0] }, backend: e });
  if (s.length > K().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(s.length / 2), c = gu({ inputs: s.slice(0, l), backend: e }), u = gu({ inputs: s.slice(l), backend: e });
    return gu({ inputs: [c, u], backend: e });
  }
  const r = s.map((l) => l.dtype).reduce((l, c) => ln(l, c)), o = s.map((l) => l.shape), a = K().getBool("WEBGL_PACK") ? new c4(s[0].shape, o) : new l4(s[0].shape, o);
  return e.runWebGLProgram(a, s, r);
}
const u4 = {
  kernelName: rl,
  backendName: "webgl",
  kernelFunc: gu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = At(o, r.shape);
  let c = l;
  const u = we(c, a);
  let h = r;
  u != null && (h = cn({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = Ne(c.length, a)), Je("all", c, a);
  const [d, p] = ze(h.shape, c), f = H(p), m = pt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = To(m, m.dtype, "all", e);
  let y;
  if (i) {
    const b = ke(d, l);
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const d4 = {
  kernelName: eh,
  backendName: "webgl",
  kernelFunc: h4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = At(o, r.shape);
  let c = l;
  const u = we(c, a);
  let h = r;
  u != null && (h = cn({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = Ne(c.length, a)), Je("any", c, a);
  const [d, p] = ze(h.shape, c), f = H(p), m = pt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = To(m, m.dtype, "any", e);
  let y;
  if (i) {
    const b = ke(d, l);
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const f4 = {
  kernelName: nh,
  backendName: "webgl",
  kernelFunc: p4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class m4 {
  constructor(t, e, s) {
    this.variableNames = ["A"];
    const { windowSize: r, batchSize: o, outSize: i } = t;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [o, i];
    const a = e === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class g4 {
  constructor(t, e, s, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, k(t.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const o = t[t.length - 1], i = Math.ceil(o / e);
    this.outputShape = t.slice(0, -1), i > 1 && this.outputShape.push(i), r || this.variableNames.push("bestIndicesA");
    const a = this.outputShape, l = a.length, c = re(l), u = an("coords", l);
    let h, d;
    if (i === 1) {
      d = l + 1;
      const $ = re(d);
      h = `
        ${$} sourceLocR = ${$}(${u.join()}, 0);
        ++${u[l - 1]};
        ${$} sourceLocG = ${$}(${u.join()}, 0);
        ++${u[l - 2]};
        ${$} sourceLocA = ${$}(${u.join()}, 0);
        --${u[l - 1]};
        ${$} sourceLocB = ${$}(${u.join()}, 0);
        --${u[l - 2]};`;
    } else
      d = l, h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, d), f = "." + p[d - 1], m = p.map(($) => "int " + $), g = an("sourceLocR", d - 1).concat("inIdx.r"), y = an("sourceLocG", d - 1).concat("inIdx.g"), b = an("sourceLocB", d - 1).concat("inIdx.b"), w = an("sourceLocA", d - 1).concat("inIdx.a"), x = s === "max" ? "greaterThan" : "lessThan", S = r ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`, v = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, T = r ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${T}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${S}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xv(n, t, e, s = null) {
  let r = t.shape[0], o = t.shape[1];
  s != null && (r = s.shape[0], o = s.shape[1]);
  const i = Jd(o), a = { windowSize: i, inSize: o, batchSize: r, outSize: Math.ceil(o / i) }, l = new m4(a, e, s == null), c = [t];
  s != null && c.push(s);
  const u = n.runWebGLProgram(l, c, "int32");
  if (u.shape[1] === 1)
    return u;
  const h = Xv(n, t, e, u);
  return n.disposeIntermediateTensorInfo(u), h;
}
function _v(n, t, e, s = null) {
  const r = s != null ? s.shape : t.shape, o = r[r.length - 1], i = Jd(o), a = new g4(r, i, e, s == null), l = s == null ? [t] : [t, s], c = n.runWebGLProgram(a, l, "int32");
  if (c.shape.length === t.shape.length) {
    const u = _v(n, t, e, c);
    return n.disposeIntermediateTensorInfo(c), u;
  }
  return c;
}
function Kv(n, t, e, s) {
  const r = [e];
  if (Je("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, t.shape.length), !K().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    const o = [], i = n.texData.get(t.dataId), a = i !== null && i.isPacked;
    let l = t;
    a && (l = n.unpackTensor(t), o.push(l));
    const [c, u] = ze(l.shape, r), h = H(u), d = pt({ inputs: { x: l }, backend: n, attrs: { shape: [-1, h] } });
    o.push(d);
    const p = Xv(n, d, s);
    o.push(p);
    const f = pt({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return o.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  return _v(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  let i = At(o, r.shape);
  const a = we(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = cn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = Ne(i.length, l.shape.length)), Je("argMax", [i[0]], l.shape.length);
  const u = Kv(e, l, i[0], "max");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const b4 = {
  kernelName: ol,
  backendName: "webgl",
  kernelFunc: y4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  let i = At(o, r.shape);
  const a = we(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = cn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = Ne(i.length, l.shape.length)), Je("argMin", [i[0]], l.shape.length);
  const u = Kv(e, l, i[0], "min");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const w4 = {
  kernelName: il,
  backendName: "webgl",
  kernelFunc: x4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I4 = us + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, S4 = Zt({ opSnippet: I4 }), v4 = {
  kernelName: ri,
  backendName: "webgl",
  kernelFunc: S4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C4 = us + "return log(x + sqrt(x * x + 1.0));", k4 = Zt({ opSnippet: C4 }), N4 = {
  kernelName: oi,
  backendName: "webgl",
  kernelFunc: k4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const T4 = us + `
  return atan(x);
`, $4 = Zt({ opSnippet: T4 }), R4 = {
  kernelName: ii,
  backendName: "webgl",
  kernelFunc: $4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E4 = a0 + `
  return atan(a, b);
`, L4 = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, D4 = Qe({ opSnippet: E4, packedOpSnippet: L4 }), G4 = {
  kernelName: li,
  backendName: "webgl",
  kernelFunc: D4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F4 = us + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, O4 = Zt({ opSnippet: F4 }), A4 = {
  kernelName: ai,
  backendName: "webgl",
  kernelFunc: O4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class el {
  constructor(t, e, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideHeight, l = t.strideWidth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterHeight, d = t.effectiveFilterWidth, p = t.padInfo.top, f = t.padInfo.left;
    this.outputShape = t.outShape;
    const m = e === "avg", g = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`, y = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
    let b = "0.0";
    if (m || (b = "-1.0 / 1e-20"), s) {
      const $ = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${$} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? o ? g : y : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const w = "max";
    let x = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (x = "avgValue / count");
    const S = Math.floor(i / 4) * 4, v = i % 4, T = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${S}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${T}
          }

          int xC = xCCorner + ${S};
          if (${v === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${T}
          }
        }
        setOutput(${x});
      }
    `;
  }
}
class c0 {
  constructor(t, e, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideDepth, l = t.strideHeight, c = t.strideWidth, u = t.dilationDepth, h = t.dilationHeight, d = t.dilationWidth, p = t.effectiveFilterDepth, f = t.effectiveFilterHeight, m = t.effectiveFilterWidth, g = t.padInfo.front, y = t.padInfo.top, b = t.padInfo.left;
    this.outputShape = t.outShape;
    const w = e === "avg";
    let x = "0.0";
    if (w || (x = "-1.0 / 1e-20"), s) {
      const E = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${E} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r ? o ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const S = "max";
    let v = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (v = "avgValue / count");
    const T = Math.floor(i / 4) * 4, $ = i % 4, R = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${S}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${T}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${R}
            }

            int xC = xCCorner + ${T};
            if (${$ === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${R}
            } else if (${$ === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${R}
            } else if (${$ === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${R}
            }
          }
          setOutput(${v});
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  Pc(r, "avgPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(je(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = ls(r.shape, o, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && Vt(u.inShape, u.outShape))
    return On({ inputs: { x: r }, backend: e });
  const h = new el(u, "avg", !1);
  return e.runWebGLProgram(h, [r], "float32");
}
const W4 = {
  kernelName: al,
  backendName: "webgl",
  kernelFunc: z4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s, u = [1, 1, 1], h = rr(r.shape, o, i, u, a, l, c), d = new c0(h, "avg", !1);
  return e.runWebGLProgram(d, [r], "float32");
}
const P4 = {
  kernelName: ll,
  backendName: "webgl",
  kernelFunc: V4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class M4 {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterHeight, c = t.effectiveFilterWidth, u = l - 1 - t.padInfo.top, h = c - 1 - t.padInfo.left, d = 1 / (e * s);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class X4 {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, r = t.filterWidth, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterDepth, d = t.effectiveFilterHeight, p = t.effectiveFilterWidth, f = h - 1 - t.padInfo.front, m = d - 1 - t.padInfo.top, g = p - 1 - t.padInfo.left, y = 1 / (e * s * r);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${o}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = rr(i.shape, a, l, h, c, u), p = new X4(d);
  return e.runWebGLProgram(p, [r], i.dtype);
}
const K4 = {
  kernelName: rh,
  backendName: "webgl",
  kernelFunc: _4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o;
  Pc([r, o], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = ls(i.shape, a, l, 1, c), h = new M4(u);
  return e.runWebGLProgram(h, [r], i.dtype);
}
const B4 = {
  kernelName: sh,
  backendName: "webgl",
  kernelFunc: Z4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o } = t, { transposeA: i, transposeB: a } = s;
  return Yu({ a: r, b: o, transposeA: i, transposeB: a, backend: e });
}
const U4 = {
  kernelName: cl,
  backendName: "webgl",
  kernelFunc: H4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Y4 {
  constructor(t, e, s, r, o, i) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], Et(t, e), Et(t, s);
    let a = "0.0";
    r != null && (Et(t, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "1.0";
    o != null && (Et(t, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class j4 {
  constructor(t, e, s, r, o, i) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], Et(t, e), Et(t, s);
    let a = "vec4(0.0)";
    r != null && (Et(t, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    o != null && (Et(t, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J4 = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s, mean: r, variance: o, offset: i, scale: a } = n;
  k(r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(a == null || r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = e;
  l == null && (l = 1e-3);
  const c = [s, r, o];
  let u = null;
  i != null && (u = i.shape, c.push(i));
  let h = null;
  a != null && (h = a.shape, c.push(a));
  const d = K().getBool("WEBGL_PACK_NORMALIZATION") ? new j4(s.shape, r.shape, o.shape, u, h, l) : new Y4(s.shape, r.shape, o.shape, u, h, l);
  return t.runWebGLProgram(d, c, c[0].dtype);
}, Q4 = {
  kernelName: Il,
  backendName: "webgl",
  kernelFunc: J4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q4 {
  constructor(t) {
    this.variableNames = ["source"], this.outputShape = t, this.rank = t.length;
    const e = re(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = t5(this.rank);
    let r;
    const o = t.map((i, a) => `sourceLoc.${qf[a]} = start[${a}] + coords.${qf[a]};`);
    r = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${o.join(`
`)}
      `, this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `;
  }
}
const qf = ["x", "y", "z", "w", "u", "v"];
function t5(n) {
  if (n === 1)
    return "sourceLoc";
  if (n <= 6)
    return qf.slice(0, n).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class e5 {
  constructor(t) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const e = re(this.rank), s = an("coords", this.rank), r = an("sourceLoc", this.rank), o = this.rank === 1 ? "sourceLoc" : `vec2(${r.slice(-2).join()})`, i = `getChannel(getSource(${r.join()}), ${o})`, a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${i};
        --${r[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${i};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${e}(${t.map((u, h) => `start[${h}]`).join()});` : t.map((u, h) => `${r[h]} = ${s[h]} + start[${h}];`).join(`
`);
    this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n5(n, t, e, s) {
  const r = s.texData.get(n.dataId), o = s.makeTensorInfo(e, n.dtype), i = s.texData.get(o.dataId);
  Object.assign(i, r), i.refCount = 1, i.shape = e, i.dtype = n.dtype;
  let a = ld(t, xt(n.shape));
  r.slice && (a += r.slice.flatOffset), i.slice = {
    flatOffset: a,
    origDataId: r.slice && r.slice.origDataId || n.dataId
  };
  const l = s.dataRefCount.get(i.slice.origDataId) || 1;
  return s.dataRefCount.set(i.slice.origDataId, l + 1), o;
}
function Sa(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, size: i } = s, [a, l] = cd(r, o, i);
  if (Dm(r, a, l), H(l) === 0)
    return e.makeTensorInfo(l, r.dtype, []);
  if (e.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    const h = e.texData.get(r.dataId), d = UU(h.values, a, l, r.shape, r.dtype);
    return e.makeTensorInfo(l, r.dtype, d);
  }
  const { isPacked: c } = e.texData.get(r.dataId), u = ad(r.shape, a, l);
  if (c || !u) {
    const h = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new e5(l) : new q4(l), d = [a];
    return e.runWebGLProgram(h, [r], r.dtype, d);
  }
  return e.uploadToGPU(r.dataId), n5(r, a, l, e);
}
const s5 = {
  kernelName: jl,
  backendName: "webgl",
  kernelFunc: Sa
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r5 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, crops: i } = s;
  k(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const a = o.reduce((b, w) => b * w), l = kc(r.shape, o, a), c = Nc(l.length, o.length), u = Tc(r.shape, o, a), h = Zg(i, o.length), d = Bg(u, i, o.length), p = [], f = pt({ inputs: { x: r }, backend: e, attrs: { shape: l } }), m = cn({ inputs: { x: f }, backend: e, attrs: { perm: c } }), g = pt({
    inputs: { x: m },
    backend: e,
    attrs: { shape: u }
  }), y = Sa({
    inputs: { x: g },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return p.push(f), p.push(m), p.push(g), p.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
}, o5 = {
  kernelName: ul,
  backendName: "webgl",
  kernelFunc: r5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i } = s, a = e.readSync(r.dataId), l = e.readSync(o.dataId), c = Lv(a, l, o.dtype, o.shape, i);
  return e.makeTensorInfo([i], o.dtype, c);
}
const a5 = {
  kernelName: oh,
  backendName: "webgl",
  kernelFunc: i5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l5(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: r } = t, o = e.readSync(s.dataId), i = e.readSync(r.dataId), a = Et(Array.from(o), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const c5 = {
  kernelName: ih,
  backendName: "webgl",
  kernelFunc: l5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u5 = "return float(a != b);", Zv = Qe({ opSnippet: u5, cpuKernelImpl: PU, dtype: "bool" }), h5 = {
  kernelName: Wl,
  backendName: "webgl",
  kernelFunc: Zv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kc(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.texData.get(s.dataId);
  return On({ inputs: { x: r.complexTensorInfos.real }, backend: e });
}
const d5 = {
  kernelName: Wh,
  backendName: "webgl",
  kernelFunc: Kc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p5 = "return float(int(x));";
function f5(n, t) {
  const e = new Zs(n.shape, p5), s = t.runWebGLProgram(e, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tm(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return On({ inputs: { x: r }, backend: e });
    const i = Re(r.shape), a = tm({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } }), l = zr({ inputs: { real: a, imag: i }, backend: e });
    return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
  }
  if (r.dtype === "complex64") {
    const i = Kc({ inputs: { input: r }, backend: e }), a = tm({ inputs: { x: i }, backend: e, attrs: { dtype: o } });
    return e.disposeIntermediateTensorInfo(i), a;
  }
  if (!am(r.dtype, o)) {
    const i = On({ inputs: { x: r }, backend: e });
    return { dataId: i.dataId, shape: i.shape, dtype: o };
  }
  if (e.shouldExecuteOnCPU([r])) {
    const i = e.texData.get(r.dataId).values, [a, l, c] = wU(i, r.shape, r.dtype, o);
    return e.makeTensorInfo(a, l, c);
  }
  if (o === "int32")
    return f5(r, e);
  if (o === "bool") {
    const i = e.makeTensorInfo([], "bool", ue("bool", 1)), l = Zv({ inputs: { a: r, b: i }, backend: e });
    return e.disposeIntermediateTensorInfo(i), l;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`);
}
const m5 = {
  kernelName: ci,
  backendName: "webgl",
  kernelFunc: tm
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ox = "return ceil(x);", g5 = Zt({ opSnippet: Ox, packedOpSnippet: Ox, cpuKernelImpl: IU }), y5 = {
  kernelName: ui,
  backendName: "webgl",
  kernelFunc: g5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class b5 {
  constructor(t) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class x5 {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { clipValueMin: o, clipValueMax: i } = s;
  let a;
  K().getBool("WEBGL_PACK_CLIP") ? a = new x5(r.shape) : a = new b5(r.shape);
  const l = [[o], [i]];
  return e.runWebGLProgram(a, [r], r.dtype, l);
}
const I5 = {
  kernelName: hi,
  backendName: "webgl",
  kernelFunc: w5
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class S5 {
  constructor(t) {
    this.variableNames = ["real", "imag"], this.outputShape = t, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ax(n, t) {
  return {
    dataId: t.dataId,
    dtype: t.dtype,
    shape: n.shape
  };
}
function v5(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = e.texData.get(s.dataId), o = new S5(s.shape), i = [
    Ax(s, r.complexTensorInfos.real),
    Ax(s, r.complexTensorInfos.imag)
  ];
  return e.runWebGLProgram(o, i, i[0].dtype);
}
const C5 = {
  kernelName: hl,
  backendName: "webgl",
  kernelFunc: v5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class k5 {
  constructor(t) {
    this.outputShape = [], this.outputShape = Gs(t, 1), this.variableNames = t.map((i, a) => `T${a}`);
    const e = new Array(t.length - 1);
    e[0] = t[0][1];
    for (let i = 1; i < e.length; i++)
      e[i] = e[i - 1] + t[i][1];
    const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
    for (let i = 1; i < e.length; i++) {
      const a = e[i - 1];
      s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
    }
    const r = e.length, o = e[e.length - 1];
    s.push(`else setOutput(getT${r}(yR, yC-${o}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class N5 {
  constructor(t, e) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Gs(t, e);
    const s = this.outputShape, r = s.length, o = re(r), i = an("coords", r), a = ["x", "y", "z", "w", "u", "v"].slice(0, r);
    this.variableNames = t.map((m, g) => `T${g}`);
    const l = new Array(t.length - 1);
    l[0] = t[0][e];
    for (let m = 1; m < l.length; m++)
      l[m] = l[m - 1] + t[m][e];
    const c = a[e], u = a.slice(-2), h = a.join();
    let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
    for (let m = 1; m < l.length; m++) {
      const g = l[m - 1];
      d += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${lu(a, c, g)}),
            vec2(${lu(u, c, g)}));
        }`;
    }
    const p = l.length, f = l[l.length - 1];
    d += `
        return getChannel(
          getT${p}(${lu(a, c, f)}),
          vec2(${lu(u, c, f)}));`, this.userCode = `
      float getValue(${a.map((m) => "int " + m)}) {
        ${d}
      }

      void main() {
        ${o} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[r - 1]} = ${i[r - 1]} + 1;
        if (${i[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${i});
        }

        ${i[r - 2]} = ${i[r - 2]} + 1;
        if (${i[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${i});
        }

        ${i[r - 1]} = ${i[r - 1]} - 1;
        if (${i[r - 2]} < ${s[r - 2]} &&
            ${i[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `;
  }
}
function lu(n, t, e) {
  const s = n.indexOf(t);
  return n.map((o, i) => i === s ? `${o} - ${e}` : o).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tp(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.texData.get(s.dataId);
  return On({ inputs: { x: r.complexTensorInfos.imag }, backend: e });
}
const T5 = {
  kernelName: kh,
  backendName: "webgl",
  kernelFunc: Tp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function za(n, t, e) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const h = n.map((g) => Kc({ inputs: { input: g }, backend: e })), d = n.map((g) => Tp({ inputs: { input: g }, backend: e })), p = za(h, t, e), f = za(d, t, e), m = zr({ inputs: { real: p, imag: f }, backend: e });
    return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), d.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), m;
  }
  let r = e.shouldExecuteOnCPU(n);
  if (s === "string" && (r = !0), r) {
    const h = n.map((b) => {
      const x = [-1, H(b.shape.slice(t))];
      return pt({ inputs: { x: b }, backend: e, attrs: { shape: x } });
    }), d = h.map((b) => ({ vals: e.readSync(b.dataId), shape: b.shape })), p = Gs(h.map((b) => b.shape), 1), f = h[0].shape[0] === 1, m = SU(d, p, s, f), g = Gs(n.map((b) => b.shape), t), y = e.makeTensorInfo(g, s, m);
    return h.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
  }
  const o = K().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (n.length > o) {
    const h = [];
    for (let p = 0; p < n.length; p += o) {
      const f = n.slice(p, p + o);
      h.push(za(f, t, e));
    }
    const d = za(h, t, e);
    for (const p of h)
      e.disposeIntermediateTensorInfo(p);
    return d;
  }
  if (K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && n[0].shape.length > 1) {
    const h = new N5(n.map((d) => d.shape), t);
    return e.runWebGLProgram(h, n, s);
  }
  const { tensors2D: i, outShape: a } = $5(n, t, e), l = new k5(i.map((h) => h.shape)), c = e.runWebGLProgram(l, i, s);
  i.forEach((h) => e.disposeIntermediateTensorInfo(h));
  const u = pt({ inputs: { x: c }, attrs: { shape: a }, backend: e });
  return e.disposeIntermediateTensorInfo(c), u;
}
function $5(n, t, e) {
  const s = Gs(n.map((o) => o.shape), t);
  return { tensors2D: n.map((o) => pt({
    inputs: { x: o },
    attrs: { shape: [-1, H(o.shape.slice(t))] },
    backend: e
  })), outShape: s };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s, o = At(r, t[0].shape)[0], i = t.map((c) => c.shape);
  Wg(i, o);
  const a = Gs(t.map((c) => c.shape), o);
  if (H(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((c) => H(c.shape) > 0);
  return l.length === 1 ? On({ inputs: { x: l[0] }, backend: e }) : za(l, o, e);
}
const R5 = {
  kernelName: dl,
  backendName: "webgl",
  kernelFunc: Bv
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Hv {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const i = t.padInfo.top, a = t.padInfo.left, l = t.strideHeight, c = t.strideWidth, u = t.dilationHeight, h = t.dilationWidth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4, g = t.dataFormat === "channelsLast", y = g ? 1 : 2, b = g ? 2 : 3, w = g ? 3 : 1;
    let x = "", S = "";
    s && (r ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : x = `
          float activation(float x) {
            ${s}
          }
        `, S = "result = activation(result);");
    const v = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${v}
        ${S}
        setOutput(result);
      }
    `;
  }
}
class E5 {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const e = t.padInfo.front, s = t.padInfo.top, r = t.padInfo.left, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.filterDepth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${o}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Uv {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = dn(this.outputShape.length);
    const i = t.padInfo.left, a = t.strideWidth, l = t.dilationWidth, c = t.filterHeight, u = t.filterWidth, h = u;
    let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < u; g++)
      d += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < u; g++)
      d += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (h + 1) / 2; g++) {
      const y = g * 2;
      if (d += `
           xC = xCCorner + ${y * l};
           `, a === 1) {
        if (y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `, l === 1 && y > 0 ? d += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `, y + 1 < u)) {
          const b = i % 2 === 0 ? qu(l) : l;
          l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     ` : d += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${y + 1} = xTexelC${y};
                     ` : d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `;
        }
      } else
        y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `, y + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `, y + 1 < u && (d += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
      y < u && (d += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, y + 1 < u && (d += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let p = "", f = "";
    s && (r ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : o ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const m = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L5 {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = t, this.enableShapeUniforms = dn(this.outputShape.length);
    const { dataFormat: s } = e, r = hn(), o = s === "channelsLast", i = o ? 1 : 2, a = o ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
    let c = "";
    for (let u = 0; u <= 1; u++)
      for (let h = 0; h <= 1; h++)
        c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ju(n, t) {
  const e = n.length;
  return e >= 3 ? t ? [
    ...n.slice(0, -3),
    n[e - 3] * n[e - 2],
    n[e - 1]
  ] : [
    ...n.slice(0, -3),
    n[e - 3],
    n[e - 2] * n[e - 1]
  ] : !t && e === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function Yv({ x: n, filter: t, convInfo: e, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const l = n.shape, c = s.texData.get(n.dataId), u = e.inChannels, h = l[0] * l[1] * l[2], d = e.outChannels, p = e.dataFormat === "channelsLast", f = !1, m = !1;
  let g;
  const y = [];
  if (o != null) {
    const x = ju(o.shape, p);
    x != null && (o = pt({
      inputs: { x: o },
      backend: s,
      attrs: { shape: x }
    }), y.push(o));
  }
  if (r != null) {
    const x = ju(r.shape, p);
    x != null && (r = pt({ inputs: { x: r }, backend: s, attrs: { shape: x } }), y.push(r));
  }
  if (!((h === 1 || d === 1) && u > Mv) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && Vt(c.shape.slice(-3), l.slice(-3))) {
    const x = l[0] * l[1] * (l[2] + 1), S = {
      dataId: n.dataId,
      shape: [1, x, e.inChannels],
      dtype: n.dtype
    }, v = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, k(Hu(c.shape, S.shape), () => `packed reshape ${c.shape} to ${S.shape} isn't free`);
    const T = pt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    });
    y.push(T);
    const $ = Yu({
      a: S,
      b: T,
      backend: s,
      transposeA: f,
      transposeB: m,
      bias: r,
      activation: a,
      preluActivationWeights: o,
      leakyreluAlpha: i
    }), R = s.texData.get($.dataId);
    k(R.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = v, R.shape = e.outShape, g = On({ inputs: { x: $ }, backend: s }), g.shape = e.outShape, y.push($);
  } else {
    const x = e.outHeight * e.outWidth, S = pt({
      inputs: { x: n },
      backend: s,
      attrs: {
        shape: p ? [e.batchSize, x, e.inChannels] : [e.batchSize, e.inChannels, x]
      }
    }), v = pt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    }), T = Yu({
      a: p ? S : v,
      b: p ? v : S,
      transposeA: !p,
      transposeB: m,
      backend: s,
      bias: r,
      activation: a,
      preluActivationWeights: o,
      leakyreluAlpha: i
    });
    g = pt({ inputs: { x: T }, backend: s, attrs: { shape: e.outShape } }), y.push(S), y.push(v), y.push(T);
  }
  for (const x of y)
    s.disposeIntermediateTensorInfo(x);
  return g;
}
function jv({ x: n, filter: t, convInfo: e, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: h, outHeight: d, dataFormat: p } = e, f = p === "channelsLast", m = l * c * u, g = d * h, y = [e.batchSize, m, g], b = !0, w = !1, x = [];
  if (o != null) {
    const J = ju(o.shape, f);
    J != null && (o = pt({
      inputs: { x: o },
      backend: s,
      attrs: { shape: J }
    }), x.push(o));
  }
  if (r != null) {
    const J = ju(r.shape, f);
    J != null && (r = pt({ inputs: { x: r }, backend: s, attrs: { shape: J } }), x.push(r));
  }
  const S = pt({
    inputs: { x: t },
    backend: s,
    attrs: { shape: [1, m, H(t.shape) / m] }
  });
  x.push(S);
  const v = new L5(y, e), T = [
    n.shape,
    [e.padInfo.top, e.padInfo.left],
    [e.strideHeight, e.strideWidth],
    [e.dilationHeight, e.dilationWidth],
    [e.inChannels],
    [e.filterWidth * e.inChannels],
    [e.outWidth]
  ], $ = s.runWebGLProgram(v, [n], "float32", T), R = pt({ inputs: { x: $ }, backend: s, attrs: { shape: y } });
  x.push($), x.push(R);
  const E = r != null, V = o != null, X = a === "leakyrelu", _ = a ? tl(a, !0) : null, B = new Pv(f ? R.shape : S.shape, f ? S.shape : R.shape, f ? [e.batchSize, g, e.outChannels] : [e.batchSize, e.outChannels, g], b, w, E, _, V, X), U = f ? [R, S] : [S, R];
  if (r && U.push(r), V && U.push(o), X) {
    const J = s.makeTensorInfo([], "float32", Vs(i, "float32"));
    U.push(J), x.push(J);
  }
  const Y = s.runWebGLProgram(B, U, "float32"), tt = pt({ inputs: { x: Y }, backend: s, attrs: { shape: e.outShape } });
  x.push(Y);
  for (const J of x)
    s.disposeIntermediateTensorInfo(J);
  return tt;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s, h = or(l), d = _e(r.shape, o.shape, i, c, a, u, !1, h);
  let p;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    p = Yv({ x: r, filter: o, convInfo: d, backend: e });
  else if (d.strideWidth <= 2 && h === "channelsLast" && K().getBool("WEBGL_EXP_CONV")) {
    const m = new Uv(d), g = [
      [d.padInfo.top, d.padInfo.left],
      [d.strideHeight, d.strideWidth],
      [d.dilationHeight, d.dilationWidth],
      [d.inHeight, d.inWidth]
    ];
    p = e.runWebGLProgram(m, [r, o], "float32", g);
  } else if (K().getBool("WEBGL_CONV_IM2COL"))
    p = jv({ x: r, filter: o, convInfo: d, backend: e });
  else {
    const m = new Hv(d);
    p = e.runWebGLProgram(m, [r, o], "float32");
  }
  const f = pt({ inputs: { x: p }, backend: e, attrs: { shape: d.outShape } });
  return e.disposeIntermediateTensorInfo(p), f;
}
const G5 = {
  kernelName: pl,
  backendName: "webgl",
  kernelFunc: D5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F5 {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, i = t.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class O5 {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = t.dataFormat === "channelsLast", a = e - 1 - t.padInfo.top, l = s - 1 - t.padInfo.left, c = i ? 1 : 2, u = i ? 2 : 3, h = i ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class A5 {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideDepth, s = t.strideHeight, r = t.strideWidth, o = t.padInfo.front, i = t.padInfo.top, a = t.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${o};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class z5 {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, r = t.filterWidth, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = e - 1 - t.padInfo.front, c = s - 1 - t.padInfo.top, u = r - 1 - t.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${o}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, h = or(l), d = _e(r.shape, u, i, 1, a, c, !1, h), p = new F5(d);
  return e.runWebGLProgram(p, [r, o], "float32");
}
const V5 = {
  kernelName: lh,
  backendName: "webgl",
  kernelFunc: W5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s, h = or(c), d = _e(i, o.shape, a, 1, l, u, !1, h), p = new O5(d);
  return e.runWebGLProgram(p, [r, o], "float32");
}
const M5 = {
  kernelName: fl,
  backendName: "webgl",
  kernelFunc: P5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s, c = Lr(r.shape, o.shape, i, l, a), u = new E5(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const _5 = {
  kernelName: ml,
  backendName: "webgl",
  kernelFunc: X5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, filterShape: l } = s, c = Lr(r.shape, l, i, 1, a), u = new A5(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const Z5 = {
  kernelName: ch,
  backendName: "webgl",
  kernelFunc: K5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { pad: i, strides: a, inputShape: l } = s, c = Lr(l, o.shape, a, 1, i), u = new z5(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const H5 = {
  kernelName: uh,
  backendName: "webgl",
  kernelFunc: B5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const U5 = Ia + `
  return cos(x);
`, Y5 = Zt({ opSnippet: U5 }), j5 = {
  kernelName: di,
  backendName: "webgl",
  kernelFunc: Y5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J5 = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, Q5 = Zt({ opSnippet: J5 }), q5 = {
  kernelName: pi,
  backendName: "webgl",
  kernelFunc: Q5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tY {
  constructor(t, e, s, r, o) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [i, a, l, c] = t, [u] = e, [h, d] = s;
    this.outputShape = [u, h, d, c];
    const p = r === "bilinear" ? 1 : 0, [f, m] = [`${a - 1}.0`, `${l - 1}.0`], [g, y, b] = h > 1 ? [
      `${(a - 1) / (h - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${f} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${f}`
    ], [w, x, S] = d > 1 ? [
      `${(l - 1) / (d - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${m} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${m}`
    ];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${o}));
          return;
        }
        float in_x = ${S};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${o}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eY = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, boxes: o, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, u = new tY(r.shape, o.shape, a, l, c);
  return e.runWebGLProgram(u, [r, o, i], "float32");
}, nY = {
  kernelName: dh,
  backendName: "webgl",
  kernelFunc: eY
};
var nl;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(nl || (nl = {}));
class zx {
  constructor(t, e, s, r) {
    this.op = t, this.outputShape = e, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const o = this.outputShape.length, i = this.op === nl.Prod ? "1.0" : "0.0", a = s ? i : `getX(${Wx(o, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let c = "", u = "";
    s ? (c = r ? `end != ${l - 1}` : "end != 0", u = r ? "end + 1" : "end - 1") : (c = r ? `end + pow2 < ${l}` : "end >= pow2", u = r ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${re(o)} coords = getOutputCoords();
        int end = ${Vx(o, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${Vx(o, "coords", this.op)} = idx;
          val ${this.op}= getX(${Wx(o, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function Wx(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.x, ${t}.y`;
  if (n === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (n === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function Vx(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.y`;
  if (n === 3)
    return `${t}.z`;
  if (n === 4)
    return `${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jv(n, t, e, s, r, o) {
  const i = t.shape.length, a = we([s], i);
  let l = t;
  a != null && (l = cn({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
  const c = Ne(1, i)[0];
  if (c !== i - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  const u = l.shape[c];
  let h = On({ inputs: { x: l }, backend: e });
  for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
    const p = new zx(n, l.shape, !1, o), f = [[d]], m = h;
    h = e.runWebGLProgram(p, [h], h.dtype, f), e.disposeIntermediateTensorInfo(m);
  }
  if (r) {
    const d = new zx(n, l.shape, r, o), p = h;
    h = e.runWebGLProgram(d, [h], h.dtype), e.disposeIntermediateTensorInfo(p);
  }
  if (a != null) {
    const d = Dr(a), p = cn({ inputs: { x: h }, backend: e, attrs: { perm: d } });
    return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(l), p;
  }
  return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  return Jv(nl.Prod, r, e, o, i, a);
}
const rY = {
  kernelName: hh,
  backendName: "webgl",
  kernelFunc: sY
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  return Jv(nl.Sum, r, e, o, i, a);
}
const iY = {
  kernelName: gl,
  backendName: "webgl",
  kernelFunc: oY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i, binaryOutput: a } = s;
  if (r.shape.length === 1) {
    const l = e.readSync(r.dataId), c = e.readSync(o.dataId), u = Lv(l, c, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = e.bufferSync(r), c = e.bufferSync(o), u = xU(l, c, i, a);
    return e.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const lY = {
  kernelName: ph,
  backendName: "webgl",
  kernelFunc: aY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cY {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockSize: o, dataFormat: i } = s, a = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], c = i === "NHWC" ? r.shape[2] : r.shape[3], u = i === "NHWC" ? r.shape[3] : r.shape[1], h = l * o, d = c * o, p = u / (o * o), f = i === "NHWC" ? [a, h, d, p] : [a, p, h, d], m = new cY(f, o, i);
  return e.runWebGLProgram(m, [r], r.dtype);
}
const hY = {
  kernelName: fh,
  backendName: "webgl",
  kernelFunc: uY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Qv {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = dn(this.outputShape.length);
    const i = t.filterHeight, a = t.filterWidth, l = t.outChannels / t.inChannels;
    let c = "", u = "";
    s && (r ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
    const h = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qv {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = dn(this.outputShape.length);
    const i = t.outChannels / t.inChannels, a = t.padInfo.left, l = t.strideWidth, c = t.dilationWidth, u = t.filterHeight, h = t.filterWidth, d = h;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let y = 0; y < h; y++)
      p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
    p += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let y = 0; y < h; y++)
      p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let y = 0; y < (d + 1) / 2; y++) {
      const b = y * 2;
      if (p += `
          xC = xCCorner + ${b * c};
          `, l === 1) {
        if (b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, c === 1 && b > 0 ? p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < h)) {
          const w = a % 2 === 0 ? qu(c) : c;
          c % 2 === 0 && a % 2 === 1 || c % 2 !== 0 && a % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${b + 1} = xTexelC${b};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < h && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < h && (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < h && (p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < h && (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", m = "";
    s && (r ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
    const g = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  let u = l;
  u == null && (u = [1, 1]), k(je(i, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  const h = _e(r.shape, o.shape, i, u, a, c, !0);
  let d;
  K().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new qv(h) : d = new Qv(h);
  const p = [
    [h.padInfo.top, h.padInfo.left],
    [h.strideHeight, h.strideWidth],
    [h.dilationHeight, h.dilationWidth],
    [h.inHeight, h.inWidth]
  ];
  return e.runWebGLProgram(d, [r, o], "float32", p);
}
const pY = {
  kernelName: yl,
  backendName: "webgl",
  kernelFunc: dY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fY {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, i = t.outChannels / t.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class mY {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = e - 1 - t.padInfo.top, a = s - 1 - t.padInfo.left, l = t.outChannels / t.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s, h = _e(r.shape, u, i, a, l, c, !0), d = new fY(h);
  return e.runWebGLProgram(d, [r, o], "float32");
}
const yY = {
  kernelName: mh,
  backendName: "webgl",
  kernelFunc: gY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s, h = _e(u, o.shape, i, a, l, c, !0), d = new mY(h);
  return e.runWebGLProgram(d, [r, o], "float32");
}
const xY = {
  kernelName: gh,
  backendName: "webgl",
  kernelFunc: bY
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wY {
  constructor(t) {
    this.variableNames = ["X"], this.outputShape = [t, t], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IY(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = [...s.shape, ...s.shape], o = H(s.shape), i = pt({ inputs: { x: s }, backend: e, attrs: { shape: [o] } }), a = new wY(o), l = e.runWebGLProgram(a, [i], i.dtype), c = pt({ inputs: { x: l }, backend: e, attrs: { shape: r } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(l), c;
}
const SY = {
  kernelName: yh,
  backendName: "webgl",
  kernelFunc: IY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vY {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const { inHeight: e, inWidth: s, padInfo: r, strideHeight: o, strideWidth: i, filterHeight: a, filterWidth: l, dilationHeight: c, dilationWidth: u } = t, { top: h, left: d } = r;
    this.userCode = `
      const ivec2 strides = ivec2(${o}, ${i});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s, c = ac(r.shape, o.shape, i, a, "NHWC", l);
  let u;
  const h = new vY(c);
  u = e.runWebGLProgram(h, [r, o], "float32");
  const d = pt({ inputs: { x: u }, backend: e, attrs: { shape: c.outShape } });
  return e.disposeIntermediateTensorInfo(u), d;
}
const kY = {
  kernelName: bl,
  backendName: "webgl",
  kernelFunc: CY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: r } = s, o = t, { allDims: i, summedDims: a, idDims: l } = ty(r, o.length);
  ny(i.length, l, o);
  const { path: c, steps: u } = sy(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = ey(p, l[g]);
      let w;
      ry(y) ? w = o[g] : (w = cn({ inputs: { x: o[g] }, backend: e, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let S = 0; S < b.length; ++S)
        x.splice(b[S], 0, 1);
      Vt(w.shape, x) || (w = pt({ inputs: { x: w }, backend: e, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = l0({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = Np({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && e.disposeIntermediateTensorInfo(m);
  return d;
}
const TY = {
  kernelName: bh,
  backendName: "webgl",
  kernelFunc: NY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $Y = "return (x >= 0.0) ? x : (exp(x) - 1.0);", RY = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, EY = Zt({ opSnippet: $Y, packedOpSnippet: RY }), LY = {
  kernelName: mi,
  backendName: "webgl",
  kernelFunc: EY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DY = "return (b >= 1.0) ? a : a * (b + 1.0);", GY = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, FY = (n) => {
  const { inputs: t, backend: e } = n, { dy: s, y: r } = t, o = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(GY, s.shape, r.shape) : new ti(DY, s.shape, r.shape);
  return e.runWebGLProgram(o, [s, r], s.dtype);
}, OY = {
  kernelName: xh,
  backendName: "webgl",
  kernelFunc: FY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AY = `
  return vec4(equal(a, b));
`, zY = "return float(a == b);", WY = Qe({
  opSnippet: zY,
  packedOpSnippet: AY,
  dtype: "bool",
  cpuKernelImpl: vU
}), VY = {
  kernelName: xl,
  backendName: "webgl",
  kernelFunc: WY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PY = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Hg};
  float a1 = ${Ug};
  float a2 = ${Yg};
  float a3 = ${jg};
  float a4 = ${Jg};
  float a5 = ${Qg};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, MY = Zt({ opSnippet: PY }), XY = {
  kernelName: gi,
  backendName: "webgl",
  kernelFunc: MY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _Y = Ia + `
  return exp(x);
`, KY = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, t2 = Zt({
  opSnippet: _Y,
  packedOpSnippet: KY,
  cpuKernelImpl: CU,
  dtype: "float32"
}), ZY = {
  kernelName: yi,
  backendName: "webgl",
  kernelFunc: t2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function em(n) {
  const { inputs: t, attrs: e, backend: s } = n, { dim: r } = e, { input: o } = t, i = o.shape.length, a = o.shape.slice();
  let l = r;
  return r < 0 && (k(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), a.splice(l, 0, 1), pt({ inputs: { x: o }, backend: s, attrs: { shape: a } });
}
const BY = {
  kernelName: wl,
  backendName: "webgl",
  kernelFunc: em
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Px = "return exp(x) - 1.0;", HY = Zt({ opSnippet: Px, packedOpSnippet: Px, cpuKernelImpl: kU }), UY = {
  kernelName: bi,
  backendName: "webgl",
  kernelFunc: HY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Mx {
  constructor(t, e, s) {
    this.variableNames = ["real", "imag"];
    const r = e[1];
    this.outputShape = e;
    const o = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, i = s ? `${r}.0` : "1.0";
    let a;
    if (t === "real")
      a = "return real * expR - imag * expI;";
    else if (t === "imag")
      a = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);
    this.userCode = `
      const float exponentMultiplier = ${o};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e2(n, t, e) {
  const s = e.texData.get(n.dataId), r = H(n.shape), o = n.shape[n.shape.length - 1], i = r / o, a = pt({ inputs: { x: n }, backend: e, attrs: { shape: [i, o] } }), l = a.shape, c = new Mx("real", l, t), u = new Mx("imag", l, t), h = [
    {
      dataId: s.complexTensorInfos.real.dataId,
      dtype: s.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: s.complexTensorInfos.imag.dataId,
      dtype: s.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = zr({ inputs: { real: d, imag: p }, backend: e });
  e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p);
  const m = pt({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(f), m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YY(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return e2(s, !1, e);
}
const jY = {
  kernelName: wh,
  backendName: "webgl",
  kernelFunc: YY
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JY {
  constructor(t, e) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = t, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zc(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: r } = e;
  let { dtype: o } = e;
  if (o = o || ei(r), o === "string") {
    const i = Bt(o, H(s));
    return i.fill(r), t.makeTensorInfo(s, o, i);
  } else {
    const i = new JY(s, r), a = [[r]];
    return t.runWebGLProgram(i, [], o, a);
  }
}
const QY = {
  kernelName: Ih,
  backendName: "webgl",
  kernelFunc: Zc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qY {
  constructor(t) {
    this.variableNames = ["Image"], this.outputShape = [];
    const e = t[2];
    this.outputShape = t, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tj = {
  kernelName: Sh,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { image: e } = n, s = t, r = new qY(e.shape);
    return s.runWebGLProgram(r, [e], e.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xx = "return floor(x);", ej = Zt({ opSnippet: Xx, packedOpSnippet: Xx, cpuKernelImpl: NU }), nj = {
  kernelName: xi,
  backendName: "webgl",
  kernelFunc: ej
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sj = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, rj = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, oj = Qe({ opSnippet: sj, packedOpSnippet: rj, dtype: "int32" }), ij = {
  kernelName: wi,
  backendName: "webgl",
  kernelFunc: oj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class aj {
  constructor(t) {
    this.variableNames = ["A"];
    const e = hn(), [s, r] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lj {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const e = hn(), [s, r] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cj = {
  kernelName: vu,
  backendName: "webgl",
  kernelFunc: uj
};
let Eo, Bp = K().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function uj(n) {
  const { inputs: t, backend: e, attrs: s } = n;
  let { pixels: r } = t;
  const { numChannels: o } = s, i = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, a = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, [l, c] = i ? [
    r.videoWidth,
    r.videoHeight
  ] : [r.width, r.height], u = [c, l], h = [c, l, o];
  if (a || i) {
    const m = K().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (Eo == null || m !== Bp) && (Bp = m, Eo = document.createElement("canvas").getContext("2d", { willReadFrequently: Bp })), Eo.canvas.width = l, Eo.canvas.height = c, Eo.drawImage(r, 0, 0, l, c), r = Eo.canvas;
  }
  const d = e.makeTensorInfo(u, "int32");
  e.texData.get(d.dataId).usage = Xn.PIXELS, e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId), r);
  const p = K().getBool("WEBGL_PACK") ? new lj(h) : new aj(h), f = e.runWebGLProgram(p, [d], "int32");
  return e.disposeData(d.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hj(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s, m = or(u), g = _e(r.shape, o.shape, l, h, c, d, !1, m);
  let y;
  const b = [], w = i != null, x = a != null, S = p === "leakyrelu", v = () => {
    const $ = [r, o], R = (E, V) => {
      if (V === "NCHW" && E.shape.length === 1 && E.shape[0] !== 1) {
        const X = pt({
          inputs: { x: E },
          backend: e,
          attrs: { shape: [E.shape[0], 1, 1] }
        });
        return b.push(X), X;
      }
      return E;
    };
    if (w && $.push(R(i, u)), x && $.push(R(a, u)), S) {
      const E = e.makeTensorInfo([], "float32", Vs(f, "float32"));
      $.push(E), b.push(E);
    }
    return $;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    y = Yv({
      x: r,
      filter: o,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else if (g.strideWidth <= 2 && m === "channelsLast" && K().getBool("WEBGL_EXP_CONV")) {
    const $ = p ? tl(p, !0) : null, R = new Uv(g, w, $, x, S), E = [
      [g.padInfo.top, g.padInfo.left],
      [g.strideHeight, g.strideWidth],
      [g.dilationHeight, g.dilationWidth],
      [g.inHeight, g.inWidth]
    ], V = v();
    y = e.runWebGLProgram(R, V, "float32", E);
  } else if (K().getBool("WEBGL_CONV_IM2COL"))
    y = jv({
      x: r,
      filter: o,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else {
    const $ = p ? tl(p, !1) : null, R = new Hv(g, w, $, x, S), E = v();
    y = e.runWebGLProgram(R, E, "float32");
  }
  const T = pt({ inputs: { x: y }, backend: e, attrs: { shape: g.outShape } });
  return b.push(y), b.forEach(($) => e.disposeIntermediateTensorInfo($)), T;
}
const dj = {
  kernelName: Pa,
  backendName: "webgl",
  kernelFunc: hj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pj(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dilations: u, dimRoundingMode: h, activation: d, leakyreluAlpha: p } = s, f = [];
  let m = u;
  m == null && (m = [1, 1]), k(je(l, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);
  const g = _e(r.shape, o.shape, l, m, c, h, !0), y = K().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = d ? tl(d, y) : null, w = [r, o], x = i != null, S = a != null, v = d === "leakyrelu";
  if (x && w.push(i), S && w.push(a), v) {
    const E = e.makeTensorInfo([], "float32", Vs(p, "float32"));
    w.push(E), f.push(E);
  }
  let T;
  y ? T = new qv(g, x, b, S, v) : T = new Qv(g, x, b, S, v);
  const $ = [
    [g.padInfo.top, g.padInfo.left],
    [g.strideHeight, g.strideWidth],
    [g.dilationHeight, g.dilationWidth],
    [g.inHeight, g.inWidth]
  ], R = e.runWebGLProgram(T, w, "float32", $);
  return f.forEach((E) => e.disposeIntermediateTensorInfo(E)), R;
}
const fj = {
  kernelName: Ma,
  backendName: "webgl",
  kernelFunc: pj
};
class mj {
  constructor(t, e, s, r) {
    this.sliceDim = t, this.strides = e, this.paramsShape = r, this.variableNames = ["x", "indices"], this.outputShape = s;
    const o = re(s.length);
    let i = `
    int index;`;
    for (let a = 0; a < this.sliceDim; a++)
      i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
    this.userCode = `
         void main() {
          ${o} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gj(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: r } = t, o = r.shape, i = o[o.length - 1], a = H(s.shape), [l, c, u, h] = id(s, r), d = pt({ inputs: { x: r }, backend: e, attrs: { shape: [c, i] } }), p = pt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [H(s.shape) / u, u] }
  });
  if (e.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    const y = e.readSync(r.dataId), b = e.bufferSync(s), w = TU(y, b, s.dtype, c, i, u, h, s.shape, a);
    return e.makeTensorInfo(l, s.dtype, w.values);
  }
  const f = new mj(i, h, [c, u], s.shape), m = e.runWebGLProgram(f, [p, d], p.dtype), g = pt({ inputs: { x: m }, backend: e, attrs: { shape: l } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(m), g;
}
const yj = {
  kernelName: vh,
  backendName: "webgl",
  kernelFunc: gj
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bj {
  constructor(t, e) {
    this.variableNames = ["A", "indices"], this.outputShape = e, this.rank = e.length;
    const s = re(this.rank), r = xj(t);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
  }
}
function xj(n, t) {
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < n.length; r++)
    r === 2 ? s.push("index") : s.push(`${e[r]}`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, indices: o } = t, { axis: i, batchDims: a } = s, l = At(i, r.shape)[0];
  if (K().get("DEBUG")) {
    const b = e.readSync(o.dataId), w = r.shape[l];
    for (let x = 0; x < b.length; ++x) {
      const S = b[x];
      k(S <= w - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${w - 1}]`);
    }
  }
  const c = yy(r, o, l, a), u = H(o.shape), h = [], d = pt({
    inputs: { x: r },
    backend: e,
    attrs: {
      shape: [
        c.batchSize,
        c.outerSize,
        c.dimSize,
        c.sliceSize
      ]
    }
  }), p = pt({
    inputs: { x: o },
    backend: e,
    attrs: { shape: [c.batchSize, u / c.batchSize] }
  });
  h.push(d), h.push(p);
  const f = [
    c.batchSize,
    c.outerSize,
    u / c.batchSize,
    c.sliceSize
  ];
  if (e.shouldExecuteOnCPU([r, o]) || r.dtype === "string") {
    const b = e.bufferSync(p), w = e.bufferSync(d), x = $U(w, b, f);
    return h.forEach((S) => e.disposeIntermediateTensorInfo(S)), e.makeTensorInfo(c.outputShape, x.dtype, x.values);
  }
  const m = new bj(d.shape, f), g = e.runWebGLProgram(m, [d, p], d.dtype);
  h.push(g);
  const y = pt({ inputs: { x: g }, backend: e, attrs: { shape: c.outputShape } });
  return h.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
}
const wj = {
  kernelName: Sl,
  backendName: "webgl",
  kernelFunc: n2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ij = "return float(a > b);", Sj = `
  return vec4(greaterThan(a, b));
`, vj = Qe({
  opSnippet: Ij,
  packedOpSnippet: Sj,
  cpuKernelImpl: RU,
  dtype: "bool"
}), Cj = {
  kernelName: vl,
  backendName: "webgl",
  kernelFunc: vj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kj = "return float(a >= b);", Nj = `
  return vec4(greaterThanEqual(a, b));
`, Tj = Qe({
  opSnippet: kj,
  packedOpSnippet: Nj,
  dtype: "bool",
  cpuKernelImpl: EU
}), $j = {
  kernelName: Ii,
  backendName: "webgl",
  kernelFunc: Tj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rj(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return e2(s, !0, e);
}
const Ej = {
  kernelName: Ch,
  backendName: "webgl",
  kernelFunc: Rj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lj = "return float(!isnan(x) && !isinf(x));", Dj = Zt({ opSnippet: Lj, dtype: "bool" }), Gj = {
  kernelName: vi,
  backendName: "webgl",
  kernelFunc: Dj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fj = "return float(isinf(x));", Oj = Zt({ opSnippet: Fj, dtype: "bool" }), Aj = {
  kernelName: Ci,
  backendName: "webgl",
  kernelFunc: Oj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zj = "return float(isnan(x));", Wj = Zt({ opSnippet: zj, dtype: "bool" }), Vj = {
  kernelName: ki,
  backendName: "webgl",
  kernelFunc: Wj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pj = "return float(a < b);", Mj = `
  return vec4(lessThan(a, b));
`, Xj = Qe({
  opSnippet: Pj,
  packedOpSnippet: Mj,
  cpuKernelImpl: LU,
  dtype: "bool"
}), _j = {
  kernelName: kl,
  backendName: "webgl",
  kernelFunc: Xj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kj = "return float(a <= b);", Zj = `
  return vec4(lessThanEqual(a, b));
`, Bj = Qe({
  opSnippet: Kj,
  packedOpSnippet: Zj,
  cpuKernelImpl: DU,
  dtype: "bool"
}), Hj = {
  kernelName: Nl,
  backendName: "webgl",
  kernelFunc: Bj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uj(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, num: o } = e, i = GU(s, r, o);
  return t.makeTensorInfo([i.length], "float32", i);
}
const Yj = {
  kernelName: Nh,
  backendName: "webgl",
  kernelFunc: Uj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jj = Ia + `
  return x < 0.0 ? 0./0. : log(x);
`, Jj = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, Qj = Zt({ opSnippet: jj, packedOpSnippet: Jj, cpuKernelImpl: FU }), qj = {
  kernelName: Ni,
  backendName: "webgl",
  kernelFunc: Qj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tJ = Ia + `
  return log(1.0 + x);
`, eJ = Zt({ opSnippet: tJ }), nJ = {
  kernelName: Ti,
  backendName: "webgl",
  kernelFunc: eJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sJ = "return float(a >= 1.0 && b >= 1.0);", rJ = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, oJ = Qe({
  opSnippet: sJ,
  packedOpSnippet: rJ,
  dtype: "bool"
}), iJ = {
  kernelName: Tl,
  backendName: "webgl",
  kernelFunc: oJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aJ = "return float(!(x >= 1.0));", lJ = Zt({ opSnippet: aJ }), cJ = {
  kernelName: $l,
  backendName: "webgl",
  kernelFunc: lJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uJ = "return float(a >= 1.0 || b >= 1.0);", hJ = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, dJ = Qe({ opSnippet: uJ, packedOpSnippet: hJ, dtype: "bool" }), pJ = {
  kernelName: Rl,
  backendName: "webgl",
  kernelFunc: dJ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [];
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gJ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { depthRadius: o, bias: i, alpha: a, beta: l } = s, c = K().getBool("WEBGL_PACK_NORMALIZATION") ? new mJ(r.shape, o, i, a, l) : new fJ(r.shape, o, i, a, l);
  return e.runWebGLProgram(c, [r], r.dtype);
}, yJ = {
  kernelName: El,
  backendName: "webgl",
  kernelFunc: gJ
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = s, this.alpha = r, this.beta = o, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${o})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${o});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xJ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, y: o, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s, h = new bJ(r.shape, a, l, c, u);
  return e.runWebGLProgram(h, [r, o, i], r.dtype);
}, wJ = {
  kernelName: Th,
  backendName: "webgl",
  kernelFunc: xJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IJ(n, t, e, s) {
  const r = H(t), i = H(n.shape) / r, a = pt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }), l = To(a, n.dtype, "max", s), c = pt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reductionIndices: o, keepDims: i } = s, a = r.shape.length, l = At(o, r.shape);
  let c = l;
  const u = we(c, a), h = u != null, d = e.shouldExecuteOnCPU([r]);
  let p = r;
  if (h) {
    if (d) {
      const w = e.texData.get(p.dataId).values, x = new Array(a);
      for (let T = 0; T < x.length; T++)
        x[T] = r.shape[u[T]];
      const S = i0(w, r.shape, r.dtype, u, x);
      p = e.makeTensorInfo(x, r.dtype);
      const v = e.texData.get(p.dataId);
      v.values = S;
    } else
      p = kp(r, u, e);
    c = Ne(c.length, a);
  }
  Je("max", c, a);
  const [f, m] = ze(p.shape, c);
  let g = f;
  i && (g = ke(f, l));
  let y;
  if (d) {
    const w = e.texData.get(p.dataId).values, x = OU(w, H(m), g, r.dtype);
    y = e.makeTensorInfo(g, r.dtype);
    const S = e.texData.get(y.dataId);
    S.values = x;
  } else
    y = IJ(p, m, g, e);
  return h && e.disposeIntermediateTensorInfo(p), y;
}
const SJ = {
  kernelName: Ll,
  backendName: "webgl",
  kernelFunc: s2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vJ = a0 + `
  return max(a, b);
`, CJ = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, kJ = Qe({
  opSnippet: vJ,
  packedOpSnippet: CJ,
  cpuKernelImpl: AU
}), NJ = {
  kernelName: $i,
  backendName: "webgl",
  kernelFunc: kJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  Pc(r, "maxPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(je(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = ls(r.shape, o, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && Vt(u.inShape, u.outShape))
    return On({ inputs: { x: r }, backend: e });
  const h = new el(u, "max", !1);
  return e.runWebGLProgram(h, [r], r.dtype);
}
const $J = {
  kernelName: Dl,
  backendName: "webgl",
  kernelFunc: TJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dataFormat: l, dimRoundingMode: c } = s, u = [1, 1, 1], h = rr(r.shape, o, i, u, a, c, l), d = new c0(h, "max", !1);
  return e.runWebGLProgram(d, [r], r.dtype);
}
const EJ = {
  kernelName: Gl,
  backendName: "webgl",
  kernelFunc: RJ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LJ {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.dilationHeight, o = t.effectiveFilterHeight, i = t.effectiveFilterWidth, a = o - 1 - t.padInfo.top, l = i - 1 - t.padInfo.left, c = o * i - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class DJ {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideDepth, s = t.strideHeight, r = t.strideWidth, o = t.dilationDepth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterDepth, c = t.effectiveFilterHeight, u = t.effectiveFilterWidth, h = l - 1 - t.padInfo.front, d = c - 1 - t.padInfo.top, p = u - 1 - t.padInfo.left, f = l * c * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = rr(i.shape, a, l, h, c, u), p = new c0(d, "max", !0), f = e.runWebGLProgram(p, [i], i.dtype), m = new DJ(d), g = e.runWebGLProgram(m, [r, f], i.dtype);
  return e.disposeIntermediateTensorInfo(f), g;
}
const FJ = {
  kernelName: Rh,
  backendName: "webgl",
  kernelFunc: GJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o, output: i } = t, a = o;
  Pc([o, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = ls(a.shape, l, c, 1, u, h), p = !0, f = new el(d, "max", p), m = e.runWebGLProgram(f, [a], a.dtype), g = new LJ(d), y = e.runWebGLProgram(g, [r, m], a.dtype);
  return e.disposeIntermediateTensorInfo(m), y;
}
const AJ = {
  kernelName: $h,
  backendName: "webgl",
  kernelFunc: OJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zJ(n, t, e, s) {
  let r = new el(e, "max", !1);
  const o = s.runWebGLProgram(r, [n], "float32");
  r = new el(e, "max", !0, !0, t);
  const i = s.runWebGLProgram(r, [n], "float32");
  return [o, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WJ = {
  kernelName: Eh,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t, l = e;
    k(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
    const c = [1, 1];
    k(je(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
    const u = ls(s.shape, r, o, c, i), [h, d] = zJ(s, a, u, l);
    return [h, d];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VJ(n, t, e, s) {
  const r = H(t), i = H(n.shape) / r, a = pt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }), l = To(a, "float32", "mean", s), c = pt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PJ = {
  kernelName: Fl,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { keepDims: r, axis: o } = t, i = e, a = s.shape.length, l = At(o, s.shape);
    let c = l;
    const u = we(c, a), h = u != null, d = i.shouldExecuteOnCPU([s]), p = [];
    let f = s;
    if (h) {
      if (d) {
        const x = i.texData.get(f.dataId).values, S = new Array(a);
        for (let $ = 0; $ < S.length; $++)
          S[$] = s.shape[u[$]];
        const v = i0(x, s.shape, s.dtype, u, S);
        f = i.makeTensorInfo(S, s.dtype);
        const T = i.texData.get(f.dataId);
        T.values = v;
      } else
        f = kp(s, u, i);
      p.push(f), c = Ne(c.length, a);
    }
    Je("sum", c, a);
    const [m, g] = ze(f.shape, c);
    let y = m;
    r && (y = ke(m, l));
    const b = VJ(f, g, y, i);
    for (const w of p)
      i.disposeIntermediateTensorInfo(w);
    return b;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = At(o, r.shape);
  let c = l;
  const u = we(c, a);
  let h = r;
  u != null && (h = cn({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = Ne(c.length, r.shape.length)), Je("min", c, a);
  const [d, p] = ze(h.shape, c), f = H(p), m = pt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = To(m, m.dtype, "min", e);
  let y;
  if (i) {
    const b = ke(d, l);
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = pt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const XJ = {
  kernelName: Ol,
  backendName: "webgl",
  kernelFunc: MJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _J = a0 + `
  return min(a, b);
`, KJ = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, ZJ = Qe({
  opSnippet: _J,
  packedOpSnippet: KJ,
  cpuKernelImpl: zU
}), BJ = {
  kernelName: Ri,
  backendName: "webgl",
  kernelFunc: ZJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HJ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = e.map((u, h) => u[0] + t[h] + u[1]);
    const r = t.length, o = re(r), i = e.map((u) => u[0]).join(","), a = e.map((u, h) => u[0] + t[h]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r), c = s === "reflect" ? 0 : 1;
    if (r === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${o} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UJ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map((f, m) => f[0] + t[m] + f[1]);
    const r = t.length, o = re(r), i = e.map((f) => f[0]).join(","), a = e.map((f, m) => f[0] + t[m]).join(","), l = an("rc", r), c = an("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = s === "reflect" ? 0 : 1;
    let p = "";
    if (r === 1) {
      const f = `
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    } else {
      const f = `
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[r - 2]} += 1;
        if(${l[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[r - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
    }
    this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YJ = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s } = n, { paddings: r, mode: o } = e, i = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new UJ(s.shape, r, o) : new HJ(s.shape, r, o);
  return t.runWebGLProgram(i, [s], s.dtype);
}, jJ = {
  kernelName: Al,
  backendName: "webgl",
  kernelFunc: YJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JJ = `if (b == 0.0) return NAN;
  return mod(a, b);`, QJ = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Xc + `
  return result;
`, qJ = Qe({
  opSnippet: JJ,
  packedOpSnippet: QJ
}), tQ = {
  kernelName: Ei,
  backendName: "webgl",
  kernelFunc: qJ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eQ {
  constructor(t, e, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [t, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nQ = `
if (a == b) {
  return 1.0;
};
return a / b;`, sQ = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, r2 = Qe({ opSnippet: nQ, packedOpSnippet: sQ, checkOutOfBounds: !0 }), rQ = {
  kernelName: fi,
  backendName: "webgl",
  kernelFunc: r2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _x = "return a - b;", o2 = Qe({
  opSnippet: _x,
  packedOpSnippet: _x,
  supportsComplex: !0,
  cpuKernelImpl: n9
}), oQ = {
  kernelName: Bi,
  backendName: "webgl",
  kernelFunc: o2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { dim: o } = s, i = At([o], r.shape), a = s2({
    inputs: { x: r },
    backend: e,
    attrs: { reductionIndices: i, keepDims: !1 }
  }), l = ke(a.shape, i), c = pt({ inputs: { x: a }, backend: e, attrs: { shape: l } }), u = o2({ inputs: { a: r, b: c }, backend: e }), h = t2({ inputs: { x: u }, backend: e }), d = Np({ inputs: { x: h }, backend: e, attrs: { axis: i, keepDims: !1 } }), p = pt({ inputs: { x: d }, backend: e, attrs: { shape: l } }), f = r2({ inputs: { a: h, b: p }, backend: e });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
}
const iQ = {
  kernelName: tc,
  backendName: "webgl",
  kernelFunc: i2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { numSamples: o, seed: i, normalized: a } = s, l = a ? r : i2({ inputs: { logits: r }, backend: e, attrs: { dim: r.shape.length - 1 } }), c = l.shape[0], u = l.shape[1], h = new eQ(c, u, o), d = [[i]], p = e.runWebGLProgram(h, [l], "int32", d);
  return a || e.disposeIntermediateTensorInfo(l), p;
}
const lQ = {
  kernelName: Lh,
  backendName: "webgl",
  kernelFunc: aQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cQ = us + `
  return -x;
`, uQ = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function hQ(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s])) {
    const o = e.texData.get(s.dataId), [i, a] = VU(o.values, s.shape, s.dtype);
    return e.makeTensorInfo(a, s.dtype, i);
  }
  let r;
  return K().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new Ur(s.shape, uQ) : r = new Zs(s.shape, cQ), e.runWebGLProgram(r, [s], s.dtype);
}
const dQ = {
  kernelName: zl,
  backendName: "webgl",
  kernelFunc: hQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pQ = Xd;
function fQ(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s, c = e.readSync(r.dataId), u = e.readSync(o.dataId), { selectedIndices: h } = pQ(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const mQ = {
  kernelName: Dh,
  backendName: "webgl",
  kernelFunc: fQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gQ = _d;
function yQ(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s, u = e.readSync(r.dataId), h = e.readSync(o.dataId), { selectedIndices: d, validOutputs: p } = gQ(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const bQ = {
  kernelName: Gh,
  backendName: "webgl",
  kernelFunc: yQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xQ = Kd;
function wQ(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s, u = e.readSync(r.dataId), h = e.readSync(o.dataId), d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = xQ(u, h, d, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const IQ = {
  kernelName: Fh,
  backendName: "webgl",
  kernelFunc: wQ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SQ {
  constructor(t, e, s, r) {
    this.variableNames = ["indices"], this.outputShape = [t, e], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vQ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r } = t, { dtype: o, depth: i, onValue: a, offValue: l } = s, c = H(r.shape), u = new SQ(c, i, a, l), h = pt({ inputs: { x: r }, backend: e, attrs: { shape: [c] } }), d = e.runWebGLProgram(u, [h], o);
  e.disposeIntermediateTensorInfo(h);
  const p = [...r.shape, i], f = pt({ inputs: { x: d }, backend: e, attrs: { shape: p } });
  return e.disposeIntermediateTensorInfo(d), f;
}, CQ = {
  kernelName: Pl,
  backendName: "webgl",
  kernelFunc: vQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ju(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "complex64") {
    const r = Kc({ inputs: { input: s }, backend: e }), o = Ju({ inputs: { x: r }, backend: e }), i = Tp({ inputs: { input: s }, backend: e }), a = Ju({ inputs: { x: i }, backend: e }), l = zr({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return Zc({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: e
    });
}
const kQ = {
  kernelName: sc,
  backendName: "webgl",
  kernelFunc: Ju
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a2(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const r = Kc({ inputs: { input: s }, backend: e }), o = a2({ inputs: { x: r }, backend: e }), i = Tp({ inputs: { input: s }, backend: e }), a = Ju({ inputs: { x: i }, backend: e }), l = zr({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return Zc({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: e });
}
const NQ = {
  kernelName: Vl,
  backendName: "webgl",
  kernelFunc: a2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s;
  if (t.length === 1)
    return em({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
  const o = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Ye(o, u.shape, "All tensors passed to stack must have matching shapes"), k(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = em({ inputs: { input: u }, backend: e, attrs: { dim: r } });
    return a.push(h), h;
  }), c = Bv({ inputs: l, backend: e, attrs: { axis: r } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const $Q = {
  kernelName: Ml,
  backendName: "webgl",
  kernelFunc: TQ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((c, u) => c[0] + t[u] + c[1]);
    const r = t.length, o = re(r), i = e.map((c) => c[0]).join(","), a = e.map((c, u) => c[0] + t[u]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
    if (r === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${o} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((m, g) => m[0] + t[g] + m[1]);
    const r = t.length, o = re(r), i = e.map((m) => m[0]).join(","), a = e.map((m, g) => m[0] + t[g]).join(","), l = an("rc", r), c = an("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = [
      `${o} rc = outputLoc;`,
      `${l[r - 1]} += 1;
       if(${u}) {
      `,
      r === 1 ? "" : `}
       rc = outputLoc;
       ${l[r - 2]} += 1;
       if(${l[r - 2]} < ${this.outputShape[r - 2]}) {`,
      r === 1 ? "" : `  ${l[r - 1]} += 1;
         if(${u}) {`
    ], p = r === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++)
      f += `
        ${d[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    f += r === 1 ? "} " : "}}", this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l2 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, constantValue: i } = s;
  if (H(r.shape) === 0) {
    const c = o.map((u, h) => u[0] + r.shape[h] + u[1]);
    return Zc({
      backend: e,
      attrs: { shape: c, value: i, dtype: r.dtype }
    });
  }
  const a = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new EQ(r.shape, o, i) : new RQ(r.shape, o, i), l = [[i]];
  return e.runWebGLProgram(a, [r], r.dtype, l);
}, LQ = {
  kernelName: Xl,
  backendName: "webgl",
  kernelFunc: l2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DQ = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, GQ = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Xc + `
  return result;
`, FQ = Qe({ opSnippet: DQ, packedOpSnippet: GQ }), OQ = {
  kernelName: Di,
  backendName: "webgl",
  kernelFunc: FQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = [], c = At(o, r.shape);
  let u = c;
  const h = we(u, a);
  let d = r;
  h != null && (d = cn({ inputs: { x: r }, backend: e, attrs: { perm: h } }), u = Ne(u.length, a), l.push(d)), Je("prod", u, a);
  let p;
  if (e.shouldExecuteOnCPU([d])) {
    const f = e.texData.get(d.dataId).values, { outVals: m, outShape: g, outDtype: y } = MU(d.shape, d.dtype, f, u);
    p = e.makeTensorInfo(g, y, m);
  } else {
    const [f, m] = ze(d.shape, u), g = H(m), y = pt({ inputs: { x: d }, backend: e, attrs: { shape: [-1, g] } }), b = sd(r.dtype), w = To(y, b, "prod", e);
    p = pt({ inputs: { x: w }, backend: e, attrs: { shape: f } }), l.push(y), l.push(w);
  }
  if (i) {
    l.push(p);
    const f = ke(p.shape, c);
    p = pt({ inputs: { x: p }, backend: e, attrs: { shape: f } });
  }
  return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const zQ = {
  kernelName: Kl,
  backendName: "webgl",
  kernelFunc: AQ
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t, { outputRaggedRank: a } = s, l = r.map((y) => e.readSync(y.dataId)), c = r.map((y) => y.shape), u = e.readSync(o.dataId), h = e.readSync(i.dataId), [d, p, f] = XU(l, c, u, o.shape, o.dtype, h, i.shape, a), m = d.map((y) => e.makeTensorInfo([y.length], "int32", y)), g = e.makeTensorInfo(f, o.dtype, p);
  return m.concat([g]);
}
const VQ = {
  kernelName: Oh,
  backendName: "webgl",
  kernelFunc: WQ
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.readSync(r.dataId), u = e.readSync(o.dataId), h = e.readSync(i.dataId), d = a.map((g) => e.readSync(g.dataId)), p = a.map((g) => g.shape), [f, m] = _U(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, o.dtype, m);
}
const MQ = {
  kernelName: Ah,
  backendName: "webgl",
  kernelFunc: PQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c2 = (n) => {
  const { backend: t, attrs: e } = n, { start: s, stop: r, step: o, dtype: i } = e, a = KU(s, r, o, i);
  return t.makeTensorInfo([a.length], i, a);
}, XQ = {
  kernelName: zh,
  backendName: "webgl",
  kernelFunc: c2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _Q = "return 1.0 / x;", KQ = Zt({ opSnippet: _Q }), ZQ = {
  kernelName: Gi,
  backendName: "webgl",
  kernelFunc: KQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BQ = us + `
  return (x < 0.0) ? 0.0 : x;
`, HQ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, UQ = Zt({ opSnippet: BQ, packedOpSnippet: HQ }), YQ = {
  kernelName: Fi,
  backendName: "webgl",
  kernelFunc: UQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jQ = us + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, JQ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, QQ = Zt({ opSnippet: jQ, packedOpSnippet: JQ }), qQ = {
  kernelName: Oi,
  backendName: "webgl",
  kernelFunc: QQ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class t7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class e7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = K().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new e7(r.shape, l, c, o, i) : new t7(r.shape, l, c, o, i);
  return e.runWebGLProgram(u, [r], "float32");
}
const s7 = {
  kernelName: Hl,
  backendName: "webgl",
  kernelFunc: n7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class r7 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, r, o] = e, [, i, a] = t, l = [
      s && i > 1 ? r - 1 : r,
      s && a > 1 ? o - 1 : o
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${o - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s, a = new r7(o.shape, r.shape, i);
  return e.runWebGLProgram(a, [o], o.dtype);
}
const i7 = {
  kernelName: Ph,
  backendName: "webgl",
  kernelFunc: o7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class a7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class l7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = K().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new l7(r.shape, l, c, o, i) : new a7(r.shape, l, c, o, i);
  return e.runWebGLProgram(u, [r], r.dtype);
}
const u7 = {
  kernelName: Bl,
  backendName: "webgl",
  kernelFunc: c7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class h7 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, r, o] = e, [, i, a] = t, l = [
      s && i > 1 ? r - 1 : r,
      s && a > 1 ? o - 1 : o
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s, a = new h7(o.shape, r.shape, i);
  return e.runWebGLProgram(a, [o], o.dtype);
}
const p7 = {
  kernelName: Vh,
  backendName: "webgl",
  kernelFunc: d7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class f7 {
  constructor(t, e) {
    this.variableNames = ["x"];
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = t, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
      return;
    }
    const r = (a) => e.indexOf(a) !== -1 && t[a] !== 1 ? `${t[a]} - coords[${a}] - 1` : `coords[${a}]`, o = t.map((a, l) => r(l)).join(","), i = re(s);
    this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${o}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class m7 {
  constructor(t, e) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = t;
    const r = an("rc", s), o = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`, i = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`, a = re(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(r.slice())};
          if(${o}){
            result.g = ${c(r.slice())};
          }
          if(${i}) {
            result.b = ${u(r.slice())};
            if(${o}) {
              result.a = ${h(r.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(f) {
      return d(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", d(f);
    }
    function u(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function h(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function d(f) {
      const m = t.map((b, w) => p(w, f)), g = m.join(","), y = m.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${y}))`;
    }
    function p(f, m) {
      return e.indexOf(f) !== -1 && t[f] !== 1 ? `${t[f]} - ${m[f]} - 1` : `${m[f]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dims: o } = s, i = r.shape.length, a = At(o, r.shape);
  if (i === 0)
    return On({ inputs: { x: r }, backend: e });
  const l = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new m7(r.shape, a) : new f7(r.shape, a);
  return e.runWebGLProgram(l, [r], r.dtype);
}
const y7 = {
  kernelName: Ul,
  backendName: "webgl",
  kernelFunc: g7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class b7 {
  constructor(t, e) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = t[1], r = t[2];
    this.outputShape = t;
    let o = "";
    typeof e == "number" ? o = `float outputValue = ${e.toFixed(2)};` : o = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${o}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x7 = {
  kernelName: nd,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: i } = t, a = e, l = new b7(s.shape, o), [c, u] = Kg(i, s.shape[1], s.shape[2]), h = [[c, u, Math.sin(r), Math.cos(r)]];
    return a.runWebGLProgram(l, [s], s.dtype, h);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w7 = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, I7 = Zt({ opSnippet: w7 }), S7 = {
  kernelName: Ai,
  backendName: "webgl",
  kernelFunc: I7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v7 = "return inversesqrt(x);", C7 = Zt({ opSnippet: v7, cpuKernelImpl: ZU }), k7 = {
  kernelName: zi,
  backendName: "webgl",
  kernelFunc: C7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class u2 {
  constructor(t, e, s, r, o, i, a = !0) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = i;
    const l = re(o.length), c = re(i.length);
    let u = "";
    s === 1 ? u = "i" : s === 2 && (u = "i, j");
    const h = `getIndices(${u})`;
    let d = "";
    r === 1 ? d = "i" : r === 2 && (d = "i, coords[1]");
    const p = `getUpdates(${d})`, f = e > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${o});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${p};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r, updates: o } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = Ji(o, r, i), d = [h / c, c];
  if (h === 0)
    return e.makeTensorInfo(i, r.dtype);
  const p = pt({ inputs: { x: r }, backend: e, attrs: { shape: [l, a] } }), f = pt({ inputs: { x: o }, backend: e, attrs: { shape: [l, c] } }), m = e.makeTensorInfo([], "float32", new Float32Array([0])), g = new u2(l, a, p.shape.length, f.shape.length, u, d), y = e.runWebGLProgram(g, [f, p, m], f.dtype), b = pt({ inputs: { x: y }, backend: e, attrs: { shape: i } });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(m), b;
}
const T7 = {
  kernelName: Mh,
  backendName: "webgl",
  kernelFunc: N7
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $7 {
  constructor(t, e, s, r) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [t, s];
    const o = "while (left < right) {", i = `for (int i = 0; i < ${Math.ceil(Math.log2(e + 1))}; ++i) { if (left >= right) break;`, a = K().getNumber("WEBGL_VERSION") === 2 ? o : i, l = r === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: r, values: o } = t, { side: i } = s, a = new $7(r.shape[0], r.shape[1], o.shape[1], i), l = [[r.shape[1]]];
  return e.runWebGLProgram(a, [r, o], "int32", l);
}
const E7 = {
  kernelName: Xh,
  backendName: "webgl",
  kernelFunc: R7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L7 {
  constructor(t, e, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = e;
    let r, o;
    if (s > 4)
      throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1)
      o = "resRC", r = "resRC";
    else {
      const a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], c = [];
      for (let u = 0; u < e.length; u++)
        c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
      r = l.join(), o = c.join();
    }
    const i = re(s);
    this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${o}));
        } else {
          setOutput(getB(${o}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D7(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: r, e: o } = t, i = new L7(s.shape.length, r.shape, r.shape.length);
  return e.runWebGLProgram(i, [s, r, o], ln(r.dtype, o.dtype));
}
const G7 = {
  kernelName: Yl,
  backendName: "webgl",
  kernelFunc: D7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F7 = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${Qd};
  float scale = ${qd};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, O7 = Zt({ opSnippet: F7 }), A7 = {
  kernelName: Wi,
  backendName: "webgl",
  kernelFunc: O7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z7 = Ia + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, W7 = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, V7 = Zt({
  opSnippet: z7,
  packedOpSnippet: W7,
  cpuKernelImpl: HU
}), P7 = {
  kernelName: Xi,
  backendName: "webgl",
  kernelFunc: V7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M7 = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, X7 = Zt({ opSnippet: M7 }), _7 = {
  kernelName: Mi,
  backendName: "webgl",
  kernelFunc: X7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K7 = Ia + `
  return sin(x);
`, Z7 = Zt({ opSnippet: K7 }), B7 = {
  kernelName: Vi,
  backendName: "webgl",
  kernelFunc: Z7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H7 = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, U7 = Zt({ opSnippet: H7 }), Y7 = {
  kernelName: Pi,
  backendName: "webgl",
  kernelFunc: U7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j7 = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, J7 = Zt({ opSnippet: j7 }), Q7 = {
  kernelName: _i,
  backendName: "webgl",
  kernelFunc: J7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q7 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, paddings: i } = s;
  k(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const a = o.reduce((y, b) => y * b), l = [[0, 0]];
  l.push(...i);
  for (let y = 1 + o.length; y < r.shape.length; ++y)
    l.push([0, 0]);
  const c = [], u = l2({
    inputs: { x: r },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), h = kc(u.shape, o, a, !1), d = Nc(h.length, o.length, !1), p = Tc(u.shape, o, a, !1), f = pt({ inputs: { x: u }, backend: e, attrs: { shape: h } }), m = cn({
    inputs: { x: f },
    backend: e,
    attrs: { perm: d }
  }), g = pt({ inputs: { x: m }, backend: e, attrs: { shape: p } });
  return c.push(u), c.push(f), c.push(m), c.forEach((y) => e.disposeIntermediateTensorInfo(y)), g;
}, t6 = {
  kernelName: Ql,
  backendName: "webgl",
  kernelFunc: q7
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e6(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: r, denseShape: o, defaultValue: i } = t;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.readSync(s.dataId), l = e.readSync(r.dataId), c = e.readSync(o.dataId), u = e.readSync(i.dataId)[0], [h, d, p, f, m] = YU(a, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], r.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const n6 = {
  kernelName: _h,
  backendName: "webgl",
  kernelFunc: e6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s6(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: r, newShape: o } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const i = Array.from(e.readSync(r.dataId)), a = e.readSync(s.dataId), l = Array.from(e.readSync(o.dataId)), [c, u, h] = jU(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const r6 = {
  kernelName: Kh,
  backendName: "webgl",
  kernelFunc: s6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o6(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${o.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(r.dataId), l = e.readSync(o.dataId), [c, u] = Gv(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const i6 = {
  kernelName: Zh,
  backendName: "webgl",
  kernelFunc: o6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a6(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${o.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(r.dataId), l = e.readSync(o.dataId), [c, u] = Gv(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const l6 = {
  kernelName: Bh,
  backendName: "webgl",
  kernelFunc: a6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = Ji(o, r, a), p = !1;
  if (o.dtype === "string") {
    const y = e.bufferSync(r), b = e.bufferSync(o), w = Us(e.readSync(i.dataId)[0]), x = BU(y, b, a, d, u, c, l, h, w, p);
    return e.makeTensorInfo(a, x.dtype, x.values);
  }
  const f = new u2(c, l, r.shape.length, o.shape.length, h, [d, 1], p), m = e.runWebGLProgram(f, [o, r, i], o.dtype), g = pt({ inputs: { x: m }, backend: e, attrs: { shape: a } });
  return e.disposeIntermediateTensorInfo(m), g;
}
const u6 = {
  kernelName: Hh,
  backendName: "webgl",
  kernelFunc: c6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { numOrSizeSplits: o, axis: i } = s, a = At(i, r.shape)[0], l = oy(r, o, a), c = r.shape.length, u = new Array(c).fill(0), h = r.shape.slice();
  return l.map((d) => {
    const p = [...h];
    p[a] = d;
    const f = Sa({ inputs: { x: r }, backend: e, attrs: { begin: u, size: p } });
    return u[a] += d, f;
  });
}
const d6 = {
  kernelName: ql,
  backendName: "webgl",
  kernelFunc: h6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kx = "return sqrt(x);", p6 = Zt({ opSnippet: Kx, packedOpSnippet: Kx, cpuKernelImpl: JU }), f6 = {
  kernelName: Ki,
  backendName: "webgl",
  kernelFunc: p6
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m6 = "return x * x;", g6 = Zt({ opSnippet: m6 }), y6 = {
  kernelName: Uh,
  backendName: "webgl",
  kernelFunc: g6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zx = "return (a - b) * (a - b);", b6 = Qe({ opSnippet: Zx, packedOpSnippet: Zx }), x6 = {
  kernelName: Zi,
  backendName: "webgl",
  kernelFunc: b6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w6({ inputs: n, attrs: t, backend: e }) {
  const { x: s } = n, r = us + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, o = new Zs(s.shape, r);
  return e.runWebGLProgram(o, [s], s.dtype);
}
const I6 = {
  kernelName: ji,
  backendName: "webgl",
  kernelFunc: w6
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class S6 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const r = s.length, o = re(s.length), i = re(s.length);
    let a = "";
    if (r === 1)
      a = "coords * strides + begin";
    else {
      let l = 0;
      a = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${o} begin = ${o}(${t});
      ${o} strides = ${o}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Fm(r.shape, o, i, a, l, c, u, h, d);
  let S;
  if (m)
    S = pt({ inputs: { x: r }, backend: e, attrs: { shape: f } });
  else if (g || y) {
    k(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const T = Gm(b, w, x), $ = Sa({ inputs: { x: r }, backend: e, attrs: { begin: b, size: T } });
    S = pt({ inputs: { x: $ }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo($);
  } else if (e.shouldExecuteOnCPU([r])) {
    const $ = e.readSync(r.dataId), R = $t(r.shape, r.dtype, $), E = QU(p, R, x, b);
    S = e.makeTensorInfo(f, r.dtype, E.values);
  } else {
    const $ = new S6(b, x, p);
    S = e.runWebGLProgram($, [r], r.dtype);
  }
  const v = pt({ inputs: { x: S }, backend: e, attrs: { shape: f } });
  return e.disposeIntermediateTensorInfo(S), v;
}
const C6 = {
  kernelName: Yh,
  backendName: "webgl",
  kernelFunc: v6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.readSync(u.dataId), p = e.readSync(h.dataId), [f, m] = qU(d, p, r, o, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", m)
  ];
}
const N6 = {
  kernelName: jh,
  backendName: "webgl",
  kernelFunc: k6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: i } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.readSync(o.dataId), l = e.readSync(i.dataId)[0], [c, u, h] = t9(a, l, r), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const $6 = {
  kernelName: Jh,
  backendName: "webgl",
  kernelFunc: T6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: r } = s, { input: o } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.readSync(o.dataId), a = e9(i, r);
  return e.makeTensorInfo(o.shape, "int32", a);
}
const E6 = {
  kernelName: Qh,
  backendName: "webgl",
  kernelFunc: R6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L6 = "return tan(x);", D6 = Zt({ opSnippet: L6 }), G6 = {
  kernelName: Hi,
  backendName: "webgl",
  kernelFunc: D6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F6 = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, O6 = Zt({ opSnippet: F6 }), A6 = {
  kernelName: Ui,
  backendName: "webgl",
  kernelFunc: O6
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class z6 {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[i] * e[i];
    this.outputShape = s, this.rank = s.length;
    const r = re(this.rank), o = W6(t);
    this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
  }
}
function W6(n) {
  const t = n.length;
  if (t > 5)
    throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1)
    return `imod(resRC, ${n[0]})`;
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let r = 0; r < n.length; r++)
    s.push(`imod(${e[r]}, ${n[r]})`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reps: o } = s;
  if (r.dtype === "string" || r.shape.length > 5) {
    const l = e.readSync(r.dataId), c = r.dtype === "string" ? l.map((d) => Us(d)) : l, u = $t(r.shape, r.dtype, c), h = s9(u, o);
    return e.makeTensorInfo(h.shape, h.dtype, h.values);
  }
  const i = new z6(r.shape, o);
  return e.runWebGLProgram(i, [r], r.dtype);
}
const V6 = {
  kernelName: Yi,
  backendName: "webgl",
  kernelFunc: h2
};
class P6 {
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = t, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class M6 {
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = t, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vr(n, t) {
  t !== null && n.disposeIntermediateTensorInfo(t);
}
function Bx(n) {
  let t = 1;
  for (; t < n; )
    t *= 2;
  return t;
}
function X6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { k: o, sorted: i } = s, a = K().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = K().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = r.shape, u = c[c.length - 1];
  if (e.shouldExecuteOnCPU([r]) || u < a || o > l) {
    const E = e.readSync(r.dataId), [V, X] = r9(E, c, r.dtype, o, i);
    return [
      e.makeTensorInfo(V.shape, V.dtype, V.values),
      e.makeTensorInfo(X.shape, X.dtype, X.values)
    ];
  }
  if (o === 0)
    return c[c.length - 1] = 0, [
      e.makeTensorInfo(c, r.dtype, []),
      e.makeTensorInfo(c, "int32", [])
    ];
  if (u === 1)
    return [
      r,
      Zc({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: e })
    ];
  const h = e.texData.get(r.dataId), d = h !== null && h.isPacked, p = d ? e.unpackTensor(r) : r, m = H(c) / u, g = pt({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: e });
  d && Vr(e, p);
  const y = Bx(o), b = Bx(u);
  let w = null;
  const x = () => w === null ? [g, g] : [g, w], S = (E, V, X) => {
    const _ = x(), B = new P6(X), Y = [[u], [w === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [E], [V]], tt = w;
    w = e.runWebGLProgram(B, _, "int32", Y), Vr(e, tt);
  };
  for (let E = 1; E < y; E *= 2) {
    const V = E * 2;
    for (let X = E; X >= 1; X /= 2)
      S(V, X, [m, b]);
  }
  for (let E = b; E > y; E /= 2) {
    const V = x(), X = new M6([m, E / 2]), B = [[u], [w === null ? 1 : 0], [y]], U = w;
    w = e.runWebGLProgram(X, V, "int32", B), Vr(e, U);
    const Y = y / 2, tt = Y * 2;
    for (let J = Y; J >= 1; J /= 2)
      S(tt, J, w.shape);
  }
  let v = w;
  w = Sa({ inputs: { x: w }, backend: e, attrs: { begin: 0, size: [m, o] } }), Vr(e, v);
  let T = n2({ inputs: { x: g, indices: w }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  Vr(e, g);
  const $ = c.slice(0, -1);
  $.push(o), v = w, w = pt({ inputs: { x: w }, attrs: { shape: $ }, backend: e }), Vr(e, v);
  const R = T;
  return T = pt({ inputs: { x: T }, attrs: { shape: $ }, backend: e }), Vr(e, R), [T, w];
}
const _6 = {
  kernelName: qh,
  backendName: "webgl",
  kernelFunc: X6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class K6 {
  constructor(t, e, s, r, o, i) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = i;
    const a = s === "nearest" ? 1 : 2;
    let l;
    switch (r) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${o});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${o});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, transforms: o } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s, [u, h, d, p] = r.shape, [f, m] = c != null ? c : [h, d], g = [
    u,
    f,
    m,
    p
  ], y = new K6(h, d, i, a, l, g);
  return e.runWebGLProgram(y, [r, o], "float32");
}
const B6 = {
  kernelName: td,
  backendName: "webgl",
  kernelFunc: Z6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H6(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: r } = e, { x: o } = t;
  Pc(o, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const i = s.readSync(o.dataId), { outputValues: a, outputShape: l, indices: c } = o9(i, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const U6 = {
  kernelName: ed,
  backendName: "webgl",
  kernelFunc: H6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: r } = t;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const i = r, a = i.shape.length, l = r.shape[o], c = new Array(a - 1);
  let u = 0;
  for (let m = 0; m < a; m++)
    m !== o && (c[u++] = i.shape[m]);
  const h = [], d = new Array(a).fill(0), p = i.shape.slice();
  p[o] = 1;
  const f = new Array(l);
  for (let m = 0; m < f.length; m++) {
    d[o] = m;
    const g = Sa({ inputs: { x: i }, backend: e, attrs: { begin: d, size: p } }), y = pt({ inputs: { x: g }, backend: e, attrs: { shape: c } });
    f[m] = y, h.push(g);
  }
  return h.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const j6 = {
  kernelName: ec,
  backendName: "webgl",
  kernelFunc: Y6
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J6 {
  constructor(t, e) {
    this.variableNames = ["x", "segmentIds"];
    const s = t.windowSize, r = t.batchSize, o = t.inSize, i = t.numSegments, a = i * Math.ceil(o / s);
    this.outputShape = [r, a];
    const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, h = s % 4, d = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    o % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `);
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, segmentIds: o } = t, { numSegments: i } = s, a = r.shape.length, l = [];
  let c = 0;
  const u = we([c], a);
  let h = r;
  u != null && (h = cn({ inputs: { x: r }, backend: e, attrs: { perm: u } }), l.push(h), c = Ne(1, a)[0]);
  const d = fI(h.shape, c, i), p = H([h.shape[c]]), f = pt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, p] } });
  l.push(f);
  const m = sd(r.dtype), g = (x, S, v, T, $) => {
    const R = x.shape[0], E = x.shape[1], V = pI(E, $), X = { windowSize: V, inSize: E, batchSize: R, numSegments: $ }, _ = new J6(X, S), B = e.compileAndRun(_, [x, v], T);
    if (l.push(B), B.shape[1] === $)
      return B;
    const U = c2({
      backend: e,
      attrs: { start: 0, stop: $, step: 1, dtype: "float32" }
    }), Y = h2({
      inputs: { x: U },
      backend: e,
      attrs: { reps: [E / V] }
    });
    return l.push(U), l.push(Y), g(B, S, Y, T, $);
  }, y = g(f, "unsortedSegmentSum", o, m, i), b = pt({ inputs: { x: y }, backend: e, attrs: { shape: d } });
  let w = b;
  if (u != null) {
    l.push(b);
    const x = Dr(u);
    w = cn({ inputs: { x: w }, backend: e, attrs: { perm: x } });
  }
  return l.forEach((x) => e.disposeIntermediateTensorInfo(x)), w;
}
const q6 = {
  kernelName: nc,
  backendName: "webgl",
  kernelFunc: Q6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t8 = [
  J9,
  q9,
  n4,
  o4,
  a4,
  u4,
  d4,
  f4,
  b4,
  w4,
  v4,
  N4,
  R4,
  G4,
  A4,
  W4,
  P4,
  K4,
  B4,
  U4,
  Q4,
  o5,
  a5,
  c5,
  m5,
  y5,
  I5,
  F9,
  C5,
  R5,
  G5,
  V5,
  M5,
  _5,
  Z5,
  H5,
  j5,
  q5,
  nY,
  rY,
  iY,
  lY,
  hY,
  pY,
  yY,
  xY,
  SY,
  kY,
  TY,
  LY,
  OY,
  VY,
  XY,
  ZY,
  BY,
  UY,
  jY,
  QY,
  tj,
  nj,
  ij,
  cj,
  dj,
  fj,
  yj,
  wj,
  Cj,
  $j,
  G9,
  Ej,
  T5,
  Gj,
  Aj,
  Vj,
  A9,
  _j,
  Hj,
  Yj,
  qj,
  nJ,
  iJ,
  cJ,
  pJ,
  yJ,
  wJ,
  SJ,
  NJ,
  $J,
  EJ,
  FJ,
  AJ,
  WJ,
  PJ,
  XJ,
  BJ,
  jJ,
  tQ,
  lQ,
  V9,
  dQ,
  mQ,
  bQ,
  IQ,
  h5,
  CQ,
  NQ,
  $Q,
  LQ,
  OQ,
  W9,
  zQ,
  VQ,
  MQ,
  XQ,
  d5,
  rQ,
  ZQ,
  YQ,
  qQ,
  M9,
  s7,
  i7,
  u7,
  p7,
  y7,
  x7,
  S7,
  k7,
  T7,
  E7,
  G7,
  A7,
  P7,
  _7,
  B7,
  Y7,
  s5,
  iQ,
  Q7,
  t6,
  n6,
  r6,
  i6,
  l6,
  u6,
  d6,
  f6,
  y6,
  x6,
  I6,
  C6,
  N6,
  $6,
  E6,
  oQ,
  U9,
  G6,
  A6,
  V6,
  _6,
  B6,
  Y9,
  U6,
  j6,
  q6,
  kQ
];
for (const n of t8)
  wn(n);
/** @license See the LICENSE file. */
const e8 = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n8 = {
  "tfjs-core": q1,
  "tfjs-backend-cpu": pP,
  "tfjs-backend-webgl": D9,
  "tfjs-data": HS,
  "tfjs-layers": dp,
  "tfjs-converter": LS,
  tfjs: e8
}, Rq = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  data: SW,
  version: n8,
  AdadeltaOptimizer: Zd,
  AdagradOptimizer: Bd,
  AdamOptimizer: Hd,
  AdamaxOptimizer: Ud,
  MomentumOptimizer: Yd,
  Optimizer: lr,
  OptimizerConstructors: ur,
  RMSPropOptimizer: jd,
  SGDOptimizer: vc,
  Tensor: Kt,
  TensorBuffer: ve,
  Variable: _a,
  get Rank() {
    return pf;
  },
  sumOutType: sd,
  upcastType: ln,
  get Reduction() {
    return rn;
  },
  customGrad: As,
  grad: VT,
  grads: PT,
  valueAndGrad: MT,
  valueAndGrads: XT,
  variableGrads: uw,
  Environment: l1,
  env: K,
  get ENV() {
    return um;
  },
  nextFrame: Cc,
  KernelBackend: Qu,
  DataStorage: rm,
  abs: $e,
  acos: zm,
  acosh: Wm,
  add: nt,
  addN: tw,
  all: hd,
  any: Ba,
  argMax: ro,
  argMin: Vm,
  asin: Pm,
  asinh: Mm,
  atan: Xm,
  atan2: _m,
  atanh: Km,
  avgPool: lc,
  avgPool3d: Bm,
  basicLSTMCell: ew,
  batchToSpaceND: cc,
  batchNorm: Qi,
  batchNorm2d: Hm,
  batchNorm3d: Um,
  batchNorm4d: Ym,
  bincount: jm,
  broadcastArgs: nw,
  broadcastTo: gr,
  buffer: $t,
  cast: ut,
  ceil: Jm,
  clipByValue: gn,
  clone: Ds,
  complex: js,
  concat: Ce,
  concat1d: Qm,
  concat2d: qm,
  concat3d: tg,
  concat4d: eg,
  conv1d: dd,
  conv2d: Qs,
  conv2dTranspose: pd,
  conv3d: sg,
  conv3dTranspose: rg,
  cos: uc,
  cosh: fd,
  cumprod: Ha,
  cumsum: md,
  denseBincount: rw,
  depthToSpace: og,
  depthwiseConv2d: qi,
  diag: ow,
  dilation2d: ig,
  div: St,
  divNoNan: ag,
  dot: lg,
  einsum: iw,
  elu: ta,
  equal: Ln,
  erf: cg,
  euclideanNorm: hg,
  exp: Dn,
  expandDims: pn,
  expm1: dg,
  eye: gd,
  fill: bo,
  floor: na,
  floorDiv: ud,
  gather: sa,
  greater: In,
  greaterEqual: Gr,
  imag: ic,
  isFinite: pg,
  isInf: fg,
  isNaN: mg,
  leakyRelu: hc,
  less: yd,
  lessEqual: Fr,
  linspace: cw,
  localResponseNormalization: gg,
  log: Gn,
  log1p: dc,
  logSigmoid: yg,
  logSoftmax: xd,
  logSumExp: wd,
  logicalAnd: is,
  logicalNot: pc,
  logicalOr: Id,
  logicalXor: bg,
  lowerBound: hw,
  matMul: zt,
  max: os,
  maxPool: fc,
  maxPool3d: xg,
  maxPoolWithArgmax: dw,
  maximum: Ps,
  mean: ye,
  meshgrid: pw,
  min: Ua,
  minimum: ra,
  mirrorPad: wg,
  mod: Ig,
  moments: mc,
  mul: A,
  multiRNNCell: fw,
  multinomial: mw,
  neg: ce,
  notEqual: io,
  oneHot: Mo,
  ones: $n,
  onesLike: Fn,
  outerProduct: gw,
  pad: ir,
  pad1d: yw,
  pad2d: bw,
  pad3d: xw,
  pad4d: ww,
  pool: Sg,
  pow: qs,
  prelu: yc,
  print: vm,
  prod: vg,
  raggedGather: Iw,
  raggedTensorToTensor: Sw,
  rand: vw,
  randomGamma: Lw,
  randomNormal: vd,
  randomStandardNormal: Dw,
  randomUniform: ia,
  range: _o,
  real: Xo,
  reciprocal: kg,
  relu: vs,
  relu6: Cd,
  reshape: W,
  reverse: Zn,
  reverse1d: Gw,
  reverse2d: Fw,
  reverse3d: Ow,
  reverse4d: Aw,
  round: kd,
  rsqrt: Nd,
  scalar: Nt,
  selu: Td,
  separableConv2d: $d,
  setdiff1dAsync: zw,
  sigmoid: gs,
  sign: Ng,
  sin: Rd,
  sinh: Ed,
  slice: Mt,
  slice1d: bc,
  slice2d: Ld,
  slice3d: xc,
  slice4d: Ko,
  softmax: wc,
  softplus: xo,
  spaceToBatchND: gc,
  fft: Ic,
  ifft: Zo,
  irfft: Dd,
  rfft: Sc,
  split: mn,
  sqrt: Ue,
  square: qt,
  squaredDifference: Gd,
  squeeze: Or,
  stack: yn,
  step: Io,
  stridedSlice: Tg,
  sub: mt,
  sum: yt,
  tan: $g,
  tanh: oo,
  tensor: ge,
  tensor1d: qe,
  tensor2d: yr,
  tensor3d: $m,
  tensor4d: Ww,
  tensor5d: Vw,
  tensor6d: Pw,
  tile: Mn,
  topk: Rg,
  truncatedNormal: Fd,
  unique: Eg,
  unsortedSegmentSum: Od,
  unstack: as,
  upperBound: Mw,
  variable: Lg,
  where: tn,
  whereAsync: Dg,
  zeros: Re,
  zerosLike: Xt,
  op: G,
  OP_SCOPE_SUFFIX: ym,
  booleanMaskAsync: Xw,
  transpose: Wt,
  norm: ea,
  movingAverage: _w,
  scatterND: Kw,
  searchSorted: Sd,
  sparseToDense: Zw,
  gatherND: Bw,
  dropout: Gg,
  enclosingPowerOfTwo: Fg,
  cosineWindow: zd,
  inTopKAsync: Hw,
  image: Hr,
  linalg: zg,
  losses: rI,
  spectral: nI,
  fused: Jw,
  signal: sI,
  sparse: oI,
  string: iI,
  train: Mr,
  enableProdMode: ak,
  enableDebugMode: lk,
  disableDeprecationWarnings: ck,
  deprecationWarn: uk,
  disposeVariables: hk,
  engine: oe,
  memory: Za,
  profile: dk,
  tidy: M,
  dispose: Dt,
  keep: Se,
  time: pk,
  setBackend: fk,
  ready: mk,
  getBackend: gk,
  removeBackend: yk,
  findBackend: bk,
  findBackendFactory: xk,
  registerBackend: Tm,
  backend: Ks,
  setPlatform: wk,
  getKernel: Cu,
  getGradient: cf,
  getKernelsForBackend: ku,
  registerKernel: wn,
  registerGradient: d1,
  unregisterKernel: P2,
  unregisterGradient: M2,
  copyRegisteredKernels: X2,
  Abs: sl,
  Acos: ni,
  Acosh: si,
  Add: mo,
  AddN: rl,
  All: eh,
  Any: nh,
  ArgMax: ol,
  ArgMin: il,
  Asin: ri,
  Asinh: oi,
  Atan: ii,
  Atanh: ai,
  Atan2: li,
  AvgPool: al,
  AvgPoolGrad: sh,
  AvgPool3D: ll,
  AvgPool3DGrad: rh,
  BatchMatMul: cl,
  BatchToSpaceND: ul,
  Bincount: oh,
  BroadcastTo: u1,
  BroadcastArgs: ih,
  Cast: ci,
  Ceil: ui,
  ClipByValue: hi,
  Complex: ah,
  ComplexAbs: hl,
  Concat: dl,
  Conv2D: pl,
  Conv2DBackpropFilter: lh,
  Conv2DBackpropInput: fl,
  Conv3D: ml,
  Conv3DBackpropFilterV2: ch,
  Conv3DBackpropInputV2: uh,
  Cos: di,
  Cosh: pi,
  Cumprod: hh,
  Cumsum: gl,
  CropAndResize: dh,
  DenseBincount: ph,
  DepthToSpace: fh,
  DepthwiseConv2dNative: yl,
  DepthwiseConv2dNativeBackpropFilter: mh,
  DepthwiseConv2dNativeBackpropInput: gh,
  Diag: yh,
  Dilation2D: bl,
  Dilation2DBackpropInput: Iu,
  Dilation2DBackpropFilter: Su,
  RealDiv: fi,
  Einsum: bh,
  Elu: mi,
  EluGrad: xh,
  Erf: gi,
  Equal: xl,
  Exp: yi,
  ExpandDims: wl,
  Expm1: bi,
  FFT: wh,
  Fill: Ih,
  FlipLeftRight: Sh,
  Floor: xi,
  FloorDiv: wi,
  FusedBatchNorm: Il,
  GatherV2: Sl,
  GatherNd: vh,
  Greater: vl,
  GreaterEqual: Ii,
  Identity: Si,
  IFFT: Ch,
  Imag: kh,
  IsFinite: vi,
  IsInf: Ci,
  IsNan: ki,
  LeakyRelu: Cl,
  Less: kl,
  LessEqual: Nl,
  LinSpace: Nh,
  Log: Ni,
  Log1p: Ti,
  LogicalAnd: Tl,
  LogicalNot: $l,
  LogicalOr: Rl,
  LogicalXor: O2,
  LogSoftmax: h1,
  LowerBound: A2,
  LRN: El,
  LRNGrad: Th,
  Max: Ll,
  Maximum: $i,
  MaxPool: Dl,
  MaxPoolGrad: $h,
  MaxPool3D: Gl,
  MaxPool3DGrad: Rh,
  MaxPoolWithArgmax: Eh,
  Mean: Fl,
  Min: Ol,
  Minimum: Ri,
  MirrorPad: Al,
  Mod: Ei,
  Multinomial: Lh,
  Multiply: Li,
  Neg: zl,
  NotEqual: Wl,
  NonMaxSuppressionV3: Dh,
  NonMaxSuppressionV4: Gh,
  NonMaxSuppressionV5: Fh,
  OnesLike: Vl,
  OneHot: Pl,
  Pack: Ml,
  PadV2: Xl,
  Pool: z2,
  Pow: Di,
  Prelu: _l,
  Prod: Kl,
  RaggedGather: Oh,
  RaggedTensorToTensor: Ah,
  Range: zh,
  Real: Wh,
  Reciprocal: Gi,
  Relu: Fi,
  Reshape: Zl,
  ResizeNearestNeighbor: Bl,
  ResizeNearestNeighborGrad: Vh,
  ResizeBilinear: Hl,
  ResizeBilinearGrad: Ph,
  Relu6: Oi,
  Reverse: Ul,
  Round: Ai,
  Rsqrt: zi,
  ScatterNd: Mh,
  SearchSorted: Xh,
  Select: Yl,
  Selu: Wi,
  Slice: jl,
  Sin: Vi,
  Sinh: Pi,
  Sign: Mi,
  Sigmoid: Xi,
  Softplus: _i,
  Sqrt: Ki,
  Sum: Jl,
  SpaceToBatchND: Ql,
  SplitV: ql,
  Softmax: tc,
  SparseFillEmptyRows: _h,
  SparseReshape: Kh,
  SparseSegmentMean: Zh,
  SparseSegmentSum: Bh,
  SparseToDense: Hh,
  SquaredDifference: Zi,
  Square: Uh,
  StridedSlice: Yh,
  StringNGrams: jh,
  StringSplit: Jh,
  StringToHashBucketFast: Qh,
  Sub: Bi,
  Tan: Hi,
  Tanh: Ui,
  Tile: Yi,
  TopK: qh,
  Transform: td,
  Transpose: jr,
  Unique: ed,
  Unpack: ec,
  UnsortedSegmentSum: nc,
  UpperBound: W2,
  ZerosLike: sc,
  Step: ji,
  FromPixels: vu,
  RotateWithOffset: nd,
  _FusedMatMul: Va,
  FusedConv2D: Pa,
  FusedDepthwiseConv2D: Ma,
  version_core: q1,
  browser: Ok,
  io: Nm,
  math: Tk,
  serialization: Xk,
  test_util: Qk,
  util: j2,
  backend_util: mI,
  broadcast_util: $k,
  tensor_util: lC,
  slice_util: j1,
  gather_util: Ak,
  scatter_util: zk,
  device_util: pC,
  kernel_impls: gL,
  CallbackList: DI,
  CustomCallback: FI,
  History: GI,
  Callback: kS,
  callbacks: dA,
  EarlyStopping: NS,
  InputSpec: Ee,
  SymbolicTensor: ms,
  LayersModel: Bs,
  input: UI,
  loadLayersModel: yF,
  model: mF,
  registerCallbackConstructor: bF,
  sequential: gF,
  RNN: ks,
  Sequential: lo,
  LayerVariable: $I,
  version_layers: dp,
  constraints: iG,
  initializers: SG,
  layers: _O,
  metrics: oA,
  models: iA,
  regularizers: uA,
  GraphModel: Bb,
  loadGraphModel: zz,
  loadGraphModelSync: Wz,
  deregisterOp: mA,
  registerOp: fA,
  version_converter: LS
}, Symbol.toStringTag, { value: "Module" })), d2 = "", Hx = typeof window < "u" && window.Blob && new Blob([atob(d2)], { type: "text/javascript;charset=utf-8" });
function s8() {
  const n = Hx && (window.URL || window.webkitURL).createObjectURL(Hx);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + d2);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
const r8 = (n, t) => [
  [
    n[0][0] * t[0][0] + n[0][2] * t[2][0],
    n[0][0] * t[0][1] + n[0][2] * t[2][1],
    n[0][0] * t[0][2] + n[0][2] * t[2][2],
    n[0][0] * t[0][3] + n[0][2] * t[2][3]
  ],
  [
    n[1][1] * t[1][0] + n[1][2] * t[2][0],
    n[1][1] * t[1][1] + n[1][2] * t[2][1],
    n[1][1] * t[1][2] + n[1][2] * t[2][2],
    n[1][1] * t[1][3] + n[1][2] * t[2][3]
  ],
  [
    t[2][0],
    t[2][1],
    t[2][2],
    t[2][3]
  ]
], o8 = (n, t, e, s) => {
  const r = n[0][0] * t + n[0][1] * e + n[0][3], o = n[1][0] * t + n[1][1] * e + n[1][3], i = n[2][0] * t + n[2][1] * e + n[2][3];
  return { x: r, y: o, z: i };
}, i8 = (n, t, e, s) => {
  const { x: r, y: o, z: i } = o8(n, t, e);
  return { x: r / i, y: o / i };
}, a8 = 6, l8 = 1, c8 = 10, u8 = 1, h8 = 0.8, d8 = 1, Ns = 1e3;
class p8 {
  constructor(t, e, s, r, o, i = !1) {
    this.markerDimensions = t, this.trackingDataList = e, this.projectionTransform = s, this.debugMode = i, this.trackingKeyframeList = [];
    for (let l = 0; l < e.length; l++)
      this.trackingKeyframeList.push(e[l][d8]);
    let a = 0;
    for (let l = 0; l < this.trackingKeyframeList.length; l++)
      a = Math.max(a, this.trackingKeyframeList[l].points.length);
    this.featurePointsListT = [], this.imagePixelsListT = [], this.imagePropertiesListT = [];
    for (let l = 0; l < this.trackingKeyframeList.length; l++) {
      const { featurePoints: c, imagePixels: u, imageProperties: h } = this._prebuild(this.trackingKeyframeList[l], a);
      this.featurePointsListT[l] = c, this.imagePixelsListT[l] = u, this.imagePropertiesListT[l] = h;
    }
    this.kernelCaches = {};
  }
  dummyRun(t) {
    let e = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]];
    for (let s = 0; s < this.featurePointsListT.length; s++)
      this.track(t, e, s);
  }
  track(t, e, s) {
    let r = {};
    const o = r8(this.projectionTransform, e), i = this._buildAdjustedModelViewTransform(o);
    this.markerDimensions[s][0], this.markerDimensions[s][1], this.trackingKeyframeList[s].width, this.trackingKeyframeList[s].height;
    const a = this.featurePointsListT[s], l = this.imagePixelsListT[s], c = this.imagePropertiesListT[s], u = this._computeProjection(i, t, s), { matchingPointsT: h, simT: d } = this._computeMatching(a, l, c, u), p = h.arraySync(), f = d.arraySync(), m = this.trackingKeyframeList[s], g = [], y = [], b = [];
    for (let w = 0; w < p.length; w++)
      if (f[w] > h8 && w < m.points.length) {
        b.push(w);
        const x = i8(o, p[w][0], p[w][1]);
        y.push(x), g.push({ x: m.points[w].x / m.scale, y: m.points[w].y / m.scale, z: 0 });
      }
    return this.debugMode && (r = {
      projectedImage: u.arraySync(),
      matchingPoints: h.arraySync(),
      goodTrack: b,
      trackedPoints: y
    }), i.dispose(), u.dispose(), h.dispose(), d.dispose(), { worldCoords: g, screenCoords: y, debugExtra: r };
  }
  _computeMatching(t, e, s, r) {
    const o = a8, i = o * 2 + 1, l = c8 * l8, c = u8, u = l * 2 + 1, h = r.shape[0], d = r.shape[1], p = t.shape[0];
    if (!this.kernelCaches.computeMatching) {
      const f = {
        variableNames: ["features", "markerPixels", "markerProperties", "targetPixels"],
        outputShape: [p, u * u],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	    int searchOffsetY = searchOffsetIndex / ${u} * ${c};

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - ${l};
	    int sy = sCenterY + searchOffsetY - ${l};

	    if (sx < ${o} || sx >= (${d} - ${o}) || sy < ${o} || sy >= (${h} - ${o})) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < ${i}; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < ${i}; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - ${o};
		  int fy2 = sCenterY + templateOffsetY - ${o};

		  int sx2 = sx + templateOffsetX - ${o};
		  int sy2 = sy + templateOffsetY - ${o};

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(${i} * ${i});
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`
      }, m = {
        variableNames: ["featurePoints", "markerProperties", "maxIndex"],
        outputShape: [p, 2],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / ${u * u};
	    int searchOffsetIndex = imod(maxIndex, ${u * u});

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - ${l}) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / ${u} * ${c};
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - ${l}) / markerScale);
	    }
	  }
	`
      }, g = {
        variableNames: ["sims", "maxIndex"],
        outputShape: [p],
        userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`
      };
      this.kernelCaches.computeMatching = [f, m, g];
    }
    return M(() => {
      const f = this.kernelCaches.computeMatching, m = this._compileAndRun(f[0], [t, e, s, r]), g = m.argMax(1), y = this._compileAndRun(f[1], [t, s, g]), b = this._compileAndRun(f[2], [m, g]);
      return { matchingPointsT: y, simT: b };
    });
  }
  _computeProjection(t, e, s) {
    const r = this.trackingKeyframeList[s].width, o = this.trackingKeyframeList[s].height, i = this.trackingKeyframeList[s].scale, a = r + "-" + o + "-" + i;
    if (this.kernelCaches.computeProjection || (this.kernelCaches.computeProjection = {}), !this.kernelCaches.computeProjection[a]) {
      const l = {
        variableNames: ["M", "pixel"],
        outputShape: [o, r],
        userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * ${Ns}.;
	      float m01 = getM(0, 1) * ${Ns}.;
	      float m03 = getM(0, 3) * ${Ns}.;
	      float m10 = getM(1, 0) * ${Ns}.;
	      float m11 = getM(1, 1) * ${Ns}.;
	      float m13 = getM(1, 3) * ${Ns}.;
	      float m20 = getM(2, 0) * ${Ns}.;
	      float m21 = getM(2, 1) * ${Ns}.;
	      float m23 = getM(2, 3) * ${Ns}.;

	      float y = float(coords[0]) / float(${i});
	      float x = float(coords[1]) / float(${i});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`
      };
      this.kernelCaches.computeProjection[a] = l;
    }
    return M(() => {
      const l = this.kernelCaches.computeProjection[a];
      return this._compileAndRun(l, [t, e]);
    });
  }
  _buildAdjustedModelViewTransform(t) {
    return M(() => {
      let e = [];
      for (let r = 0; r < t.length; r++) {
        e.push([]);
        for (let o = 0; o < t[r].length; o++)
          e[r].push(t[r][o] / Ns);
      }
      return ge(e, [3, 4]);
    });
  }
  _prebuild(t, e) {
    return M(() => {
      const s = t.scale, r = [];
      for (let l = 0; l < e; l++)
        l < t.points.length ? r.push([t.points[l].x / s, t.points[l].y / s]) : r.push([-1, -1]);
      const o = ge(t.data, [t.width * t.height]), i = ge([t.width, t.height, t.scale], [3]);
      return {
        featurePoints: ge(r, [r.length, 2], "float32"),
        imagePixels: o,
        imageProperties: i
      };
    });
  }
  _compileAndRun(t, e) {
    const s = Ks().compileAndRun(t, e);
    return oe().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
}
const cu = [
  {
    sigma: 0.55,
    points: [
      [-1, 0],
      [-0.5, -0.866025],
      [0.5, -0.866025],
      [1, -0],
      [0.5, 0.866025],
      [-0.5, 0.866025]
    ]
  },
  {
    sigma: 0.475,
    points: [
      [0, 0.930969],
      [-0.806243, 0.465485],
      [-0.806243, -0.465485],
      [-0, -0.930969],
      [0.806243, -0.465485],
      [0.806243, 0.465485]
    ]
  },
  {
    sigma: 0.4,
    points: [
      [0.847306, -0],
      [0.423653, 0.733789],
      [-0.423653, 0.733789],
      [-0.847306, 0],
      [-0.423653, -0.733789],
      [0.423653, -0.733789]
    ]
  },
  {
    sigma: 0.325,
    points: [
      [-0, -0.741094],
      [0.641806, -0.370547],
      [0.641806, 0.370547],
      [0, 0.741094],
      [-0.641806, 0.370547],
      [-0.641806, -0.370547]
    ]
  },
  {
    sigma: 0.25,
    points: [
      [-0.595502, 0],
      [-0.297751, -0.51572],
      [0.297751, -0.51572],
      [0.595502, -0],
      [0.297751, 0.51572],
      [-0.297751, 0.51572]
    ]
  },
  {
    sigma: 0.175,
    points: [
      [0, 0.362783],
      [-0.314179, 0.181391],
      [-0.314179, -0.181391],
      [-0, -0.362783],
      [0.314179, -0.181391],
      [0.314179, 0.181391]
    ]
  },
  {
    sigma: 0.1,
    points: [
      [0, 0]
    ]
  }
], po = [];
for (let n = 0; n < cu.length; n++) {
  const t = cu[n].sigma;
  for (let e = 0; e < cu[n].points.length; e++) {
    const s = cu[n].points[e];
    po.push([t, s[0], s[1]]);
  }
}
const Hp = {};
function f8(n) {
  const t = n.shape[1], e = "w" + t;
  if (!Hp.hasOwnProperty(e)) {
    const s = n.shape[0], r = {
      variableNames: ["p"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      `
    }, o = {
      variableNames: ["p"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      `
    };
    Hp[e] = [r, o];
  }
  return Hp[e];
}
const m8 = (n) => {
  const t = n.inputs.image, e = n.backend, [s, r] = f8(t), o = e.runWebGLProgram(s, [t], t.dtype), i = e.runWebGLProgram(r, [o], t.dtype);
  return e.disposeIntermediateTensorInfo(o), i;
}, g8 = {
  kernelName: "BinomialFilter",
  backendName: "webgl",
  kernelFunc: m8
}, uu = 7, Ux = 3, y8 = Ux * Ux, Up = 4, b8 = (Up + 1) * (Up + 1) / Up, Yp = {};
function x8(n) {
  const t = n.shape[1], e = "w" + t;
  if (!Yp.hasOwnProperty(e)) {
    const s = n.shape[0], r = {
      variableNames: ["image0", "image1", "image2"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();
    
          int y = coords[0];
          int x = coords[1];
    
          float value = getImage1(y, x);
    
          // Step 1: find local maxima/minima
          if (value * value < ${y8}.) {
            setOutput(0.);
            return;
          }
          if (y < ${uu} || y > ${s - 1 - uu}) {
            setOutput(0.);
            return;
          }
          if (x < ${uu} || x > ${t - 1 - uu}) {
            setOutput(0.);
            return;
          }
    
          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);
    
        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }
    
          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }
    
          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));
    
          float det = (dxx * dyy) - (dxy * dxy);
    
          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }
    
          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;
    
          if (abs(edgeScore) >= ${b8} ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      `
    };
    Yp[e] = r;
  }
  return Yp[e];
}
const w8 = (n) => {
  let { image0: t, image1: e, image2: s } = n.inputs;
  const r = n.backend, o = x8(e);
  return t = oe().runKernel("DownsampleBilinear", { image: t }), s = oe().runKernel("UpsampleBilinear", { image: s, targetImage: e }), r.runWebGLProgram(o, [t, e, s], e.dtype);
}, I8 = {
  kernelName: "BuildExtremas",
  backendName: "webgl",
  kernelFunc: w8
}, Ta = 36, jp = {};
function S8(n) {
  const t = n.shape[0];
  if (!jp.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0]],
      userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < ${Ta}; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + ${Ta}, ${Ta});
                int next = imod(maxIndex + 1, ${Ta});

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev); 
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex); 
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next); 

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / ${Ta}. - ${Math.PI};
                setOutput(an);
            }
            `
    };
    jp[t] = e;
  }
  return jp[t];
}
const v8 = (n) => {
  const { histograms: t } = n.inputs, e = n.backend, s = S8(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, C8 = {
  kernelName: "ComputeExtremaAngles",
  backendName: "webgl",
  kernelFunc: v8
}, Yx = 7, Jp = {};
function k8(n, t) {
  const e = `${n}|${t.shape[0]}`;
  if (!Jp.hasOwnProperty(e)) {
    const s = [];
    for (let i = 1; i < n; i++)
      s.push("image" + i);
    let r = "float getPixel(int octave, int y, int x) {";
    for (let i = 1; i < n; i++)
      r += `
  if (octave == ${i}) {
	return getImage${i}(y, x);
  }
`;
    r += "}";
    const o = {
      variableNames: [...s, "extrema", "angles", "freakPoints"],
      outputShape: [t.shape[0], po.length],
      userCode: `
  ${r}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = ${Yx}. * cos(inputAngle);
	float sin = ${Yx}. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
`
    };
    Jp[e] = o;
  }
  return Jp[e];
}
const N8 = (n) => {
  const { gaussianImagesT: t, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: r, pyramidImagesLength: o } = n.inputs, i = n.backend, a = k8(o, e);
  return i.runWebGLProgram(a, [...t, e, s, r], "float32");
}, T8 = {
  kernelName: "ComputeExtremaFreak",
  backendName: "webgl",
  kernelFunc: N8
}, p2 = (po.length - 1) * po.length / 2, $8 = Math.ceil(p2 / 8), Qp = {};
function R8(n) {
  const t = `${n.shape[0]}`;
  if (!Qp.hasOwnProperty(t)) {
    const e = {
      variableNames: ["freak", "p"],
      outputShape: [n.shape[0], $8],
      userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${p2}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
`
    };
    Qp[t] = e;
  }
  return Qp[t];
}
const E8 = (n) => {
  const { extremaFreaks: t, positionT: e } = n.inputs, { backend: s } = n, r = R8(t);
  return s.runWebGLProgram(r, [t, e], "int32");
}, L8 = {
  kernelName: "ComputeFreakDescriptors",
  backendName: "webgl",
  kernelFunc: E8
}, qp = {};
function D8(n, t) {
  const e = `${n}|${t}`;
  if (!qp.hasOwnProperty(e)) {
    const s = [];
    let r = "float getPixel(int octave, int y, int x) {";
    for (let o = 1; o < n; o++)
      s.push("image" + o), r += `
				if (octave == ${o}) {
					return getImage${o}(y, x);
				}
			`;
    r += "}", qp[e] = {
      variableNames: [...s, "extrema"],
      outputShape: [t, 3, 3],
      userCode: `
			${r}
		
			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}
		
				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			`
    };
  }
  return qp[e];
}
const G8 = (n) => {
  const { prunedExtremasList: t, dogPyramidImagesT: e } = n.inputs, s = n.backend, r = D8(e.length, t.length), o = ge(t, [t.length, t[0].length], "int32");
  return s.runWebGLProgram(r, [...e.slice(1), o], e[0].dtype);
}, F8 = {
  kernelName: "ComputeLocalization",
  backendName: "webgl",
  kernelFunc: G8
}, O8 = 0.159154943091895, Lo = 36, tf = {};
function A8(n, t, e) {
  const s = `${e}|${n.shape[0]}|${t.shape[0]}`;
  if (!tf.hasOwnProperty(s)) {
    const r = [];
    for (let l = 1; l < e; l++)
      r.push("image" + l);
    let o = "float getPixel(int octave, int y, int x) {";
    for (let l = 1; l < e; l++)
      o += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
    o += "}";
    const i = {
      variableNames: [...r, "extrema", "radial"],
      outputShape: [n.shape[0], t.shape[0], 2],
      userCode: `
                ${o}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
                    
                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * ${Lo}. * ${O8};
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                `
    }, a = {
      variableNames: ["fbinMag"],
      outputShape: [n.shape[0], Lo],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${t.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + ${Lo}, ${Lo});
                    int b2 = imod(bin + 1 + ${Lo}, ${Lo});

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            `
    };
    tf[s] = [i, a];
  }
  return tf[s];
}
const z8 = (n) => {
  const { gaussianImagesT: t, prunedExtremasT: e, radialPropertiesT: s, pyramidImagesLength: r } = n.inputs, o = n.backend, [i, a] = A8(e, s, r), l = o.runWebGLProgram(i, [...t, e, s], s.dtype), c = o.runWebGLProgram(a, [l], s.dtype);
  return o.disposeIntermediateTensorInfo(l), c;
}, W8 = {
  kernelName: "ComputeOrientationHistograms",
  backendName: "webgl",
  kernelFunc: z8
}, ef = {};
function V8(n) {
  const t = n.shape[0], e = n.shape[1], s = "w" + e;
  if (!ef.hasOwnProperty(s)) {
    const r = {
      variableNames: ["p"],
      outputShape: [Math.floor(t / 2), Math.floor(e / 2)],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;
        
                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25; 
                sum += getP(y, x+1) * 0.25; 
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            `
    };
    ef[s] = r;
  }
  return ef[s];
}
const P8 = (n) => {
  const t = n.inputs.image, e = n.backend, s = V8(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, M8 = {
  kernelName: "DownsampleBilinear",
  backendName: "webgl",
  kernelFunc: P8
}, X8 = (n) => {
  const { extremasResultT: t } = n.inputs, e = n.backend, s = t.shape[0], r = t.shape[1], o = {
    variableNames: ["extrema"],
    outputShape: [Math.floor(s / 2), Math.floor(r / 2)],
    userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;
  
			float location = 0.0;
			float values = getExtrema(y, x);
  
			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}
  
			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		`
  };
  return e.runWebGLProgram(o, [t], t.dtype);
}, _8 = {
  kernelName: "ExtremaReduction",
  backendName: "webgl",
  kernelFunc: X8
}, hu = 36, K8 = 5, nf = {};
function Z8(n) {
  const t = `h${n.shape[0]}`;
  if (!nf.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0], hu],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + ${hu}, ${hu});
                int nextBin = imod(binIndex + 1, ${hu});
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            `
    };
    nf[t] = e;
  }
  return nf[t];
}
const B8 = (n) => {
  let { histograms: t } = n.inputs;
  const e = n.backend, s = Z8(t);
  for (let r = 0; r < K8; r++) {
    const o = t;
    t = e.runWebGLProgram(s, [t], t.dtype), r > 0 && e.disposeIntermediateTensorInfo(o);
  }
  return t;
}, H8 = {
  kernelName: "SmoothHistograms",
  backendName: "webgl",
  kernelFunc: B8
}, sf = {};
function U8(n, t) {
  const s = "w" + n.shape[1];
  if (!sf.hasOwnProperty(s)) {
    const r = {
      variableNames: ["p"],
      outputShape: [t.shape[0], t.shape[1]],
      userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];
        
                float sj = 0.5 * float(j) - 0.25; 
                float si = 0.5 * float(i) - 0.25;
        
                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);
        
                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);
        
                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            `
    };
    sf[s] = r;
  }
  return sf[s];
}
const Y8 = (n) => {
  const { image: t, targetImage: e } = n.inputs, s = n.backend, r = U8(t, e);
  return s.runWebGLProgram(r, [t], t.dtype);
}, j8 = {
  kernelName: "UpsampleBilinear",
  backendName: "webgl",
  kernelFunc: Y8
};
wn(g8);
wn(I8);
wn(C8);
wn(T8);
wn(L8);
wn(F8);
wn(W8);
wn(M8);
wn(_8);
wn(H8);
wn(j8);
const jx = 8, J8 = 5, $a = 10, Q8 = 5, rf = 3, q8 = 1.5;
(po.length - 1) * po.length / 2;
class f2 {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let r = 0;
    for (; t >= jx && e >= jx && (t /= 2, e /= 2, r++, r !== J8); )
      ;
    this.numOctaves = r, this.tensorCaches = {}, this.kernelCaches = {};
  }
  detectImageData(t) {
    const e = new Uint8ClampedArray(4 * t.length);
    for (let r = 0; r < t.length; r++)
      e[4 * r] = t[r], e[4 * r + 1] = t[r], e[4 * r + 2] = t[r], e[4 * r + 3] = 255;
    const s = new ImageData(e, this.width, this.height);
    return this.detect(s);
  }
  detect(t) {
    let e = null;
    const s = [];
    for (let y = 0; y < this.numOctaves; y++) {
      let b, w;
      y === 0 ? b = this._applyFilter(t) : b = this._downsampleBilinear(s[y - 1][s[y - 1].length - 1]), w = this._applyFilter(b), s.push([b, w]);
    }
    const r = [];
    for (let y = 0; y < this.numOctaves; y++) {
      let b = this._differenceImageBinomial(s[y][0], s[y][1]);
      r.push(b);
    }
    const o = [];
    for (let y = 1; y < this.numOctaves - 1; y++) {
      const b = this._buildExtremas(r[y - 1], r[y], r[y + 1]);
      o.push(b);
    }
    const i = this._applyPrune(o), a = this._computeLocalization(i, r), l = this._computeOrientationHistograms(a, s), c = this._smoothHistograms(l), u = this._computeExtremaAngles(c), h = this._computeExtremaFreak(s, a, u), d = this._computeFreakDescriptors(h), p = a.arraySync(), f = u.arraySync(), m = d.arraySync();
    this.debugMode && (e = {
      pyramidImages: s.map((y) => y.map((b) => b.arraySync())),
      dogPyramidImages: r.map((y) => y ? y.arraySync() : null),
      extremasResults: o.map((y) => y.arraySync()),
      extremaAngles: u.arraySync(),
      prunedExtremas: i,
      localizedExtremas: a.arraySync()
    }), s.forEach((y) => y.forEach((b) => b.dispose())), r.forEach((y) => y && y.dispose()), o.forEach((y) => y.dispose()), a.dispose(), l.dispose(), c.dispose(), u.dispose(), h.dispose(), d.dispose();
    const g = [];
    for (let y = 0; y < p.length; y++) {
      if (p[y][0] == 0)
        continue;
      const b = [];
      for (let R = 0; R < m[y].length; R += 4) {
        const E = m[y][R], V = m[y][R + 1], X = m[y][R + 2], _ = m[y][R + 3];
        let B = E * 16777216 + V * 65536 + X * 256 + _;
        b.push(B);
      }
      const w = p[y][1], x = p[y][2], v = p[y][3] * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, T = x * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, $ = Math.pow(2, w);
      g.push({
        maxima: p[y][0] > 0,
        x: v,
        y: T,
        scale: $,
        angle: f[y],
        descriptors: b
      });
    }
    return { featurePoints: g, debugExtra: e };
  }
  _computeFreakDescriptors(t) {
    if (!this.tensorCaches.computeFreakDescriptors) {
      const s = [], r = [];
      for (let a = 0; a < t.shape[1]; a++)
        for (let l = a + 1; l < t.shape[1]; l++)
          s.push(a), r.push(l);
      const o = ge(s, [s.length]).cast("int32"), i = ge(r, [r.length]).cast("int32");
      this.tensorCaches.computeFreakDescriptors = {
        positionT: Se(yn([o, i], 1))
      };
    }
    const { positionT: e } = this.tensorCaches.computeFreakDescriptors;
    return M(() => oe().runKernel("ComputeFreakDescriptors", { extremaFreaks: t, positionT: e }));
  }
  _computeExtremaFreak(t, e, s) {
    this.tensorCaches._computeExtremaFreak || M(() => {
      const i = ge(po);
      this.tensorCaches._computeExtremaFreak = {
        freakPointsT: Se(i)
      };
    });
    const { freakPointsT: r } = this.tensorCaches._computeExtremaFreak, o = [];
    for (let i = 1; i < t.length; i++)
      o.push(t[i][1]);
    return M(() => oe().runKernel("ComputeExtremaFreak", { gaussianImagesT: o, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: r, pyramidImagesLength: t.length }));
  }
  _computeExtremaAngles(t) {
    return M(() => oe().runKernel("ComputeExtremaAngles", { histograms: t }));
  }
  _computeOrientationHistograms(t, e) {
    const s = [];
    for (let o = 1; o < e.length; o++)
      s.push(e[o][1]);
    this.tensorCaches.orientationHistograms || M(() => {
      const o = -1 / (2 * rf * rf), i = rf * q8, a = Math.ceil(i), l = [];
      for (let c = -a; c <= a; c++)
        for (let u = -a; u <= a; u++) {
          const h = u * u + c * c;
          if (h <= i * i) {
            const d = h * o;
            let p = (720 + d * (720 + d * (360 + d * (120 + d * (30 + d * (6 + d)))))) * 0.0013888888;
            l.push([c, u, p]);
          }
        }
      this.tensorCaches.orientationHistograms = {
        radialPropertiesT: Se(ge(l, [l.length, 3]))
      };
    });
    const { radialPropertiesT: r } = this.tensorCaches.orientationHistograms;
    return M(() => oe().runKernel("ComputeOrientationHistograms", { gaussianImagesT: s, prunedExtremasT: t, radialPropertiesT: r, pyramidImagesLength: e.length }));
  }
  _smoothHistograms(t) {
    return M(() => oe().runKernel("SmoothHistograms", { histograms: t }));
  }
  _computeLocalization(t, e) {
    return M(() => {
      const r = oe().runKernel("ComputeLocalization", { prunedExtremasList: t, dogPyramidImagesT: e }).arraySync(), o = [];
      for (let a = 0; a < r.length; a++) {
        o.push([]);
        for (let l = 0; l < r[a].length; l++)
          o[a].push([]);
      }
      const i = [];
      for (let a = 0; a < t.length; a++)
        i[a] = [
          t[a][0],
          t[a][1],
          t[a][2],
          t[a][3]
        ];
      for (let a = 0; a < i.length; a++) {
        if (i[a][0] === 0)
          continue;
        const l = r[a], c = 0.5 * (l[1][2] - l[1][0]), u = 0.5 * (l[2][1] - l[0][1]), h = l[1][2] + l[1][0] - 2 * l[1][1], d = l[2][1] + l[0][1] - 2 * l[1][1], p = 0.25 * (l[0][0] + l[2][2] - l[0][2] - l[2][0]), f = h * d - p * p, m = (d * -c + -p * -u) / f, g = (-p * -c + h * -u) / f, y = i[a][2] + g, b = i[a][3] + m;
        Math.abs(f) < 1e-4 || (i[a][2] = y, i[a][3] = b);
      }
      return ge(i, [i.length, i[0].length], "float32");
    });
  }
  _applyPrune(t) {
    const e = $a * $a, s = Q8, r = [], o = [];
    for (let a = 0; a < e; a++) {
      o.push([]), r.push([]);
      for (let l = 0; l < s; l++)
        o[a].push([0, 0, 0, 0]), r[a].push(0);
    }
    M(() => {
      for (let a = 0; a < t.length; a++) {
        const l = oe().runKernel("ExtremaReduction", { extremasResultT: t[a] }), c = a + 1, u = l.arraySync(), h = l.shape[0], d = l.shape[1], p = d * 2 / $a, f = h * 2 / $a;
        for (let m = 0; m < h; m++)
          for (let g = 0; g < d; g++) {
            const y = u[m][g];
            if (y == 0)
              continue;
            const b = y % 1e3, w = Math.floor(Math.abs(y) / 1e3), x = g * 2 + (w === 2 || w === 3 ? 1 : 0), S = m * 2 + (w === 1 || w === 3 ? 1 : 0), v = Math.floor(x / p), $ = Math.floor(S / f) * $a + v, R = Math.abs(b);
            let E = s;
            for (; E >= 1 && R > r[$][E - 1]; )
              E -= 1;
            if (E < s) {
              for (let V = s - 1; V >= E + 1; V--)
                r[$][V] = r[$][V - 1], o[$][V][0] = o[$][V - 1][0], o[$][V][1] = o[$][V - 1][1], o[$][V][2] = o[$][V - 1][2], o[$][V][3] = o[$][V - 1][3];
              r[$][E] = R, o[$][E][0] = b, o[$][E][1] = c, o[$][E][2] = S, o[$][E][3] = x;
            }
          }
      }
    });
    const i = [];
    for (let a = 0; a < e; a++)
      for (let l = 0; l < s; l++)
        i.push(o[a][l]);
    return i;
  }
  _buildExtremas(t, e, s) {
    return M(() => oe().runKernel("BuildExtremas", { image0: t, image1: e, image2: s }));
  }
  _differenceImageBinomial(t, e) {
    return M(() => t.sub(e));
  }
  _applyFilter(t) {
    return M(() => oe().runKernel("BinomialFilter", { image: t }));
  }
  _downsampleBilinear(t) {
    return M(() => oe().runKernel("DownsampleBilinear", { image: t }));
  }
  _compileAndRun(t, e) {
    const s = Ks().compileAndRun(t, e);
    return oe().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const r = Ks().runWebGLProgram(t, e, s);
    return oe().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
  }
}
class tq {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let r = Math.min(t, e) / 2, o = Math.pow(2, Math.round(Math.log(r) / Math.log(2)));
    this.cropSize = o, this.detector = new f2(o, o, s), this.kernelCaches = {}, this.lastRandomIndex = 4;
  }
  detect(t) {
    const e = Math.floor(this.height / 2 - this.cropSize / 2), s = Math.floor(this.width / 2 - this.cropSize / 2), r = this._detect(t, s, e);
    return this.debugMode && (r.debugExtra.crop = { startX: s, startY: e, cropSize: this.cropSize }), r;
  }
  detectMoving(t) {
    const e = this.lastRandomIndex % 3, s = Math.floor(this.lastRandomIndex / 3);
    let r = Math.floor(this.height / 2 - this.cropSize + s * this.cropSize / 2), o = Math.floor(this.width / 2 - this.cropSize + e * this.cropSize / 2);
    return o < 0 && (o = 0), r < 0 && (r = 0), o >= this.width - this.cropSize && (o = this.width - this.cropSize - 1), r >= this.height - this.cropSize && (r = this.height - this.cropSize - 1), this.lastRandomIndex = (this.lastRandomIndex + 1) % 9, this._detect(t, o, r);
  }
  _detect(t, e, s) {
    const r = t.slice([s, e], [this.cropSize, this.cropSize]), { featurePoints: o, debugExtra: i } = this.detector.detect(r);
    return o.forEach((a) => {
      a.x += e, a.y += s;
    }), this.debugMode && (i.projectedImage = r.arraySync()), r.dispose(), { featurePoints: o, debugExtra: i };
  }
}
const m2 = ({ image: n, ratio: t }) => {
  const e = Math.round(n.width * t), s = Math.round(n.height * t), r = new Uint8Array(e * s);
  for (let o = 0; o < e; o++) {
    let i = Math.round(1 * o / t), a = Math.round(1 * (o + 1) / t) - 1;
    a >= n.width && (a = n.width - 1);
    for (let l = 0; l < s; l++) {
      let c = Math.round(1 * l / t), u = Math.round(1 * (l + 1) / t) - 1;
      u >= n.height && (u = n.height - 1);
      let h = 0, d = 0;
      for (let p = i; p <= a; p++)
        for (let f = c; f <= u; f++)
          h += 1 * n.data[f * n.width + p], d += 1;
      r[l * e + o] = Math.floor(h / d);
    }
  }
  return { data: r, width: e, height: s };
}, eq = 100, nq = (n) => {
  const t = eq / Math.min(n.width, n.height), e = [];
  let s = t;
  for (; ; )
    if (e.push(s), s *= Math.pow(2, 1 / 3), s >= 0.95) {
      s = 1;
      break;
    }
  e.push(s), e.reverse();
  const r = [];
  for (let o = 0; o < e.length; o++)
    n.width * e[o], n.height * e[o], r.push(Object.assign(m2({ image: n, ratio: e[o] }), { scale: e[o] }));
  return r;
}, Jx = (n) => {
  const t = Math.min(n.width, n.height), e = [], s = [];
  e.push(256 / t), e.push(128 / t);
  for (let r = 0; r < e.length; r++)
    s.push(Object.assign(m2({ image: n, ratio: e[r] }), { scale: e[r] }));
  return s;
}, sq = (n) => {
  const { v1: t, v2: e } = n;
  let s = 0;
  for (let r = 0; r < t.length; r++) {
    let o = (t[r] ^ e[r]) >>> 0;
    s += rq(o);
  }
  return s;
}, rq = (n) => {
  var t = n - (n >> 1 & 1431655765);
  return t = (t >> 2 & 858993459) + (t & 858993459), t = (t >> 4) + t & 252645135, t = (t >> 8) + t & 16711935, t = (t >> 16) + t & 65535, t;
}, oq = 1234, iq = () => ({
  seed: oq,
  arrayShuffle(t) {
    const { arr: e, sampleSize: s } = t;
    for (let r = 0; r < s; r++) {
      this.seed = (214013 * this.seed + 2531011) % -2147483648;
      let o = this.seed >> 16 & 32767;
      o = o % e.length;
      let i = e[r];
      e[r] = e[o], e[o] = i;
    }
  },
  nextInt(t) {
    this.seed = (214013 * this.seed + 2531011) % -2147483648;
    let e = this.seed >> 16 & 32767;
    return e = e % t, e;
  }
}), aq = 16, lq = 128, nm = 8, cq = (n) => {
  const { points: t, pointIndexes: e, randomizer: s } = n, r = [];
  for (let l = 0; l < e.length; l++)
    r.push(l);
  let o = Number.MAX_SAFE_INTEGER, i = -1;
  const a = [];
  for (let l = 0; l < lq; l++) {
    s.arrayShuffle({ arr: r, sampleSize: nm });
    let c = 0;
    const u = [];
    for (let h = 0; h < e.length; h++) {
      let d = Number.MAX_SAFE_INTEGER;
      for (let p = 0; p < nm; p++) {
        const f = e[r[p]], m = sq({ v1: t[e[h]].descriptors, v2: t[f].descriptors });
        m < d && (u[h] = r[p], d = m);
      }
      c += d;
    }
    a.push(u), c < o && (o = c, i = l);
  }
  return a[i];
}, Qx = ({ points: n }) => {
  const t = [];
  for (let r = 0; r < n.length; r++)
    t.push(r);
  const e = iq();
  return { rootNode: g2({ points: n, pointIndexes: t, centerPointIndex: null, randomizer: e }) };
}, g2 = (n) => {
  const { points: t, pointIndexes: e, centerPointIndex: s, randomizer: r } = n;
  let o = !1;
  (e.length <= nm || e.length <= aq) && (o = !0);
  const i = {};
  if (!o) {
    const l = cq({ points: t, pointIndexes: e, randomizer: r });
    for (let c = 0; c < l.length; c++)
      i[e[l[c]]] === void 0 && (i[e[l[c]]] = []), i[e[l[c]]].push(e[c]);
  }
  Object.keys(i).length === 1 && (o = !0);
  const a = {
    centerPointIndex: s
  };
  if (o) {
    a.leaf = !0, a.pointIndexes = [];
    for (let l = 0; l < e.length; l++)
      a.pointIndexes.push(e[l]);
    return a;
  }
  return a.leaf = !1, a.children = [], Object.keys(i).forEach((l) => {
    a.children.push(g2({ points: t, pointIndexes: i[l], centerPointIndex: l, randomizer: r }));
  }), a;
};
var sm = { exports: {} };
(function(n, t) {
  (function(e, s) {
    n.exports = s();
  })(Rr, function() {
    return function(e) {
      var s = {};
      function r(o) {
        if (s[o])
          return s[o].exports;
        var i = s[o] = { i: o, l: !1, exports: {} };
        return e[o].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
      }
      return r.m = e, r.c = s, r.d = function(o, i, a) {
        r.o(o, i) || Object.defineProperty(o, i, { enumerable: !0, get: a });
      }, r.r = function(o) {
        typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(o, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(o, "__esModule", { value: !0 });
      }, r.t = function(o, i) {
        if (1 & i && (o = r(o)), 8 & i || 4 & i && typeof o == "object" && o && o.__esModule)
          return o;
        var a = /* @__PURE__ */ Object.create(null);
        if (r.r(a), Object.defineProperty(a, "default", { enumerable: !0, value: o }), 2 & i && typeof o != "string")
          for (var l in o)
            r.d(a, l, function(c) {
              return o[c];
            }.bind(null, l));
        return a;
      }, r.n = function(o) {
        var i = o && o.__esModule ? function() {
          return o.default;
        } : function() {
          return o;
        };
        return r.d(i, "a", i), i;
      }, r.o = function(o, i) {
        return Object.prototype.hasOwnProperty.call(o, i);
      }, r.p = "", r(r.s = 0);
    }([function(e, s, r) {
      r.r(s), r.d(s, "encode", function() {
        return B;
      }), r.d(s, "decode", function() {
        return Tt;
      }), r.d(s, "decodeAsync", function() {
        return he;
      }), r.d(s, "decodeArrayStream", function() {
        return fe;
      }), r.d(s, "decodeStream", function() {
        return hs;
      }), r.d(s, "Decoder", function() {
        return gt;
      }), r.d(s, "Encoder", function() {
        return X;
      }), r.d(s, "ExtensionCodec", function() {
        return R;
      }), r.d(s, "ExtData", function() {
        return m;
      }), r.d(s, "EXT_TIMESTAMP", function() {
        return b;
      }), r.d(s, "encodeDateToTimeSpec", function() {
        return x;
      }), r.d(s, "encodeTimeSpecToTimestamp", function() {
        return w;
      }), r.d(s, "decodeTimestampToTimeSpec", function() {
        return v;
      }), r.d(s, "encodeTimestampExtension", function() {
        return S;
      }), r.d(s, "decodeTimestampExtension", function() {
        return T;
      });
      var o = function(z, C) {
        var L = typeof Symbol == "function" && z[Symbol.iterator];
        if (!L)
          return z;
        var O, F, Q = L.call(z), Z = [];
        try {
          for (; (C === void 0 || C-- > 0) && !(O = Q.next()).done; )
            Z.push(O.value);
        } catch (at) {
          F = { error: at };
        } finally {
          try {
            O && !O.done && (L = Q.return) && L.call(Q);
          } finally {
            if (F)
              throw F.error;
          }
        }
        return Z;
      }, i = function() {
        for (var z = [], C = 0; C < arguments.length; C++)
          z = z.concat(o(arguments[C]));
        return z;
      }, a = typeof process < "u" && typeof TextEncoder < "u" && typeof TextDecoder < "u";
      function l(z) {
        for (var C = z.length, L = 0, O = 0; O < C; ) {
          var F = z.charCodeAt(O++);
          if ((4294967168 & F) != 0)
            if ((4294965248 & F) == 0)
              L += 2;
            else {
              if (F >= 55296 && F <= 56319 && O < C) {
                var Q = z.charCodeAt(O);
                (64512 & Q) == 56320 && (++O, F = ((1023 & F) << 10) + (1023 & Q) + 65536);
              }
              L += (4294901760 & F) == 0 ? 3 : 4;
            }
          else
            L++;
        }
        return L;
      }
      var c = a ? new TextEncoder() : void 0, u = typeof process < "u" ? 200 : 0, h = c != null && c.encodeInto ? function(z, C, L) {
        c.encodeInto(z, C.subarray(L));
      } : function(z, C, L) {
        C.set(c.encode(z), L);
      };
      function d(z, C, L) {
        for (var O = C, F = O + L, Q = [], Z = ""; O < F; ) {
          var at = z[O++];
          if ((128 & at) == 0)
            Q.push(at);
          else if ((224 & at) == 192) {
            var bt = 63 & z[O++];
            Q.push((31 & at) << 6 | bt);
          } else if ((240 & at) == 224) {
            bt = 63 & z[O++];
            var Ct = 63 & z[O++];
            Q.push((31 & at) << 12 | bt << 6 | Ct);
          } else if ((248 & at) == 240) {
            var j = (7 & at) << 18 | (bt = 63 & z[O++]) << 12 | (Ct = 63 & z[O++]) << 6 | 63 & z[O++];
            j > 65535 && (j -= 65536, Q.push(j >>> 10 & 1023 | 55296), j = 56320 | 1023 & j), Q.push(j);
          } else
            Q.push(at);
          Q.length >= 4096 && (Z += String.fromCharCode.apply(String, i(Q)), Q.length = 0);
        }
        return Q.length > 0 && (Z += String.fromCharCode.apply(String, i(Q))), Z;
      }
      var p = a ? new TextDecoder() : null, f = typeof process < "u" ? 200 : 0, m = function(z, C) {
        this.type = z, this.data = C;
      };
      function g(z, C, L) {
        var O = Math.floor(L / 4294967296), F = L;
        z.setUint32(C, O), z.setUint32(C + 4, F);
      }
      function y(z, C) {
        return 4294967296 * z.getInt32(C) + z.getUint32(C + 4);
      }
      var b = -1;
      function w(z) {
        var C = z.sec, L = z.nsec;
        if (C >= 0 && L >= 0 && C <= 17179869183) {
          if (L === 0 && C <= 4294967295) {
            var O = new Uint8Array(4);
            return (Z = new DataView(O.buffer)).setUint32(0, C), O;
          }
          var F = C / 4294967296, Q = 4294967295 & C;
          return O = new Uint8Array(8), (Z = new DataView(O.buffer)).setUint32(0, L << 2 | 3 & F), Z.setUint32(4, Q), O;
        }
        var Z;
        return O = new Uint8Array(12), (Z = new DataView(O.buffer)).setUint32(0, L), g(Z, 4, C), O;
      }
      function x(z) {
        var C = z.getTime(), L = Math.floor(C / 1e3), O = 1e6 * (C - 1e3 * L), F = Math.floor(O / 1e9);
        return { sec: L + F, nsec: O - 1e9 * F };
      }
      function S(z) {
        return z instanceof Date ? w(x(z)) : null;
      }
      function v(z) {
        var C = new DataView(z.buffer, z.byteOffset, z.byteLength);
        switch (z.byteLength) {
          case 4:
            return { sec: C.getUint32(0), nsec: 0 };
          case 8:
            var L = C.getUint32(0);
            return { sec: 4294967296 * (3 & L) + C.getUint32(4), nsec: L >>> 2 };
          case 12:
            return { sec: y(C, 4), nsec: C.getUint32(0) };
          default:
            throw new Error("Unrecognized data size for timestamp: " + z.length);
        }
      }
      function T(z) {
        var C = v(z);
        return new Date(1e3 * C.sec + C.nsec / 1e6);
      }
      var $ = { type: b, encode: S, decode: T }, R = function() {
        function z() {
          this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register($);
        }
        return z.prototype.register = function(C) {
          var L = C.type, O = C.encode, F = C.decode;
          if (L >= 0)
            this.encoders[L] = O, this.decoders[L] = F;
          else {
            var Q = 1 + L;
            this.builtInEncoders[Q] = O, this.builtInDecoders[Q] = F;
          }
        }, z.prototype.tryToEncode = function(C, L) {
          for (var O = 0; O < this.builtInEncoders.length; O++)
            if ((F = this.builtInEncoders[O]) != null && (Q = F(C, L)) != null)
              return new m(-1 - O, Q);
          for (O = 0; O < this.encoders.length; O++) {
            var F, Q;
            if ((F = this.encoders[O]) != null && (Q = F(C, L)) != null)
              return new m(O, Q);
          }
          return C instanceof m ? C : null;
        }, z.prototype.decode = function(C, L, O) {
          var F = L < 0 ? this.builtInDecoders[-1 - L] : this.decoders[L];
          return F ? F(C, L, O) : new m(L, C);
        }, z.defaultCodec = new z(), z;
      }();
      function E(z) {
        return z instanceof Uint8Array ? z : ArrayBuffer.isView(z) ? new Uint8Array(z.buffer, z.byteOffset, z.byteLength) : z instanceof ArrayBuffer ? new Uint8Array(z) : Uint8Array.from(z);
      }
      var V = function(z) {
        var C = typeof Symbol == "function" && Symbol.iterator, L = C && z[C], O = 0;
        if (L)
          return L.call(z);
        if (z && typeof z.length == "number")
          return { next: function() {
            return z && O >= z.length && (z = void 0), { value: z && z[O++], done: !z };
          } };
        throw new TypeError(C ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }, X = function() {
        function z(C, L, O, F, Q, Z, at) {
          C === void 0 && (C = R.defaultCodec), O === void 0 && (O = 100), F === void 0 && (F = 2048), Q === void 0 && (Q = !1), Z === void 0 && (Z = !1), at === void 0 && (at = !1), this.extensionCodec = C, this.context = L, this.maxDepth = O, this.initialBufferSize = F, this.sortKeys = Q, this.forceFloat32 = Z, this.ignoreUndefined = at, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
        }
        return z.prototype.encode = function(C, L) {
          if (L > this.maxDepth)
            throw new Error("Too deep objects in depth " + L);
          C == null ? this.encodeNil() : typeof C == "boolean" ? this.encodeBoolean(C) : typeof C == "number" ? this.encodeNumber(C) : typeof C == "string" ? this.encodeString(C) : this.encodeObject(C, L);
        }, z.prototype.getUint8Array = function() {
          return this.bytes.subarray(0, this.pos);
        }, z.prototype.ensureBufferSizeToWrite = function(C) {
          var L = this.pos + C;
          this.view.byteLength < L && this.resizeBuffer(2 * L);
        }, z.prototype.resizeBuffer = function(C) {
          var L = new ArrayBuffer(C), O = new Uint8Array(L), F = new DataView(L);
          O.set(this.bytes), this.view = F, this.bytes = O;
        }, z.prototype.encodeNil = function() {
          this.writeU8(192);
        }, z.prototype.encodeBoolean = function(C) {
          C === !1 ? this.writeU8(194) : this.writeU8(195);
        }, z.prototype.encodeNumber = function(C) {
          Number.isSafeInteger(C) ? C >= 0 ? C < 128 ? this.writeU8(C) : C < 256 ? (this.writeU8(204), this.writeU8(C)) : C < 65536 ? (this.writeU8(205), this.writeU16(C)) : C < 4294967296 ? (this.writeU8(206), this.writeU32(C)) : (this.writeU8(207), this.writeU64(C)) : C >= -32 ? this.writeU8(224 | C + 32) : C >= -128 ? (this.writeU8(208), this.writeI8(C)) : C >= -32768 ? (this.writeU8(209), this.writeI16(C)) : C >= -2147483648 ? (this.writeU8(210), this.writeI32(C)) : (this.writeU8(211), this.writeI64(C)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(C)) : (this.writeU8(203), this.writeF64(C));
        }, z.prototype.writeStringHeader = function(C) {
          if (C < 32)
            this.writeU8(160 + C);
          else if (C < 256)
            this.writeU8(217), this.writeU8(C);
          else if (C < 65536)
            this.writeU8(218), this.writeU16(C);
          else {
            if (!(C < 4294967296))
              throw new Error("Too long string: " + C + " bytes in UTF-8");
            this.writeU8(219), this.writeU32(C);
          }
        }, z.prototype.encodeString = function(C) {
          var L = C.length;
          if (a && L > u) {
            var O = l(C);
            this.ensureBufferSizeToWrite(5 + O), this.writeStringHeader(O), h(C, this.bytes, this.pos), this.pos += O;
          } else
            O = l(C), this.ensureBufferSizeToWrite(5 + O), this.writeStringHeader(O), function(F, Q, Z) {
              for (var at = F.length, bt = Z, Ct = 0; Ct < at; ) {
                var j = F.charCodeAt(Ct++);
                if ((4294967168 & j) != 0) {
                  if ((4294965248 & j) == 0)
                    Q[bt++] = j >> 6 & 31 | 192;
                  else {
                    if (j >= 55296 && j <= 56319 && Ct < at) {
                      var Rt = F.charCodeAt(Ct);
                      (64512 & Rt) == 56320 && (++Ct, j = ((1023 & j) << 10) + (1023 & Rt) + 65536);
                    }
                    (4294901760 & j) == 0 ? (Q[bt++] = j >> 12 & 15 | 224, Q[bt++] = j >> 6 & 63 | 128) : (Q[bt++] = j >> 18 & 7 | 240, Q[bt++] = j >> 12 & 63 | 128, Q[bt++] = j >> 6 & 63 | 128);
                  }
                  Q[bt++] = 63 & j | 128;
                } else
                  Q[bt++] = j;
              }
            }(C, this.bytes, this.pos), this.pos += O;
        }, z.prototype.encodeObject = function(C, L) {
          var O = this.extensionCodec.tryToEncode(C, this.context);
          if (O != null)
            this.encodeExtension(O);
          else if (Array.isArray(C))
            this.encodeArray(C, L);
          else if (ArrayBuffer.isView(C))
            this.encodeBinary(C);
          else {
            if (typeof C != "object")
              throw new Error("Unrecognized object: " + Object.prototype.toString.apply(C));
            this.encodeMap(C, L);
          }
        }, z.prototype.encodeBinary = function(C) {
          var L = C.byteLength;
          if (L < 256)
            this.writeU8(196), this.writeU8(L);
          else if (L < 65536)
            this.writeU8(197), this.writeU16(L);
          else {
            if (!(L < 4294967296))
              throw new Error("Too large binary: " + L);
            this.writeU8(198), this.writeU32(L);
          }
          var O = E(C);
          this.writeU8a(O);
        }, z.prototype.encodeArray = function(C, L) {
          var O, F, Q = C.length;
          if (Q < 16)
            this.writeU8(144 + Q);
          else if (Q < 65536)
            this.writeU8(220), this.writeU16(Q);
          else {
            if (!(Q < 4294967296))
              throw new Error("Too large array: " + Q);
            this.writeU8(221), this.writeU32(Q);
          }
          try {
            for (var Z = V(C), at = Z.next(); !at.done; at = Z.next()) {
              var bt = at.value;
              this.encode(bt, L + 1);
            }
          } catch (Ct) {
            O = { error: Ct };
          } finally {
            try {
              at && !at.done && (F = Z.return) && F.call(Z);
            } finally {
              if (O)
                throw O.error;
            }
          }
        }, z.prototype.countWithoutUndefined = function(C, L) {
          var O, F, Q = 0;
          try {
            for (var Z = V(L), at = Z.next(); !at.done; at = Z.next())
              C[at.value] !== void 0 && Q++;
          } catch (bt) {
            O = { error: bt };
          } finally {
            try {
              at && !at.done && (F = Z.return) && F.call(Z);
            } finally {
              if (O)
                throw O.error;
            }
          }
          return Q;
        }, z.prototype.encodeMap = function(C, L) {
          var O, F, Q = Object.keys(C);
          this.sortKeys && Q.sort();
          var Z = this.ignoreUndefined ? this.countWithoutUndefined(C, Q) : Q.length;
          if (Z < 16)
            this.writeU8(128 + Z);
          else if (Z < 65536)
            this.writeU8(222), this.writeU16(Z);
          else {
            if (!(Z < 4294967296))
              throw new Error("Too large map object: " + Z);
            this.writeU8(223), this.writeU32(Z);
          }
          try {
            for (var at = V(Q), bt = at.next(); !bt.done; bt = at.next()) {
              var Ct = bt.value, j = C[Ct];
              this.ignoreUndefined && j === void 0 || (this.encodeString(Ct), this.encode(j, L + 1));
            }
          } catch (Rt) {
            O = { error: Rt };
          } finally {
            try {
              bt && !bt.done && (F = at.return) && F.call(at);
            } finally {
              if (O)
                throw O.error;
            }
          }
        }, z.prototype.encodeExtension = function(C) {
          var L = C.data.length;
          if (L === 1)
            this.writeU8(212);
          else if (L === 2)
            this.writeU8(213);
          else if (L === 4)
            this.writeU8(214);
          else if (L === 8)
            this.writeU8(215);
          else if (L === 16)
            this.writeU8(216);
          else if (L < 256)
            this.writeU8(199), this.writeU8(L);
          else if (L < 65536)
            this.writeU8(200), this.writeU16(L);
          else {
            if (!(L < 4294967296))
              throw new Error("Too large extension object: " + L);
            this.writeU8(201), this.writeU32(L);
          }
          this.writeI8(C.type), this.writeU8a(C.data);
        }, z.prototype.writeU8 = function(C) {
          this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, C), this.pos++;
        }, z.prototype.writeU8a = function(C) {
          var L = C.length;
          this.ensureBufferSizeToWrite(L), this.bytes.set(C, this.pos), this.pos += L;
        }, z.prototype.writeI8 = function(C) {
          this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, C), this.pos++;
        }, z.prototype.writeU16 = function(C) {
          this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, C), this.pos += 2;
        }, z.prototype.writeI16 = function(C) {
          this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, C), this.pos += 2;
        }, z.prototype.writeU32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, C), this.pos += 4;
        }, z.prototype.writeI32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, C), this.pos += 4;
        }, z.prototype.writeF32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, C), this.pos += 4;
        }, z.prototype.writeF64 = function(C) {
          this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, C), this.pos += 8;
        }, z.prototype.writeU64 = function(C) {
          this.ensureBufferSizeToWrite(8), function(L, O, F) {
            var Q = F / 4294967296, Z = F;
            L.setUint32(O, Q), L.setUint32(O + 4, Z);
          }(this.view, this.pos, C), this.pos += 8;
        }, z.prototype.writeI64 = function(C) {
          this.ensureBufferSizeToWrite(8), g(this.view, this.pos, C), this.pos += 8;
        }, z;
      }(), _ = {};
      function B(z, C) {
        C === void 0 && (C = _);
        var L = new X(C.extensionCodec, C.context, C.maxDepth, C.initialBufferSize, C.sortKeys, C.forceFloat32, C.ignoreUndefined);
        return L.encode(z, 1), L.getUint8Array();
      }
      function U(z) {
        return (z < 0 ? "-" : "") + "0x" + Math.abs(z).toString(16).padStart(2, "0");
      }
      var Y = function() {
        function z(C, L) {
          C === void 0 && (C = 16), L === void 0 && (L = 16), this.maxKeyLength = C, this.maxLengthPerKey = L, this.caches = [];
          for (var O = 0; O < this.maxKeyLength; O++)
            this.caches.push([]);
        }
        return z.prototype.canBeCached = function(C) {
          return C > 0 && C <= this.maxKeyLength;
        }, z.prototype.get = function(C, L, O) {
          var F = this.caches[O - 1], Q = F.length;
          t:
            for (var Z = 0; Z < Q; Z++) {
              for (var at = F[Z], bt = at.bytes, Ct = 0; Ct < O; Ct++)
                if (bt[Ct] !== C[L + Ct])
                  continue t;
              return at.value;
            }
          return null;
        }, z.prototype.store = function(C, L) {
          var O = this.caches[C.length - 1], F = { bytes: C, value: L };
          O.length >= this.maxLengthPerKey ? O[Math.random() * O.length | 0] = F : O.push(F);
        }, z.prototype.decode = function(C, L, O) {
          var F = this.get(C, L, O);
          if (F != null)
            return F;
          var Q = d(C, L, O), Z = Uint8Array.prototype.slice.call(C, L, L + O);
          return this.store(Z, Q), Q;
        }, z;
      }(), tt = function(z, C, L, O) {
        return new (L || (L = Promise))(function(F, Q) {
          function Z(Ct) {
            try {
              bt(O.next(Ct));
            } catch (j) {
              Q(j);
            }
          }
          function at(Ct) {
            try {
              bt(O.throw(Ct));
            } catch (j) {
              Q(j);
            }
          }
          function bt(Ct) {
            var j;
            Ct.done ? F(Ct.value) : (j = Ct.value, j instanceof L ? j : new L(function(Rt) {
              Rt(j);
            })).then(Z, at);
          }
          bt((O = O.apply(z, C || [])).next());
        });
      }, J = function(z, C) {
        var L, O, F, Q, Z = { label: 0, sent: function() {
          if (1 & F[0])
            throw F[1];
          return F[1];
        }, trys: [], ops: [] };
        return Q = { next: at(0), throw: at(1), return: at(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function at(bt) {
          return function(Ct) {
            return function(j) {
              if (L)
                throw new TypeError("Generator is already executing.");
              for (; Z; )
                try {
                  if (L = 1, O && (F = 2 & j[0] ? O.return : j[0] ? O.throw || ((F = O.return) && F.call(O), 0) : O.next) && !(F = F.call(O, j[1])).done)
                    return F;
                  switch (O = 0, F && (j = [2 & j[0], F.value]), j[0]) {
                    case 0:
                    case 1:
                      F = j;
                      break;
                    case 4:
                      return Z.label++, { value: j[1], done: !1 };
                    case 5:
                      Z.label++, O = j[1], j = [0];
                      continue;
                    case 7:
                      j = Z.ops.pop(), Z.trys.pop();
                      continue;
                    default:
                      if (F = Z.trys, !((F = F.length > 0 && F[F.length - 1]) || j[0] !== 6 && j[0] !== 2)) {
                        Z = 0;
                        continue;
                      }
                      if (j[0] === 3 && (!F || j[1] > F[0] && j[1] < F[3])) {
                        Z.label = j[1];
                        break;
                      }
                      if (j[0] === 6 && Z.label < F[1]) {
                        Z.label = F[1], F = j;
                        break;
                      }
                      if (F && Z.label < F[2]) {
                        Z.label = F[2], Z.ops.push(j);
                        break;
                      }
                      F[2] && Z.ops.pop(), Z.trys.pop();
                      continue;
                  }
                  j = C.call(z, Z);
                } catch (Rt) {
                  j = [6, Rt], O = 0;
                } finally {
                  L = F = 0;
                }
              if (5 & j[0])
                throw j[1];
              return { value: j[0] ? j[1] : void 0, done: !0 };
            }([bt, Ct]);
          };
        }
      }, et = function(z) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var C, L = z[Symbol.asyncIterator];
        return L ? L.call(z) : (z = typeof __values == "function" ? __values(z) : z[Symbol.iterator](), C = {}, O("next"), O("throw"), O("return"), C[Symbol.asyncIterator] = function() {
          return this;
        }, C);
        function O(F) {
          C[F] = z[F] && function(Q) {
            return new Promise(function(Z, at) {
              (function(bt, Ct, j, Rt) {
                Promise.resolve(Rt).then(function(Pt) {
                  bt({ value: Pt, done: j });
                }, Ct);
              })(Z, at, (Q = z[F](Q)).done, Q.value);
            });
          };
        }
      }, rt = function(z) {
        return this instanceof rt ? (this.v = z, this) : new rt(z);
      }, ot = function(z, C, L) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var O, F = L.apply(z, C || []), Q = [];
        return O = {}, Z("next"), Z("throw"), Z("return"), O[Symbol.asyncIterator] = function() {
          return this;
        }, O;
        function Z(Rt) {
          F[Rt] && (O[Rt] = function(Pt) {
            return new Promise(function(We, Ge) {
              Q.push([Rt, Pt, We, Ge]) > 1 || at(Rt, Pt);
            });
          });
        }
        function at(Rt, Pt) {
          try {
            (We = F[Rt](Pt)).value instanceof rt ? Promise.resolve(We.value.v).then(bt, Ct) : j(Q[0][2], We);
          } catch (Ge) {
            j(Q[0][3], Ge);
          }
          var We;
        }
        function bt(Rt) {
          at("next", Rt);
        }
        function Ct(Rt) {
          at("throw", Rt);
        }
        function j(Rt, Pt) {
          Rt(Pt), Q.shift(), Q.length && at(Q[0][0], Q[0][1]);
        }
      }, lt = new DataView(new ArrayBuffer(0)), it = new Uint8Array(lt.buffer), ht = function() {
        try {
          lt.getInt8(0);
        } catch (z) {
          return z.constructor;
        }
        throw new Error("never reached");
      }(), ct = new ht("Insufficient data"), ft = new Y(), gt = function() {
        function z(C, L, O, F, Q, Z, at, bt) {
          C === void 0 && (C = R.defaultCodec), O === void 0 && (O = 4294967295), F === void 0 && (F = 4294967295), Q === void 0 && (Q = 4294967295), Z === void 0 && (Z = 4294967295), at === void 0 && (at = 4294967295), bt === void 0 && (bt = ft), this.extensionCodec = C, this.context = L, this.maxStrLength = O, this.maxBinLength = F, this.maxArrayLength = Q, this.maxMapLength = Z, this.maxExtLength = at, this.cachedKeyDecoder = bt, this.totalPos = 0, this.pos = 0, this.view = lt, this.bytes = it, this.headByte = -1, this.stack = [];
        }
        return z.prototype.setBuffer = function(C) {
          this.bytes = E(C), this.view = function(L) {
            if (L instanceof ArrayBuffer)
              return new DataView(L);
            var O = E(L);
            return new DataView(O.buffer, O.byteOffset, O.byteLength);
          }(this.bytes), this.pos = 0;
        }, z.prototype.appendBuffer = function(C) {
          if (this.headByte !== -1 || this.hasRemaining()) {
            var L = this.bytes.subarray(this.pos), O = E(C), F = new Uint8Array(L.length + O.length);
            F.set(L), F.set(O, L.length), this.setBuffer(F);
          } else
            this.setBuffer(C);
        }, z.prototype.hasRemaining = function(C) {
          return C === void 0 && (C = 1), this.view.byteLength - this.pos >= C;
        }, z.prototype.createNoExtraBytesError = function(C) {
          var L = this.view, O = this.pos;
          return new RangeError("Extra " + (L.byteLength - O) + " byte(s) found at buffer[" + C + "]");
        }, z.prototype.decodeSingleSync = function() {
          var C = this.decodeSync();
          if (this.hasRemaining())
            throw this.createNoExtraBytesError(this.pos);
          return C;
        }, z.prototype.decodeSingleAsync = function(C) {
          var L, O, F, Q;
          return tt(this, void 0, void 0, function() {
            var Z, at, bt, Ct, j, Rt, Pt, We;
            return J(this, function(Ge) {
              switch (Ge.label) {
                case 0:
                  Z = !1, Ge.label = 1;
                case 1:
                  Ge.trys.push([1, 6, 7, 12]), L = et(C), Ge.label = 2;
                case 2:
                  return [4, L.next()];
                case 3:
                  if ((O = Ge.sent()).done)
                    return [3, 5];
                  if (bt = O.value, Z)
                    throw this.createNoExtraBytesError(this.totalPos);
                  this.appendBuffer(bt);
                  try {
                    at = this.decodeSync(), Z = !0;
                  } catch (Bc) {
                    if (!(Bc instanceof ht))
                      throw Bc;
                  }
                  this.totalPos += this.pos, Ge.label = 4;
                case 4:
                  return [3, 2];
                case 5:
                  return [3, 12];
                case 6:
                  return Ct = Ge.sent(), F = { error: Ct }, [3, 12];
                case 7:
                  return Ge.trys.push([7, , 10, 11]), O && !O.done && (Q = L.return) ? [4, Q.call(L)] : [3, 9];
                case 8:
                  Ge.sent(), Ge.label = 9;
                case 9:
                  return [3, 11];
                case 10:
                  if (F)
                    throw F.error;
                  return [7];
                case 11:
                  return [7];
                case 12:
                  if (Z) {
                    if (this.hasRemaining())
                      throw this.createNoExtraBytesError(this.totalPos);
                    return [2, at];
                  }
                  throw Rt = (j = this).headByte, Pt = j.pos, We = j.totalPos, new RangeError("Insufficient data in parcing " + U(Rt) + " at " + We + " (" + Pt + " in the current buffer)");
              }
            });
          });
        }, z.prototype.decodeArrayStream = function(C) {
          return this.decodeMultiAsync(C, !0);
        }, z.prototype.decodeStream = function(C) {
          return this.decodeMultiAsync(C, !1);
        }, z.prototype.decodeMultiAsync = function(C, L) {
          return ot(this, arguments, function() {
            var O, F, Q, Z, at, bt, Ct, j, Rt;
            return J(this, function(Pt) {
              switch (Pt.label) {
                case 0:
                  O = L, F = -1, Pt.label = 1;
                case 1:
                  Pt.trys.push([1, 13, 14, 19]), Q = et(C), Pt.label = 2;
                case 2:
                  return [4, rt(Q.next())];
                case 3:
                  if ((Z = Pt.sent()).done)
                    return [3, 12];
                  if (at = Z.value, L && F === 0)
                    throw this.createNoExtraBytesError(this.totalPos);
                  this.appendBuffer(at), O && (F = this.readArraySize(), O = !1, this.complete()), Pt.label = 4;
                case 4:
                  Pt.trys.push([4, 9, , 10]), Pt.label = 5;
                case 5:
                  return [4, rt(this.decodeSync())];
                case 6:
                  return [4, Pt.sent()];
                case 7:
                  return Pt.sent(), --F == 0 ? [3, 8] : [3, 5];
                case 8:
                  return [3, 10];
                case 9:
                  if (!((bt = Pt.sent()) instanceof ht))
                    throw bt;
                  return [3, 10];
                case 10:
                  this.totalPos += this.pos, Pt.label = 11;
                case 11:
                  return [3, 2];
                case 12:
                  return [3, 19];
                case 13:
                  return Ct = Pt.sent(), j = { error: Ct }, [3, 19];
                case 14:
                  return Pt.trys.push([14, , 17, 18]), Z && !Z.done && (Rt = Q.return) ? [4, rt(Rt.call(Q))] : [3, 16];
                case 15:
                  Pt.sent(), Pt.label = 16;
                case 16:
                  return [3, 18];
                case 17:
                  if (j)
                    throw j.error;
                  return [7];
                case 18:
                  return [7];
                case 19:
                  return [2];
              }
            });
          });
        }, z.prototype.decodeSync = function() {
          t:
            for (; ; ) {
              var C = this.readHeadByte(), L = void 0;
              if (C >= 224)
                L = C - 256;
              else if (C < 192)
                if (C < 128)
                  L = C;
                else if (C < 144) {
                  if ((F = C - 128) !== 0) {
                    this.pushMapState(F), this.complete();
                    continue t;
                  }
                  L = {};
                } else if (C < 160) {
                  if ((F = C - 144) !== 0) {
                    this.pushArrayState(F), this.complete();
                    continue t;
                  }
                  L = [];
                } else {
                  var O = C - 160;
                  L = this.decodeUtf8String(O, 0);
                }
              else if (C === 192)
                L = null;
              else if (C === 194)
                L = !1;
              else if (C === 195)
                L = !0;
              else if (C === 202)
                L = this.readF32();
              else if (C === 203)
                L = this.readF64();
              else if (C === 204)
                L = this.readU8();
              else if (C === 205)
                L = this.readU16();
              else if (C === 206)
                L = this.readU32();
              else if (C === 207)
                L = this.readU64();
              else if (C === 208)
                L = this.readI8();
              else if (C === 209)
                L = this.readI16();
              else if (C === 210)
                L = this.readI32();
              else if (C === 211)
                L = this.readI64();
              else if (C === 217)
                O = this.lookU8(), L = this.decodeUtf8String(O, 1);
              else if (C === 218)
                O = this.lookU16(), L = this.decodeUtf8String(O, 2);
              else if (C === 219)
                O = this.lookU32(), L = this.decodeUtf8String(O, 4);
              else if (C === 220) {
                if ((F = this.readU16()) !== 0) {
                  this.pushArrayState(F), this.complete();
                  continue t;
                }
                L = [];
              } else if (C === 221) {
                if ((F = this.readU32()) !== 0) {
                  this.pushArrayState(F), this.complete();
                  continue t;
                }
                L = [];
              } else if (C === 222) {
                if ((F = this.readU16()) !== 0) {
                  this.pushMapState(F), this.complete();
                  continue t;
                }
                L = {};
              } else if (C === 223) {
                if ((F = this.readU32()) !== 0) {
                  this.pushMapState(F), this.complete();
                  continue t;
                }
                L = {};
              } else if (C === 196) {
                var F = this.lookU8();
                L = this.decodeBinary(F, 1);
              } else if (C === 197)
                F = this.lookU16(), L = this.decodeBinary(F, 2);
              else if (C === 198)
                F = this.lookU32(), L = this.decodeBinary(F, 4);
              else if (C === 212)
                L = this.decodeExtension(1, 0);
              else if (C === 213)
                L = this.decodeExtension(2, 0);
              else if (C === 214)
                L = this.decodeExtension(4, 0);
              else if (C === 215)
                L = this.decodeExtension(8, 0);
              else if (C === 216)
                L = this.decodeExtension(16, 0);
              else if (C === 199)
                F = this.lookU8(), L = this.decodeExtension(F, 1);
              else if (C === 200)
                F = this.lookU16(), L = this.decodeExtension(F, 2);
              else {
                if (C !== 201)
                  throw new Error("Unrecognized type byte: " + U(C));
                F = this.lookU32(), L = this.decodeExtension(F, 4);
              }
              this.complete();
              for (var Q = this.stack; Q.length > 0; ) {
                var Z = Q[Q.length - 1];
                if (Z.type === 0) {
                  if (Z.array[Z.position] = L, Z.position++, Z.position !== Z.size)
                    continue t;
                  Q.pop(), L = Z.array;
                } else {
                  if (Z.type === 1) {
                    if (at = void 0, (at = typeof L) != "string" && at !== "number")
                      throw new Error("The type of key must be string or number but " + typeof L);
                    Z.key = L, Z.type = 2;
                    continue t;
                  }
                  if (Z.map[Z.key] = L, Z.readCount++, Z.readCount !== Z.size) {
                    Z.key = null, Z.type = 1;
                    continue t;
                  }
                  Q.pop(), L = Z.map;
                }
              }
              return L;
            }
          var at;
        }, z.prototype.readHeadByte = function() {
          return this.headByte === -1 && (this.headByte = this.readU8()), this.headByte;
        }, z.prototype.complete = function() {
          this.headByte = -1;
        }, z.prototype.readArraySize = function() {
          var C = this.readHeadByte();
          switch (C) {
            case 220:
              return this.readU16();
            case 221:
              return this.readU32();
            default:
              if (C < 160)
                return C - 144;
              throw new Error("Unrecognized array type byte: " + U(C));
          }
        }, z.prototype.pushMapState = function(C) {
          if (C > this.maxMapLength)
            throw new Error("Max length exceeded: map length (" + C + ") > maxMapLengthLength (" + this.maxMapLength + ")");
          this.stack.push({ type: 1, size: C, key: null, readCount: 0, map: {} });
        }, z.prototype.pushArrayState = function(C) {
          if (C > this.maxArrayLength)
            throw new Error("Max length exceeded: array length (" + C + ") > maxArrayLength (" + this.maxArrayLength + ")");
          this.stack.push({ type: 0, size: C, array: new Array(C), position: 0 });
        }, z.prototype.decodeUtf8String = function(C, L) {
          var O;
          if (C > this.maxStrLength)
            throw new Error("Max length exceeded: UTF-8 byte length (" + C + ") > maxStrLength (" + this.maxStrLength + ")");
          if (this.bytes.byteLength < this.pos + L + C)
            throw ct;
          var F, Q = this.pos + L;
          return F = this.stateIsMapKey() && ((O = this.cachedKeyDecoder) === null || O === void 0 ? void 0 : O.canBeCached(C)) ? this.cachedKeyDecoder.decode(this.bytes, Q, C) : a && C > f ? function(Z, at, bt) {
            var Ct = Z.subarray(at, at + bt);
            return p.decode(Ct);
          }(this.bytes, Q, C) : d(this.bytes, Q, C), this.pos += L + C, F;
        }, z.prototype.stateIsMapKey = function() {
          return this.stack.length > 0 && this.stack[this.stack.length - 1].type === 1;
        }, z.prototype.decodeBinary = function(C, L) {
          if (C > this.maxBinLength)
            throw new Error("Max length exceeded: bin length (" + C + ") > maxBinLength (" + this.maxBinLength + ")");
          if (!this.hasRemaining(C + L))
            throw ct;
          var O = this.pos + L, F = this.bytes.subarray(O, O + C);
          return this.pos += L + C, F;
        }, z.prototype.decodeExtension = function(C, L) {
          if (C > this.maxExtLength)
            throw new Error("Max length exceeded: ext length (" + C + ") > maxExtLength (" + this.maxExtLength + ")");
          var O = this.view.getInt8(this.pos + L), F = this.decodeBinary(C, L + 1);
          return this.extensionCodec.decode(F, O, this.context);
        }, z.prototype.lookU8 = function() {
          return this.view.getUint8(this.pos);
        }, z.prototype.lookU16 = function() {
          return this.view.getUint16(this.pos);
        }, z.prototype.lookU32 = function() {
          return this.view.getUint32(this.pos);
        }, z.prototype.readU8 = function() {
          var C = this.view.getUint8(this.pos);
          return this.pos++, C;
        }, z.prototype.readI8 = function() {
          var C = this.view.getInt8(this.pos);
          return this.pos++, C;
        }, z.prototype.readU16 = function() {
          var C = this.view.getUint16(this.pos);
          return this.pos += 2, C;
        }, z.prototype.readI16 = function() {
          var C = this.view.getInt16(this.pos);
          return this.pos += 2, C;
        }, z.prototype.readU32 = function() {
          var C = this.view.getUint32(this.pos);
          return this.pos += 4, C;
        }, z.prototype.readI32 = function() {
          var C = this.view.getInt32(this.pos);
          return this.pos += 4, C;
        }, z.prototype.readU64 = function() {
          var C, L, O = (C = this.view, L = this.pos, 4294967296 * C.getUint32(L) + C.getUint32(L + 4));
          return this.pos += 8, O;
        }, z.prototype.readI64 = function() {
          var C = y(this.view, this.pos);
          return this.pos += 8, C;
        }, z.prototype.readF32 = function() {
          var C = this.view.getFloat32(this.pos);
          return this.pos += 4, C;
        }, z.prototype.readF64 = function() {
          var C = this.view.getFloat64(this.pos);
          return this.pos += 8, C;
        }, z;
      }(), kt = {};
      function Tt(z, C) {
        C === void 0 && (C = kt);
        var L = new gt(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength);
        return L.setBuffer(z), L.decodeSingleSync();
      }
      var Ft = function(z, C) {
        var L, O, F, Q, Z = { label: 0, sent: function() {
          if (1 & F[0])
            throw F[1];
          return F[1];
        }, trys: [], ops: [] };
        return Q = { next: at(0), throw: at(1), return: at(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function at(bt) {
          return function(Ct) {
            return function(j) {
              if (L)
                throw new TypeError("Generator is already executing.");
              for (; Z; )
                try {
                  if (L = 1, O && (F = 2 & j[0] ? O.return : j[0] ? O.throw || ((F = O.return) && F.call(O), 0) : O.next) && !(F = F.call(O, j[1])).done)
                    return F;
                  switch (O = 0, F && (j = [2 & j[0], F.value]), j[0]) {
                    case 0:
                    case 1:
                      F = j;
                      break;
                    case 4:
                      return Z.label++, { value: j[1], done: !1 };
                    case 5:
                      Z.label++, O = j[1], j = [0];
                      continue;
                    case 7:
                      j = Z.ops.pop(), Z.trys.pop();
                      continue;
                    default:
                      if (F = Z.trys, !((F = F.length > 0 && F[F.length - 1]) || j[0] !== 6 && j[0] !== 2)) {
                        Z = 0;
                        continue;
                      }
                      if (j[0] === 3 && (!F || j[1] > F[0] && j[1] < F[3])) {
                        Z.label = j[1];
                        break;
                      }
                      if (j[0] === 6 && Z.label < F[1]) {
                        Z.label = F[1], F = j;
                        break;
                      }
                      if (F && Z.label < F[2]) {
                        Z.label = F[2], Z.ops.push(j);
                        break;
                      }
                      F[2] && Z.ops.pop(), Z.trys.pop();
                      continue;
                  }
                  j = C.call(z, Z);
                } catch (Rt) {
                  j = [6, Rt], O = 0;
                } finally {
                  L = F = 0;
                }
              if (5 & j[0])
                throw j[1];
              return { value: j[0] ? j[1] : void 0, done: !0 };
            }([bt, Ct]);
          };
        }
      }, Lt = function(z) {
        return this instanceof Lt ? (this.v = z, this) : new Lt(z);
      }, Ht = function(z, C, L) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var O, F = L.apply(z, C || []), Q = [];
        return O = {}, Z("next"), Z("throw"), Z("return"), O[Symbol.asyncIterator] = function() {
          return this;
        }, O;
        function Z(Rt) {
          F[Rt] && (O[Rt] = function(Pt) {
            return new Promise(function(We, Ge) {
              Q.push([Rt, Pt, We, Ge]) > 1 || at(Rt, Pt);
            });
          });
        }
        function at(Rt, Pt) {
          try {
            (We = F[Rt](Pt)).value instanceof Lt ? Promise.resolve(We.value.v).then(bt, Ct) : j(Q[0][2], We);
          } catch (Ge) {
            j(Q[0][3], Ge);
          }
          var We;
        }
        function bt(Rt) {
          at("next", Rt);
        }
        function Ct(Rt) {
          at("throw", Rt);
        }
        function j(Rt, Pt) {
          Rt(Pt), Q.shift(), Q.length && at(Q[0][0], Q[0][1]);
        }
      };
      function Qt(z) {
        if (z == null)
          throw new Error("Assertion Failure: value must not be null nor undefined");
      }
      function Yt(z) {
        return z[Symbol.asyncIterator] != null ? z : function(C) {
          return Ht(this, arguments, function() {
            var L, O, F, Q;
            return Ft(this, function(Z) {
              switch (Z.label) {
                case 0:
                  L = C.getReader(), Z.label = 1;
                case 1:
                  Z.trys.push([1, , 9, 10]), Z.label = 2;
                case 2:
                  return [4, Lt(L.read())];
                case 3:
                  return O = Z.sent(), F = O.done, Q = O.value, F ? [4, Lt(void 0)] : [3, 5];
                case 4:
                  return [2, Z.sent()];
                case 5:
                  return Qt(Q), [4, Lt(Q)];
                case 6:
                  return [4, Z.sent()];
                case 7:
                  return Z.sent(), [3, 2];
                case 8:
                  return [3, 10];
                case 9:
                  return L.releaseLock(), [7];
                case 10:
                  return [2];
              }
            });
          });
        }(z);
      }
      var ee = function(z, C, L, O) {
        return new (L || (L = Promise))(function(F, Q) {
          function Z(Ct) {
            try {
              bt(O.next(Ct));
            } catch (j) {
              Q(j);
            }
          }
          function at(Ct) {
            try {
              bt(O.throw(Ct));
            } catch (j) {
              Q(j);
            }
          }
          function bt(Ct) {
            var j;
            Ct.done ? F(Ct.value) : (j = Ct.value, j instanceof L ? j : new L(function(Rt) {
              Rt(j);
            })).then(Z, at);
          }
          bt((O = O.apply(z, C || [])).next());
        });
      }, Ut = function(z, C) {
        var L, O, F, Q, Z = { label: 0, sent: function() {
          if (1 & F[0])
            throw F[1];
          return F[1];
        }, trys: [], ops: [] };
        return Q = { next: at(0), throw: at(1), return: at(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function at(bt) {
          return function(Ct) {
            return function(j) {
              if (L)
                throw new TypeError("Generator is already executing.");
              for (; Z; )
                try {
                  if (L = 1, O && (F = 2 & j[0] ? O.return : j[0] ? O.throw || ((F = O.return) && F.call(O), 0) : O.next) && !(F = F.call(O, j[1])).done)
                    return F;
                  switch (O = 0, F && (j = [2 & j[0], F.value]), j[0]) {
                    case 0:
                    case 1:
                      F = j;
                      break;
                    case 4:
                      return Z.label++, { value: j[1], done: !1 };
                    case 5:
                      Z.label++, O = j[1], j = [0];
                      continue;
                    case 7:
                      j = Z.ops.pop(), Z.trys.pop();
                      continue;
                    default:
                      if (F = Z.trys, !((F = F.length > 0 && F[F.length - 1]) || j[0] !== 6 && j[0] !== 2)) {
                        Z = 0;
                        continue;
                      }
                      if (j[0] === 3 && (!F || j[1] > F[0] && j[1] < F[3])) {
                        Z.label = j[1];
                        break;
                      }
                      if (j[0] === 6 && Z.label < F[1]) {
                        Z.label = F[1], F = j;
                        break;
                      }
                      if (F && Z.label < F[2]) {
                        Z.label = F[2], Z.ops.push(j);
                        break;
                      }
                      F[2] && Z.ops.pop(), Z.trys.pop();
                      continue;
                  }
                  j = C.call(z, Z);
                } catch (Rt) {
                  j = [6, Rt], O = 0;
                } finally {
                  L = F = 0;
                }
              if (5 & j[0])
                throw j[1];
              return { value: j[0] ? j[1] : void 0, done: !0 };
            }([bt, Ct]);
          };
        }
      };
      function he(z, C) {
        return C === void 0 && (C = kt), ee(this, void 0, void 0, function() {
          var L;
          return Ut(this, function(O) {
            return L = Yt(z), [2, new gt(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeSingleAsync(L)];
          });
        });
      }
      function fe(z, C) {
        C === void 0 && (C = kt);
        var L = Yt(z);
        return new gt(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeArrayStream(L);
      }
      function hs(z, C) {
        C === void 0 && (C = kt);
        var L = Yt(z);
        return new gt(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeStream(L);
      }
    }]);
  });
})(sm);
var uq = function(n, t) {
  return Object.assign(document.createElement("canvas"), { width: n, height: t });
};
class qx {
  constructor(t, e, s) {
    this.cumsum = [];
    for (let r = 0; r < s; r++) {
      this.cumsum.push([]);
      for (let o = 0; o < e; o++)
        this.cumsum[r].push(0);
    }
    this.cumsum[0][0] = t[0];
    for (let r = 1; r < e; r++)
      this.cumsum[0][r] = this.cumsum[0][r - 1] + t[r];
    for (let r = 1; r < s; r++)
      this.cumsum[r][0] = this.cumsum[r - 1][0] + t[r * e];
    for (let r = 1; r < s; r++)
      for (let o = 1; o < e; o++)
        this.cumsum[r][o] = t[r * e + o] + this.cumsum[r - 1][o] + this.cumsum[r][o - 1] - this.cumsum[r - 1][o - 1];
  }
  query(t, e, s, r) {
    let o = this.cumsum[r][s];
    return e > 0 && (o -= this.cumsum[e - 1][s]), t > 0 && (o -= this.cumsum[r][t - 1]), t > 0 && e > 0 && (o += this.cumsum[e - 1][t - 1]), o;
  }
}
const du = 10, of = 2, Ve = 6, hq = 5, t1 = 0.95, dq = 0.9, pq = 0.2, fq = 8, mq = 24 * 2 / 3, gq = (n) => {
  const { data: t, width: e, height: s, scale: r } = n, o = [e * s];
  for (let y = 0; y < o.length; y++)
    o[y] = !1;
  const i = new Float32Array(t.length);
  for (let y = 0; y < e; y++)
    i[y] = -1, i[e * (s - 1) + y] = -1;
  for (let y = 0; y < s; y++)
    i[y * e] = -1, i[y * e + e - 1] = -1;
  for (let y = 1; y < e - 1; y++)
    for (let b = 1; b < s - 1; b++) {
      let w = y + e * b, x = 0, S = 0;
      for (let v = -1; v <= 1; v++)
        x += t[w + e * v + 1] - t[w + e * v - 1], S += t[w + e + v] - t[w - e + v];
      x /= 3 * 256, S /= 3 * 256, i[w] = Math.sqrt((x * x + S * S) / 2);
    }
  const a = new Uint32Array(1e3);
  for (let y = 0; y < 1e3; y++)
    a[y] = 0;
  const l = [-1, 1, -e, e];
  for (let y = 1; y < e - 1; y++)
    for (let b = 1; b < s - 1; b++) {
      let w = y + e * b, x = !0;
      for (let S = 0; S < l.length; S++)
        if (i[w] <= i[w + l[S]]) {
          x = !1;
          break;
        }
      if (x) {
        let S = Math.floor(i[w] * 1e3);
        S > 999 && (S = 999), S < 0 && (S = 0), a[S] += 1, o[w] = !0;
      }
    }
  const c = 0.02 * e * s;
  let u = 999, h = 0;
  for (; u >= 0 && (h += a[u], !(h > c)); )
    u--;
  for (let y = 0; y < o.length; y++)
    o[y] && i[y] * 1e3 < u && (o[y] = !1);
  const d = [];
  for (let y = 0; y < t.length; y++)
    d[y] = t[y] * t[y];
  const p = new qx(t, e, s), f = new qx(d, e, s), m = new Float32Array(t.length);
  for (let y = 0; y < e; y++)
    for (let b = 0; b < s; b++) {
      const w = b * e + y;
      if (!o[w]) {
        m[w] = 1;
        continue;
      }
      const x = y2({ image: n, cx: y, cy: b, sdThresh: hq, imageDataCumsum: p, imageDataSqrCumsum: f });
      if (x === null) {
        m[w] = 1;
        continue;
      }
      let S = -1;
      for (let v = -du; v <= du; v++) {
        for (let T = -du; T <= du; T++) {
          if (T * T + v * v <= of * of)
            continue;
          const $ = b2({ image: n, cx: y + T, cy: b + v, vlen: x, tx: y, ty: b, imageDataCumsum: p, imageDataSqrCumsum: f });
          if ($ !== null && $ > S && (S = $, S > t1))
            break;
        }
        if (S > t1)
          break;
      }
      m[w] = S;
    }
  return yq({ image: n, featureMap: m, templateSize: Ve, searchSize: of, occSize: mq, maxSimThresh: dq, minSimThresh: pq, sdThresh: fq, imageDataCumsum: p, imageDataSqrCumsum: f });
}, yq = (n) => {
  let { image: t, featureMap: e, templateSize: s, searchSize: r, occSize: o, maxSimThresh: i, minSimThresh: a, sdThresh: l, imageDataCumsum: c, imageDataSqrCumsum: u } = n;
  const { data: h, width: d, height: p, scale: f } = t;
  o = Math.floor(Math.min(t.width, t.height) / 10);
  const m = (s * 2 + 1) * 3, g = Math.floor(d / m), y = Math.floor(p / m);
  let b = Math.floor(d / o) * Math.floor(p / o) + g * y;
  const w = [], x = new Float32Array(h.length);
  for (let v = 0; v < x.length; v++)
    x[v] = e[v];
  let S = 0;
  for (; S < b; ) {
    let v = i, T = -1, $ = -1;
    for (let X = 0; X < p; X++)
      for (let _ = 0; _ < d; _++)
        x[X * d + _] < v && (v = x[X * d + _], T = _, $ = X);
    if (T === -1)
      break;
    const R = y2({ image: t, cx: T, cy: $, sdThresh: 0, imageDataCumsum: c, imageDataSqrCumsum: u });
    if (R === null) {
      x[$ * d + T] = 1;
      continue;
    }
    if (R / (s * 2 + 1) < l) {
      x[$ * d + T] = 1;
      continue;
    }
    let E = 1, V = -1;
    for (let X = -r; X <= r; X++) {
      for (let _ = -r; _ <= r; _++) {
        if (_ * _ + X * X > r * r || _ === 0 && X === 0)
          continue;
        const B = b2({ image: t, vlen: R, cx: T + _, cy: $ + X, tx: T, ty: $, imageDataCumsum: c, imageDataSqrCumsum: u });
        if (B !== null && (B < E && (E = B, E < a && E < v) || B > V && (V = B, V > 0.99)))
          break;
      }
      if (E < a && E < v || V > 0.99)
        break;
    }
    if (E < a && E < v || V > 0.99) {
      x[$ * d + T] = 1;
      continue;
    }
    w.push({ x: T, y: $ }), S += 1;
    for (let X = -o; X <= o; X++)
      for (let _ = -o; _ <= o; _++)
        $ + X < 0 || $ + X >= p || T + _ < 0 || T + _ >= d || (x[($ + X) * d + (T + _)] = 1);
  }
  return w;
}, y2 = ({ image: n, cx: t, cy: e, sdThresh: s, imageDataCumsum: r, imageDataSqrCumsum: o }) => {
  if (t - Ve < 0 || t + Ve >= n.width || e - Ve < 0 || e + Ve >= n.height)
    return null;
  const i = 2 * Ve + 1, a = i * i;
  let l = r.query(t - Ve, e - Ve, t + Ve, e + Ve);
  l /= a;
  let c = o.query(t - Ve, e - Ve, t + Ve, e + Ve);
  return c -= 2 * l * r.query(t - Ve, e - Ve, t + Ve, e + Ve), c += a * l * l, c / a < s * s ? null : (c = Math.sqrt(c), c);
}, b2 = (n) => {
  const { image: t, cx: e, cy: s, vlen: r, tx: o, ty: i, imageDataCumsum: a, imageDataSqrCumsum: l } = n, { data: c, width: u, height: h } = t, d = Ve;
  if (e - d < 0 || e + d >= u || s - d < 0 || s + d >= h)
    return null;
  const p = 2 * d + 1;
  let f = a.query(e - d, s - d, e + d, s + d), m = l.query(e - d, s - d, e + d, s + d), g = 0, y = (s - d) * u + (e - d), b = (i - d) * u + (o - d), w = u - p;
  for (let T = 0; T < p; T++) {
    for (let $ = 0; $ < p; $++)
      g += c[y] * c[b], y += 1, b += 1;
    y += w, b += w;
  }
  let x = a.query(o - d, i - d, o + d, i + d);
  x /= p * p, g -= x * f;
  let S = m - f * f / (p * p);
  return S == 0 ? null : (S = Math.sqrt(S), 1 * g / (r * S));
}, e1 = 2;
class bq {
  constructor(t = !1) {
    this.data = null, this.avoidWorker = t;
  }
  compileImageTargets(t, e) {
    return new Promise(async (s, r) => {
      const o = [];
      for (let u = 0; u < t.length; u++) {
        const h = t[u], p = uq(h.width, h.height).getContext("2d");
        p.drawImage(h, 0, 0, h.width, h.height);
        const f = p.getImageData(0, 0, h.width, h.height), m = new Uint8Array(h.width * h.height);
        for (let y = 0; y < m.length; y++) {
          const b = y * 4;
          m[y] = Math.floor((f.data[b] + f.data[b + 1] + f.data[b + 2]) / 3);
        }
        const g = { data: m, height: h.height, width: h.width };
        o.push(g);
      }
      const i = 50 / o.length;
      let a = 0;
      this.data = [];
      for (let u = 0; u < o.length; u++) {
        const h = o[u], d = nq(h), p = i / d.length, f = await xq(d, () => {
          a += p, e(a);
        });
        this.data.push({
          targetImage: h,
          imageList: d,
          matchingData: f
        });
      }
      for (let u = 0; u < o.length; u++) {
        const h = Jx(o[u]);
        this.data[u].trackingImageList = h;
      }
      const c = await (() => new Promise((u, h) => {
        if (this.avoidWorker) {
          const d = 50 / o.length;
          let p = 0;
          const f = [];
          for (let m = 0; m < o.length; m++) {
            const g = o[m], y = Jx(g), b = d / y.length, w = wq(y, (x) => {
              p += b, e(50 + p);
            });
            f.push(w);
          }
          u(f);
        } else {
          const d = new Worker(new URL("" + new URL("assets/compiler.worker.a69dc9d5.js", import.meta.url).href, self.location));
          d.onmessage = (p) => {
            p.data.type === "progress" ? e(50 + p.data.percent) : p.data.type === "compileDone" && u(p.data.list);
          }, d.postMessage({ type: "compile", targetImages: o });
        }
      }))();
      for (let u = 0; u < o.length; u++)
        this.data[u].trackingData = c[u];
      s(this.data);
    });
  }
  exportData() {
    const t = [];
    for (let s = 0; s < this.data.length; s++)
      t.push({
        targetImage: {
          width: this.data[s].targetImage.width,
          height: this.data[s].targetImage.height
        },
        trackingData: this.data[s].trackingData,
        matchingData: this.data[s].matchingData
      });
    return sm.exports.encode({
      v: e1,
      dataList: t
    });
  }
  importData(t) {
    const e = sm.exports.decode(new Uint8Array(t));
    if (!e.v || e.v !== e1)
      return console.error("Your compiled .mind might be outdated. Please recompile"), [];
    const { dataList: s } = e;
    this.data = [];
    for (let r = 0; r < s.length; r++)
      this.data.push({
        targetImage: s[r].targetImage,
        trackingData: s[r].trackingData,
        matchingData: s[r].matchingData
      });
    return this.data;
  }
}
const xq = async (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const r = n[s], o = new f2(r.width, r.height);
    await Cc(), M(() => {
      const i = ge(r.data, [r.data.length], "float32").reshape([r.height, r.width]), { featurePoints: a } = o.detect(i), l = a.filter((d) => d.maxima), c = a.filter((d) => !d.maxima), u = Qx({ points: l }), h = Qx({ points: c });
      e.push({
        maximaPoints: l,
        minimaPoints: c,
        maximaPointsCluster: u,
        minimaPointsCluster: h,
        width: r.width,
        height: r.height,
        scale: r.scale
      }), t(s);
    });
  }
  return e;
}, wq = (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const r = n[s], o = gq(r), i = {
      data: r.data,
      scale: r.scale,
      width: r.width,
      height: r.height,
      points: o
    };
    e.push(i), t(s);
  }
  return e;
};
class Iq {
  constructor(t, e) {
    this.width = t, this.height = e, this.texShape = [e, t];
    const s = document.createElement("canvas").getContext("2d");
    s.canvas.width = t, s.canvas.height = e, this.context = s, this.program = this.buildProgram(t, e);
    const r = Ks();
    this.tempPixelHandle = r.makeTensorInfo(this.texShape, "float32"), r.texData.get(this.tempPixelHandle.dataId).usage = 2;
  }
  _loadInput(t) {
    return M(() => {
      let e = Rm(t);
      return e = e.mean(2), e;
    });
  }
  loadInput(t) {
    this.context.drawImage(t, 0, 0, this.width, this.height);
    const e = Ks();
    return e.gpgpu.uploadPixelDataToTexture(e.getTexture(this.tempPixelHandle.dataId), this.context.canvas), this._compileAndRun(this.program, [this.tempPixelHandle]);
  }
  buildProgram(t, e) {
    const s = K().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
    return {
      variableNames: ["A"],
      outputShape: this.texShape,
      userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);

	  vec4 values = ${s}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `
    };
  }
  _compileAndRun(t, e) {
    const s = Ks().compileAndRun(t, e);
    return oe().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const r = Ks().runWebGLProgram(t, e, s);
    return oe().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
  }
}
const af = { memory: Za, nextFrame: Cc }, Sq = 1e-3, vq = 1e3, Cq = 5, kq = 5;
class Eq {
  constructor({
    inputWidth: t,
    inputHeight: e,
    onUpdate: s = null,
    debugMode: r = !1,
    maxTrack: o = 1,
    warmupTolerance: i = null,
    missTolerance: a = null,
    filterMinCF: l = null,
    filterBeta: c = null
  }) {
    this.inputWidth = t, this.inputHeight = e, this.maxTrack = o, this.filterMinCF = l === null ? Sq : l, this.filterBeta = c === null ? vq : c, this.warmupTolerance = i === null ? Cq : i, this.missTolerance = a === null ? kq : a, this.cropDetector = new tq(this.inputWidth, this.inputHeight, r), this.inputLoader = new Iq(this.inputWidth, this.inputHeight), this.markerDimensions = null, this.onUpdate = s, this.debugMode = r, this.processingVideo = !1, this.interestedTargetIndex = -1, this.trackingStates = [];
    const u = 10, h = 1e5, d = 45 * Math.PI / 180, p = this.inputHeight / 2 / Math.tan(d / 2);
    this.projectionTransform = [
      [p, 0, this.inputWidth / 2],
      [0, p, this.inputHeight / 2],
      [0, 0, 1]
    ], this.projectionMatrix = this._glProjectionMatrix({
      projectionTransform: this.projectionTransform,
      width: this.inputWidth,
      height: this.inputHeight,
      near: u,
      far: h
    }), this.worker = new s8(), this.workerMatchDone = null, this.workerTrackDone = null, this.worker.onmessage = (f) => {
      f.data.type === "matchDone" && this.workerMatchDone !== null && this.workerMatchDone(f.data), f.data.type === "trackUpdateDone" && this.workerTrackDone !== null && this.workerTrackDone(f.data);
    };
  }
  showTFStats() {
    console.log(af.memory().numTensors), console.table(af.memory());
  }
  addImageTargets(t) {
    return new Promise(async (e, s) => {
      const o = await (await fetch(t)).arrayBuffer(), i = this.addImageTargetsFromBuffer(o);
      e(i);
    });
  }
  addImageTargetsFromBuffer(t) {
    const s = new bq().importData(t), r = [], o = [], i = [];
    for (let a = 0; a < s.length; a++)
      o.push(s[a].matchingData), r.push(s[a].trackingData), i.push([s[a].targetImage.width, s[a].targetImage.height]);
    return this.tracker = new p8(i, r, this.projectionTransform, this.inputWidth, this.inputHeight, this.debugMode), this.worker.postMessage({
      type: "setup",
      inputWidth: this.inputWidth,
      inputHeight: this.inputHeight,
      projectionTransform: this.projectionTransform,
      debugMode: this.debugMode,
      matchingDataList: o
    }), this.markerDimensions = i, { dimensions: i, matchingDataList: o, trackingDataList: r };
  }
  dispose() {
    this.stopProcessVideo(), this.worker.postMessage({
      type: "dispose"
    });
  }
  dummyRun(t) {
    const e = this.inputLoader.loadInput(t);
    this.cropDetector.detect(e), this.tracker.dummyRun(e), e.dispose();
  }
  getProjectionMatrix() {
    return this.projectionMatrix;
  }
  getWorldMatrix(t, e) {
    return this._glModelViewMatrix(t, e);
  }
  async _detectAndMatch(t, e) {
    const { featurePoints: s } = this.cropDetector.detectMoving(t), { targetIndex: r, modelViewTransform: o } = await this._workerMatch(s, e);
    return { targetIndex: r, modelViewTransform: o };
  }
  async _trackAndUpdate(t, e, s) {
    const { worldCoords: r, screenCoords: o } = this.tracker.track(t, e, s);
    return r.length < 4 ? null : await this._workerTrackUpdate(e, { worldCoords: r, screenCoords: o });
  }
  processVideo(t) {
    if (this.processingVideo)
      return;
    this.processingVideo = !0, this.trackingStates = [];
    for (let s = 0; s < this.markerDimensions.length; s++)
      this.trackingStates.push({
        showing: !1,
        isTracking: !1,
        currentModelViewTransform: null,
        trackCount: 0,
        trackMiss: 0,
        filter: new w2({ minCutOff: this.filterMinCF, beta: this.filterBeta })
      });
    (async () => {
      for (; this.processingVideo; ) {
        const s = this.inputLoader.loadInput(t);
        if (this.trackingStates.reduce((o, i) => o + (i.isTracking ? 1 : 0), 0) < this.maxTrack) {
          const o = [];
          for (let l = 0; l < this.trackingStates.length; l++)
            this.trackingStates[l].isTracking !== !0 && (this.interestedTargetIndex !== -1 && this.interestedTargetIndex !== l || o.push(l));
          const { targetIndex: i, modelViewTransform: a } = await this._detectAndMatch(s, o);
          i !== -1 && (this.trackingStates[i].isTracking = !0, this.trackingStates[i].currentModelViewTransform = a);
        }
        for (let o = 0; o < this.trackingStates.length; o++) {
          const i = this.trackingStates[o];
          if (i.isTracking) {
            let a = await this._trackAndUpdate(s, i.currentModelViewTransform, o);
            a === null ? i.isTracking = !1 : i.currentModelViewTransform = a;
          }
          if (i.showing || i.isTracking && (i.trackMiss = 0, i.trackCount += 1, i.trackCount > this.warmupTolerance && (i.showing = !0, i.trackingMatrix = null, i.filter.reset())), i.showing && (i.isTracking ? i.trackMiss = 0 : (i.trackCount = 0, i.trackMiss += 1, i.trackMiss > this.missTolerance && (i.showing = !1, i.trackingMatrix = null, this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: o, worldMatrix: null })))), i.showing) {
            const a = this._glModelViewMatrix(i.currentModelViewTransform, o);
            i.trackingMatrix = i.filter.filter(Date.now(), a);
            const l = [];
            for (let c = 0; c < i.trackingMatrix.length; c++)
              l[c] = i.trackingMatrix[c];
            this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: o, worldMatrix: l });
          }
        }
        s.dispose(), this.onUpdate && this.onUpdate({ type: "processDone" }), await af.nextFrame();
      }
    })();
  }
  stopProcessVideo() {
    this.processingVideo = !1;
  }
  async detect(t) {
    const e = this.inputLoader.loadInput(t), { featurePoints: s, debugExtra: r } = await this.cropDetector.detect(e);
    return e.dispose(), { featurePoints: s, debugExtra: r };
  }
  async match(t, e) {
    const { modelViewTransform: s, debugExtra: r } = await this._workerMatch(t, [e]);
    return { modelViewTransform: s, debugExtra: r };
  }
  async track(t, e, s) {
    const r = this.inputLoader.loadInput(t), o = this.tracker.track(r, e, s);
    return r.dispose(), o;
  }
  async trackUpdate(t, e) {
    return e.worldCoords.length < 4 ? null : await this._workerTrackUpdate(t, e);
  }
  _workerMatch(t, e) {
    return new Promise(async (s, r) => {
      this.workerMatchDone = (o) => {
        s({ targetIndex: o.targetIndex, modelViewTransform: o.modelViewTransform, debugExtra: o.debugExtra });
      }, this.worker.postMessage({ type: "match", featurePoints: t, targetIndexes: e });
    });
  }
  _workerTrackUpdate(t, e) {
    return new Promise(async (s, r) => {
      this.workerTrackDone = (a) => {
        s(a.modelViewTransform);
      };
      const { worldCoords: o, screenCoords: i } = e;
      this.worker.postMessage({ type: "trackUpdate", modelViewTransform: t, worldCoords: o, screenCoords: i });
    });
  }
  _glModelViewMatrix(t, e) {
    const s = this.markerDimensions[e][1];
    return [
      t[0][0],
      -t[1][0],
      -t[2][0],
      0,
      -t[0][1],
      t[1][1],
      t[2][1],
      0,
      -t[0][2],
      t[1][2],
      t[2][2],
      0,
      t[0][1] * s + t[0][3],
      -(t[1][1] * s + t[1][3]),
      -(t[2][1] * s + t[2][3]),
      1
    ];
  }
  _glProjectionMatrix({ projectionTransform: t, width: e, height: s, near: r, far: o }) {
    const i = [
      [2 * t[0][0] / e, 0, -(2 * t[0][2] / e - 1), 0],
      [0, 2 * t[1][1] / s, -(2 * t[1][2] / s - 1), 0],
      [0, 0, -(o + r) / (o - r), -2 * o * r / (o - r)],
      [0, 0, -1, 0]
    ], a = [];
    for (let l = 0; l < 4; l++)
      for (let c = 0; c < 4; c++)
        a.push(i[c][l]);
    return a;
  }
}
export {
  Eq as C,
  bq as a,
  Rq as t
};
